;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "ansi-color.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint-last-output-start" variable nil nil [2797 2830])
            ("ansi-colors" customgroup (:user-visible-flag t) nil [2850 3330])
            ("ansi-color-faces-vector" variable (:default-value [default bold default italic underline success warning error]) nil [3332 4298])
            ("ansi-color-names-vector" variable (:default-value ["black" "red3" "green3" "yellow3" "blue2" "magenta3" "cyan3" "gray90"]) nil [4300 5587])
            ("ansi-color-regexp" variable
               (:constant-flag t
                :default-value "\\[\\([0-9;]*m\\)")
                nil [5589 5688])
            ("ansi-color-drop-regexp" variable
               (:constant-flag t
                :default-value "\\[\\([ABCDsuK]\\|[12][JK]\\|=[0-9]+[hI]\\|[0-9;]*[Hf]\\)")
                nil [5690 5854])
            ("ansi-color-parameter-regexp" variable
               (:constant-flag t
                :default-value "\\([0-9]*\\)[m;]")
                nil [5856 5970])
            ("ansi-color-for-comint-mode" variable (:default-value t) nil [6034 6781])
            ("ansi-color-apply-face-function" variable (:default-value (quote ansi-color-apply-overlay-face)) nil [6783 7047])
            ("ansi-color-for-comint-mode-on" function (:user-visible-flag t) nil [7064 7201])
            ("ansi-color-for-comint-mode-off" function (:user-visible-flag t) nil [7203 7345])
            ("ansi-color-for-comint-mode-filter" function (:user-visible-flag t) nil [7347 7508])
            ("ansi-color-process-output" function (:arguments ("ignored")) nil [7525 8620])
            ("define-obsolete-function-alias" code nil nil [8622 8728])
            ("defvar-local" code nil nil [8754 9114])
            ("ansi-color-filter-apply" function (:arguments ("string")) nil [9116 10358])
            ("ansi-color--find-face" function (:arguments ("codes")) nil [10360 10808])
            ("ansi-color-apply" function (:arguments ("string")) nil [10810 13293])
            ("defvar-local" code nil nil [13320 13691])
            ("ansi-color-filter-region" function (:arguments ("begin" "end")) nil [13693 14795])
            ("ansi-color-apply-on-region" function (:arguments ("begin" "end")) nil [14797 17348])
            ("ansi-color-apply-overlay-face" function (:arguments ("beg" "end" "face")) nil [17350 17583])
            ("ansi-color-make-face" function (:arguments ("property" "color")) nil [18563 19224])
            ("ansi-color-make-extent" function (:arguments ("from" "to" "object")) nil [19226 20049])
            ("ansi-color-freeze-overlay" function (:arguments ("overlay" "is-after" "begin" "end" "len")) nil [20051 20463])
            ("ansi-color-set-extent-face" function (:arguments ("extent" "face")) nil [20465 20716])
            ("ansi-color-parse-sequence" function (:arguments ("escape-seq")) nil [20739 21341])
            ("ansi-color-apply-sequence" function (:arguments ("escape-sequence" "codes")) nil [21343 22843])
            ("ansi-color-make-color-map" function nil nil [22845 24007])
            ("ansi-color-map" variable (:default-value (ansi-color-make-color-map)) nil [24009 24494])
            ("ansi-color-map-update" function (:arguments ("symbol" "value")) nil [24496 24861])
            ("ansi-color-get-face-1" function (:arguments ("ansi-code")) nil [24863 25087])
            ("ansi-color" package nil nil [25089 25110]))          
      :file "ansi-color.el"
      :pointmax 25140
      :fsize 25139
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "simple.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6374])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6376 8658])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8660 10429])
            ("next-error-internal" function nil nil [10431 10852])
            ("defalias" code nil nil [10854 10893])
            ("defalias" code nil nil [10894 10928])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10930 11247])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11249 11517])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11519 11971])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11973 12351])
            ("next-error-follow-last-line" variable nil nil [12422 12462])
            ("define-minor-mode" code nil nil [12464 13172])
            ("next-error-follow-mode-post-command-hook" function nil nil [13288 13621])
            ("fundamental-mode" function (:user-visible-flag t) nil [13630 13839])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13917 14401])
            ("put" code nil nil [14403 14443])
            ("define-derived-mode" code nil nil [14444 14589])
            ("self-insert-uses-region-functions" variable nil nil [14622 14995])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [14997 15130])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15132 18256])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18258 18606])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18608 19320])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19322 20123])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20125 20838])
            ("defalias" code nil nil [20840 20882])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20901 22328])
            ("delete-trailing-lines" variable (:default-value t) nil [22330 22616])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22618 24424])
            ("newline-and-indent" function (:user-visible-flag t) nil [24426 24859])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [24861 26087])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26089 26310])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26312 28852])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28854 30883])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30885 31078])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31080 31279])
            ("back-to-indentation" function (:user-visible-flag t) nil [31281 31571])
            ("fixup-whitespace" function (:user-visible-flag t) nil [31573 31912])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [31914 32352])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32354 32603])
            ("cycle-spacing--context" variable nil nil [32605 32842])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "single-shot"))
                nil [32844 34999])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35002 35903])
            ("put" code nil nil [35904 35994])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35996 37221])
            ("put" code nil nil [37222 37301])
            ("delete-active-region" variable (:default-value t) nil [37303 37840])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (if (eq delete (quote delete-only)) (delete-region (region-beginning) (region-end)) (filter-buffer-substring (region-beginning) (region-end) delete))))) nil [37842 38385])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [38387 39806])
            ("put" code nil nil [39807 39865])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [39867 40792])
            ("put" code nil nil [40793 40850])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [40852 41256])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [41300 43533])
            ("put" code nil nil [43534 43582])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [43584 44266])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [44268 45052])
            ("count-words--buffer-message" function nil nil [45054 45207])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [45209 45534])
            ("define-obsolete-function-alias" code nil nil [45536 45615])
            ("what-line" function (:user-visible-flag t) nil [45617 45968])
            ("count-lines" function (:arguments ("start" "end")) nil [45970 46807])
            ("line-number-at-pos" function (:arguments ("pos")) nil [46809 47269])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [47271 51608])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [51673 51988])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [51990 52513])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [52515 52972])
            ("minibuffer-completing-symbol" variable nil nil [52974 53077])
            ("make-obsolete-variable" code nil nil [53078 53148])
            ("minibuffer-default" variable nil nil [53150 53343])
            ("eval-expression-print-level" variable (:default-value 4) nil [53345 53575])
            ("eval-expression-print-length" variable (:default-value 12) nil [53577 53810])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [53812 54021])
            ("eval-expression-print-format" function (:arguments ("value")) nil [54023 54667])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [54669 54783])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [54785 55263])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [55393 57667])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [57669 58596])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58598 60645])
            ("repeat-complex-command--called-interactively-skip" function (:arguments ("i" "_frame1" "frame2")) nil [60647 60864])
            ("extended-command-history" variable nil nil [60866 60903])
            ("read-extended-command" function nil nil [60905 62429])
            ("suggest-key-bindings" variable (:default-value t) nil [62431 62797])
            ("execute-extended-command" function
               (:user-visible-flag t
                :arguments ("prefixarg" "command-name"))
                nil [62799 65269])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [65271 67656])
            ("minibuffer-history" variable nil nil [67659 67912])
            ("minibuffer-history-sexp-flag" variable nil nil [67913 68228])
            ("setq" code nil nil [68229 68283])
            ("setq" code nil nil [68284 68322])
            ("minibuffer-history-search-history" variable nil nil [68348 68394])
            ("minibuffer-text-before-history" variable nil nil [68396 68596])
            ("add-hook" code nil nil [68598 68662])
            ("minibuffer-history-initialize" function nil nil [68664 68748])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [68750 68912])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [68914 69304])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69306 72150])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [72152 73206])
            ("minibuffer-temporary-goal-position" variable nil nil [73208 73255])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [73257 73897])
            ("minibuffer-default-add-done" variable nil nil [73899 74222])
            ("make-variable-buffer-local" code nil nil [74224 74281])
            ("minibuffer-default-add-completions" function nil nil [74283 74737])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [74739 76931])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [76933 77184])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77186 77444])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77446 78102])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [78104 78389])
            ("minibuffer-prompt-width" function nil nil [78448 78737])
            ("add-hook" code nil nil [78770 78837])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [78839 78890])
            ("make-variable-buffer-local" code nil nil [78891 78963])
            ("minibuffer-history-isearch-setup" function nil nil [78965 79605])
            ("minibuffer-history-isearch-end" function nil nil [79607 79837])
            ("minibuffer-history-isearch-search" function nil nil [79839 81744])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [81746 83143])
            ("minibuffer-history-isearch-wrap" function nil nil [83145 83762])
            ("minibuffer-history-isearch-push-state" function nil nil [83764 84095])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [84097 84309])
            ("define-obsolete-function-alias" code nil nil [84387 84449])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [84451 84694])
            ("undo-in-region" variable nil nil [84696 84800])
            ("undo-no-redo" variable nil nil [84802 84877])
            ("pending-undo-list" variable nil nil [84879 85030])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85032 89653])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [89655 89936])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89938 90200])
            ("undo-in-progress" variable nil nil [90202 90333])
            ("undo-more" function (:arguments ("n")) nil [90335 91030])
            ("primitive-undo" function (:arguments ("n" "list")) nil [91032 97432])
            ("undo-copy-list" function (:arguments ("list")) nil [97457 97555])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [97557 97666])
            ("undo-start" function (:arguments ("beg" "end")) nil [97668 98256])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [98258 101835])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [101837 102876])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [102878 103386])
            ("undo-delta" function (:arguments ("undo-elt")) nil [103557 103890])
            ("undo-ask-before-discard" variable nil nil [103892 104658])
            ("undo-extra-outer-limit" variable nil nil [104660 104936])
            ("make-variable-buffer-local" code nil nil [104937 104989])
            ("setq" code nil nil [105274 105333])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [105334 107023])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "암호" "パスワード" "ପ୍ରବେଶ ସଙ୍କେତ" "ពាក្យសម្ងាត់" "adgangskode" "contraseña" "contrasenya" "geslo" "hasło" "heslo" "iphasiwedi" "jelszó" "lösenord" "lozinka" "mật khẩu" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slaptažodis" "wachtwoord" "كلمة السر" "ססמה" "лозинка" "пароль" "गुप्तशब्द" "शब्दकूट" "પાસવર્ડ" "సంకేతపదము" "ਪਾਸਵਰਡ" "ಗುಪ್ತಪದ" "கடவுச்சொல்" "അടയാളവാക്ക്" "গুপ্তশব্দ" "পাসওয়ার্ড" "රහස්පදය" "密码" "密碼"))) nil [107026 108415])
            ("shell-command-history" variable nil nil [108417 108607])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [108609 108723])
            ("shell-command-default-error-buffer" variable nil nil [108725 109040])
            ("declare-function" code nil nil [109042 109108])
            ("declare-function" code nil nil [109109 109195])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [109197 109901])
            ("declare-function" code nil nil [109903 109954])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [109956 110201])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [110203 110832])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [110834 112087])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [112089 113394])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [113396 121358])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [121360 123783])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [123879 124090])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [124092 131348])
            ("shell-command-to-string" function (:arguments ("command")) nil [131350 131610])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [131612 133062])
            ("process-file-side-effects" variable (:default-value t) nil [133064 133490])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [133492 134377])
            ("tabulated-list-format" variable nil nil [134399 134429])
            ("tabulated-list-entries" variable nil nil [134430 134461])
            ("tabulated-list-sort-key" variable nil nil [134462 134494])
            ("declare-function" code nil nil [134495 134561])
            ("declare-function" code nil nil [134562 134661])
            ("process-menu-query-only" variable nil nil [134663 134699])
            ("define-derived-mode" code nil nil [134701 135197])
            ("list-processes--refresh" function nil nil [135199 136827])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [136829 136926])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [136928 137891])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [137894 139510])
            ("universal-argument--mode" function nil nil [139512 139592])
            ("universal-argument" function (:user-visible-flag t) nil [139594 140303])
            ("universal-argument-more" function (:arguments ("arg")) nil [140305 140743])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140745 141085])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [141087 141821])
            ("filter-buffer-substring-functions" variable nil nil [141825 141942])
            ("make-obsolete-variable" code nil nil [141943 142067])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [142069 142475])
            ("buffer-substring-filters" variable nil nil [142477 142958])
            ("make-obsolete-variable" code nil nil [142959 143074])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [143076 143932])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [143934 144763])
            ("interprogram-cut-function" variable nil nil [144807 145344])
            ("interprogram-paste-function" variable nil nil [145346 146767])
            ("kill-ring" variable nil nil [146808 147263])
            ("kill-ring-max" variable (:default-value 60) nil [147265 147400])
            ("kill-ring-yank-pointer" variable nil nil [147402 147503])
            ("save-interprogram-paste-before-kill" variable nil nil [147505 148007])
            ("kill-do-not-save-duplicates" variable nil nil [148009 148238])
            ("kill-new" function (:arguments ("string" "replace")) nil [148240 150266])
            ("kill-append" function (:arguments ("string" "before-p")) nil [150268 150682])
            ("yank-pop-change-selection" variable nil nil [150684 151032])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [151034 152692])
            ("kill-read-only-ok" variable nil nil [152743 152879])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [152881 155604])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [155798 156698])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [156700 157756])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [157758 159334])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [159336 160156])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [160172 160997])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [161070 161533])
            ("yank-window-start" variable nil nil [161535 161565])
            ("yank-undo-function" variable nil nil [161566 161897])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [161899 163629])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163631 165078])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165080 165270])
            ("kill-forward-chars" function (:arguments ("arg")) nil [165335 165480])
            ("kill-backward-chars" function (:arguments ("arg")) nil [165529 165675])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [165677 166152])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [166154 167506])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [167508 168125])
            ("kill-whole-line" variable nil nil [168162 168307])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168309 170525])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170527 172156])
            ("forward-visible-line" function (:arguments ("arg")) nil [172158 174648])
            ("end-of-visible-line" function nil nil [174650 175416])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [175419 176044])
            ("put" code nil nil [176045 176108])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [176110 177010])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177012 177554])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177556 178125])
            ("define-error" code nil nil [178128 178197])
            ("activate-mark-hook" variable nil nil [178199 178388])
            ("deactivate-mark-hook" variable nil nil [178390 178468])
            ("mark" function (:arguments ("force")) nil [178470 179094])
            ("declare-function" code nil nil [179128 179227])
            ("declare-function" code nil nil [179228 179328])
            ("deactivate-mark" function (:arguments ("force")) nil [179330 181248])
            ("activate-mark" function (:arguments ("no-tmm")) nil [181250 181635])
            ("set-mark" function (:arguments ("pos")) nil [181637 182861])
            ("use-empty-active-region" variable nil nil [182863 183359])
            ("use-region-p" function nil nil [183361 183967])
            ("region-active-p" function nil nil [183969 184630])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [184633 184739])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [184741 185612])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [185614 186294])
            ("redisplay--update-region-highlights" function (:arguments ("windows")) nil [186296 187031])
            ("add-function" code nil nil [187033 187130])
            ("defvar-local" code nil nil [187133 187232])
            ("put" code nil nil [187233 187268])
            ("mark-ring-max" variable (:default-value 16) nil [187270 187415])
            ("global-mark-ring" variable nil nil [187417 187501])
            ("global-mark-ring-max" variable (:default-value 16) nil [187503 187664])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [187666 187974])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [187976 188387])
            ("set-mark-command-repeat-pop" variable nil nil [188389 188848])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [188850 191192])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [191194 192748])
            ("pop-mark" function nil nil [192750 193169])
            ("define-obsolete-function-alias" code nil nil [193171 193260])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193261 194145])
            ("shift-select-mode" variable (:default-value t) nil [194147 194719])
            ("handle-shift-selection" function nil nil [194721 195890])
            ("define-minor-mode" code nil nil [195892 197235])
            ("widen-automatically" variable (:default-value t) nil [197237 197571])
            ("non-essential" variable nil nil [197573 197971])
            ("pop-global-mark" function (:user-visible-flag t) nil [197973 198788])
            ("next-line-add-newlines" variable nil nil [198791 198965])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [198967 201223])
            ("put" code nil nil [201224 201272])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [201274 203008])
            ("put" code nil nil [203009 203105])
            ("track-eol" variable nil nil [203107 203445])
            ("goal-column" variable nil nil [203447 203714])
            ("make-variable-buffer-local" code nil nil [203715 203756])
            ("temporary-goal-column" variable nil nil [203758 204275])
            ("line-move-ignore-invisible" variable (:default-value t) nil [204277 204935])
            ("line-move-visual" variable (:default-value t) nil [204937 205513])
            ("declare-function" code nil nil [205550 205610])
            ("default-font-height" function nil nil [205612 206129])
            ("default-line-height" function nil nil [206131 206593])
            ("window-screen-lines" function nil nil [206595 207165])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [207212 210985])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [211309 213286])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [213434 216024])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [216178 220851])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [220853 223991])
            ("line-move-to-column" function (:arguments ("col")) nil [223993 225372])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [225374 226729])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [226731 228263])
            ("put" code nil nil [228393 228427])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [228429 229430])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [229498 230062])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [230064 230655])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [230657 232072])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232074 232443])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232445 232824])
            ("visual-line" customgroup (:user-visible-flag t) nil [232826 232927])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [232929 233417])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [233419 234606])
            ("visual-line--saved-state" variable nil nil [234608 234645])
            ("define-minor-mode" code nil nil [234647 236288])
            ("turn-on-visual-line-mode" function nil nil [236290 236348])
            ("define-globalized-minor-mode" code nil nil [236350 236448])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236452 236886])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236888 237332])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237334 238805])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [238807 239414])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [239565 240763])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [240765 241769])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [241772 242024])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [242026 242778])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242780 242992])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242994 243185])
            ("current-word" function (:arguments ("strict" "really-word")) nil [243187 244667])
            ("fill-prefix" variable nil nil [244670 244836])
            ("make-variable-buffer-local" code nil nil [244837 244878])
            ("put" code nil nil [244879 244936])
            ("auto-fill-inhibit-regexp" variable nil nil [244938 245104])
            ("do-auto-fill" function nil nil [245106 248406])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [248408 248734])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [248736 249843])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [249845 250001])
            ("put" code nil nil [250003 250065])
            ("put" code nil nil [250239 250291])
            ("define-minor-mode" code nil nil [250293 251038])
            ("auto-fill-function" function nil nil [251105 251212])
            ("turn-on-auto-fill" function nil nil [251214 251307])
            ("turn-off-auto-fill" function nil nil [251309 251405])
            ("custom-add-option" code nil nil [251407 251461])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [251463 252301])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [252304 253094])
            ("defvaralias" code nil nil [253096 253154])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253156 253936])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253938 254482])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [254484 254601])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [254602 254729])
            ("define-minor-mode" code nil nil [254731 255464])
            ("define-minor-mode" code nil nil [255466 256394])
            ("define-minor-mode" code nil nil [256396 256872])
            ("define-minor-mode" code nil nil [256874 257178])
            ("define-minor-mode" code nil nil [257180 257488])
            ("define-minor-mode" code nil nil [257490 258486])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [258489 258620])
            ("blink-matching-paren" variable (:default-value t) nil [258622 258956])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [258958 259357])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [259359 259684])
            ("blink-matching-delay" variable (:default-value 1) nil [259686 259822])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [259824 260092])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [260094 261079])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [261081 261447])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [261449 261659])
            ("blink-matching-open" function (:user-visible-flag t) nil [261661 266088])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [266090 266279])
            ("blink-paren-post-self-insert-function" function nil nil [266281 266808])
            ("put" code nil nil [266810 266868])
            ("add-hook" code nil nil [266870 267249])
            ("keyboard-quit" function (:user-visible-flag t) nil [267427 268075])
            ("buffer-quit-function" variable nil nil [268077 268327])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [268329 269155])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [269157 269552])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [269556 270073])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [270075 271619])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [271621 271946])
            ("rfc822-goto-eoh" function nil nil [271948 272352])
            ("mail-encode-mml" variable nil nil [272394 272533])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [272535 275221])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275223 275614])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275616 276004])
            ("set-variable-value-history" variable nil nil [276008 276193])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [276195 279034])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [279089 279626])
            ("put" code nil nil [279694 279742])
            ("completion-reference-buffer" variable nil nil [279744 279973])
            ("completion-no-auto-exit" variable nil nil [279975 280156])
            ("completion-base-position" variable nil nil [280158 280528])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [280530 280829])
            ("completion-base-size" variable nil nil [280831 281286])
            ("make-obsolete-variable" code nil nil [281287 281366])
            ("delete-completion-window" function (:user-visible-flag t) nil [281368 281742])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281744 281875])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281877 283127])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [283129 285088])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [285172 286010])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [286012 286204])
            ("choose-completion-string-functions" variable nil nil [286206 286845])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [286847 290257])
            ("define-derived-mode" code nil nil [290259 290631])
            ("completion-list-mode-finish" function nil nil [290633 290829])
            ("add-hook" code nil nil [290831 290893])
            ("completion-show-help" variable (:default-value t) nil [290957 291108])
            ("completion-setup-function" function nil nil [291239 293254])
            ("add-hook" code nil nil [293256 293316])
            ("define-key" code nil nil [293318 293393])
            ("define-key" code nil nil [293394 293469])
            ("switch-to-completions" function (:user-visible-flag t) nil [293471 294012])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [294174 294417])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [294418 294671])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [294672 294925])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [294926 295179])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [295180 295437])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [295438 295686])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [295688 296752])
            ("define-key" code nil nil [296754 296825])
            ("define-key" code nil nil [296826 296897])
            ("define-key" code nil nil [296898 296968])
            ("define-key" code nil nil [296969 297038])
            ("define-key" code nil nil [297039 297110])
            ("define-key" code nil nil [297111 297184])
            ("mapc" code nil nil [297474 298069])
            ("clone-buffer-hook" variable nil nil [298121 298222])
            ("clone-indirect-buffer-hook" variable nil nil [298224 298343])
            ("clone-process" function (:arguments ("process" "newname")) nil [298345 299854])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [299957 302920])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [302923 304515])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [304518 305001])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [305049 306589])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [306591 307666])
            ("define-minor-mode" code nil nil [307668 311163])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [311166 311289])
            ("define-minor-mode" code nil nil [311291 312444])
            ("define-minor-mode" code nil nil [312446 313216])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [313219 313402])
            ("define-derived-mode" code nil nil [313404 313520])
            ("messages-buffer" function nil nil [313522 313809])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [314768 316196])
            ("bad-package-check" function (:arguments ("package")) nil [316198 316703])
            ("dolist" code nil nil [316705 316827])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [317480 320014])
            ("iswitchb-mode" variable nil nil [320093 320382])
            ("custom-autoload" code nil nil [320384 320431])
            ("iswitchb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320433 320805])
            ("make-obsolete" code nil nil [320807 320905])
            ("simple" package nil nil [320909 320926]))          
      :file "simple.el"
      :pointmax 320952
      :fsize 321237
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "autoinsert.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("auto-insert" customgroup (:user-visible-flag t) nil [1882 2086])
            ("auto-insert" variable (:default-value (quote not-modified)) nil [2089 2881])
            ("auto-insert-query" variable (:default-value (quote function)) nil [2883 3217])
            ("auto-insert-prompt" variable (:default-value "Perform %s auto-insertion? ") nil [3219 3440])
            ("auto-insert-alist" variable (:default-value (quote ((("\\.\\([Hh]\\|hh\\|hpp\\)\\'" . "C / C++ header") (upcase (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name)) "_" (file-name-extension buffer-file-name))) "#ifndef " str n "#define " str "

" _ "

#endif") (("\\.\\([Cc]\\|cc\\|cpp\\)\\'" . "C / C++ program") nil "#include \"" (let ((stem (file-name-sans-extension buffer-file-name))) (cond ((file-exists-p (concat stem ".h")) (file-name-nondirectory (concat stem ".h"))) ((file-exists-p (concat stem ".hh")) (file-name-nondirectory (concat stem ".hh"))))) & 34 | -10) (("[Mm]akefile\\'" . "Makefile") . "makefile.inc") (html-mode lambda nil (sgml-tag "html")) (plain-tex-mode . "tex-insert.tex") (bibtex-mode . "tex-insert.tex") (latex-mode "options, RET: " "\\documentclass[" str & 93 | -1 123 (read-string "class: ") "}
" ("package, %s: " "\\usepackage[" (read-string "options, RET: ") & 93 | -1 123 str "}
") _ "
\\begin{document}
" _ "
\\end{document}") (("/bin/.*[^/]\\'" . "Shell-Script mode magic number") lambda nil (if (eq major-mode (default-value (quote major-mode))) (sh-mode))) (ada-mode . ada-header) (("\\.[1-9]\\'" . "Man page skeleton") "Short description: " ".\\\" Copyright (C), " (format-time-string "%Y") "  " (getenv "ORGANIZATION") | (progn user-full-name) "
.\\\" You may distribute this file under the terms of the GNU Free
.\\\" Documentation License.
.TH " (file-name-base) " " (file-name-extension (buffer-file-name)) " " (format-time-string "%Y-%m-%d ") "
.SH NAME
" (file-name-base) " \\- " str "
.SH SYNOPSIS
.B " (file-name-base) "
" _ "
.SH DESCRIPTION
.SH OPTIONS
.SH FILES
.SH \"SEE ALSO\"
.SH BUGS
.SH AUTHOR
" (user-full-name) (quote (if (search-backward "&" (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1)) " <" (progn user-mail-address) ">
") (("\\.el\\'" . "Emacs Lisp header") "Short description: " ";;; " (file-name-nondirectory (buffer-file-name)) " --- " str (make-string (max 2 (- 80 (current-column) 27)) 32) "-*- lexical-binding: t; -*-" (quote (setq lexical-binding t)) "

;; Copyright (C) " (format-time-string "%Y") "  " (getenv "ORGANIZATION") | (progn user-full-name) "

;; Author: " (user-full-name) (quote (if (search-backward "&" (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1)) " <" (progn user-mail-address) ">
;; Keywords: " (quote (require (quote finder))) (quote (setq v1 (mapcar (lambda (x) (list (symbol-name (car x)))) finder-known-keywords) v2 (mapconcat (lambda (x) (format "%12s:  %s" (car x) (cdr x))) finder-known-keywords "
"))) ((let ((minibuffer-help-form v2)) (completing-read "Keyword, C-h: " v1 nil t)) str ", ") & -2 "

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; " _ "

;;; Code:



(provide '" (file-name-base) ")
;;; " (file-name-nondirectory (buffer-file-name)) " ends here
") (("\\.texi\\(nfo\\)?\\'" . "Texinfo file skeleton") "Title: " "\\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename " (file-name-base) ".info
" "@settitle " str "
@c %**end of header
@copying
" (setq short-description (read-string "Short description: ")) ".

" "Copyright @copyright{} " (format-time-string "%Y") "  " (getenv "ORGANIZATION") | (progn user-full-name) "

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.

@end quotation

The document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying

@titlepage
@title " str "
@subtitle " short-description "
@author " (getenv "ORGANIZATION") | (progn user-full-name) " <" (progn user-mail-address) ">
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top " str "

@insertcopying
@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
@end menu

@c Update all node entries with `C-c C-u C-n'.
@c Insert new nodes with `C-c C-c n'.
@node Chapter One
@chapter Chapter One

" _ "

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

@c " (file-name-nondirectory (buffer-file-name)) " ends here
")))) nil [3443 10053])
            ("auto-insert-directory" variable (:default-value "~/insert/") nil [10111 10354])
            ("auto-insert" function (:user-visible-flag t) nil [10372 12427])
            ("define-auto-insert" function (:arguments ("condition" "action" "after")) nil [12445 13162])
            ("define-minor-mode" code nil nil [13179 13714])
            ("autoinsert" package nil nil [13716 13737]))          
      :file "autoinsert.el"
      :pointmax 13767
      :fsize 13766
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "startup.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1131 1167])
            ("command-line-processed" variable nil nil [1169 1254])
            ("initialization" customgroup (:user-visible-flag t) nil [1256 1337])
            ("initial-buffer-choice" variable nil nil [1339 2235])
            ("inhibit-startup-screen" variable nil nil [2237 2490])
            ("defvaralias" code nil nil [2492 2552])
            ("defvaralias" code nil nil [2553 2615])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2617 2667])
            ("inhibit-startup-echo-area-message" variable nil nil [2789 3474])
            ("inhibit-default-init" variable nil nil [3476 3606])
            ("inhibit-startup-buffer-menu" variable nil nil [3608 3772])
            ("command-switch-alist" variable nil nil [3774 4042])
            ("command-line-args-left" variable nil nil [4044 4128])
            ("defvaralias" code nil nil [4130 4366])
            ("internal-make-var-non-special" code nil nil [4367 4404])
            ("argi" variable nil nil [4406 4458])
            ("internal-make-var-non-special" code nil nil [4459 4496])
            ("command-line-functions" variable nil nil [4498 4952])
            ("command-line-default-directory" variable nil nil [4954 5122])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5230 8414])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [8416 11368])
            ("before-init-hook" variable nil nil [11371 11481])
            ("after-init-hook" variable nil nil [11483 11899])
            ("emacs-startup-hook" variable nil nil [11901 12008])
            ("term-setup-hook" variable nil nil [12010 12325])
            ("make-obsolete-variable" code nil nil [12327 12443])
            ("inhibit-startup-hooks" variable nil nil [12445 12586])
            ("keyboard-type" variable nil nil [12588 12809])
            ("window-setup-hook" variable nil nil [12811 13258])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13260 13429])
            ("init-file-user" variable nil nil [13431 14078])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14080 15350])
            ("mail-host-address" variable nil nil [15352 15581])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [15583 16072])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16074 16827])
            ("emacs-basic-display" variable nil nil [16829 16861])
            ("init-file-debug" variable nil nil [16863 16891])
            ("init-file-had-error" variable nil nil [16893 16989])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [16991 17043])
            ("no-blinking-cursor" variable nil nil [17045 17076])
            ("pure-space-overflow" variable nil nil [17078 17163])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17165 17341])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [17343 17578])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [17580 17957])
            ("package--description-file" function (:arguments ("dir")) nil [17959 18290])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18292 20032])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [20034 20803])
            ("normal-top-level" function nil nil [20805 30177])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [30285 30511])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [30513 30603])
            ("tool-bar-originally-present" variable nil nil [30605 30724])
            ("handle-args-function-alist" variable (:default-value (quote ((nil . tty-handle-args)))) nil [30726 31088])
            ("window-system-initialization-alist" variable (:default-value (quote ((nil . ignore)))) nil [31090 31456])
            ("tty-handle-args" function (:arguments ("args")) nil [31458 34205])
            ("declare-function" code nil nil [34207 34301])
            ("declare-function" code nil nil [34302 34361])
            ("declare-function" code nil nil [34362 34406])
            ("server-name" variable nil nil [34408 34428])
            ("server-process" variable nil nil [34429 34452])
            ("command-line" function nil nil [34454 55814])
            ("x-apply-session-resources" function nil nil [55816 56843])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

")) nil [56845 57287])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [57462 60179])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [60181 63401])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [63404 63523])
            ("fancy-splash-image" variable nil nil [63525 63722])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [63725 64097])
            ("fancy-splash-insert" function (:arguments ("args")) nil [64168 65564])
            ("declare-function" code nil nil [65566 65635])
            ("fancy-splash-image-file" function nil nil [65637 66116])
            ("fancy-splash-head" function nil nil [66118 67134])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [67136 70275])
            ("exit-splash-screen" function (:user-visible-flag t) nil [70277 70386])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [70388 71819])
            ("fancy-about-screen" function nil nil [71821 72579])
            ("fancy-splash-frame" function nil nil [72581 73177])
            ("use-fancy-splash-screens-p" function nil nil [73179 73869])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [73872 76381])
            ("normal-mouse-startup-screen" function nil nil [76383 78160])
            ("normal-no-mouse-startup-screen" function nil nil [78162 82265])
            ("normal-about-screen" function nil nil [82267 83792])
            ("startup-echo-area-message" function nil nil [83794 83991])
            ("display-startup-echo-area-message" function nil nil [83993 85257])
            ("display-startup-screen" function (:arguments ("concise")) nil [85259 85711])
            ("display-about-screen" function (:user-visible-flag t) nil [85713 85959])
            ("defalias" code nil nil [85961 86006])
            ("defalias" code nil nil [86007 86064])
            ("command-line-1" function (:arguments ("args-left")) nil [86066 97406])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [97408 98140]))          
      :file "startup.el"
      :pointmax 98167
      :fsize 98166
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "frame.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [948 965])
            ("frame-creation-function-alist" variable (:default-value (list (cons nil (if (fboundp (quote tty-create-frame-with-faces)) (quote tty-create-frame-with-faces) (lambda (_parameters) (error "Can't create multiple frames without a window system")))))) nil [968 1450])
            ("window-system-default-frame-alist" variable nil nil [1452 1895])
            ("display-format-alist" variable nil nil [1897 2149])
            ("initial-frame-alist" variable nil nil [2341 3571])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [3573 4275])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4277 4746])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [4748 5044])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5046 5306])
            ("frame-initial-frame" variable nil nil [6084 6116])
            ("frame-initial-frame-alist" variable nil nil [6195 6229])
            ("frame-initial-geometry-arguments" variable nil nil [6231 6276])
            ("frame-initialize" function nil nil [6465 8178])
            ("frame-notice-user-settings" variable (:default-value t) nil [8180 8289])
            ("declare-function" code nil nil [8291 8350])
            ("defalias" code nil nil [8352 8402])
            ("frame-notice-user-settings" function nil nil [8599 19900])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [19902 20103])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20170 21345])
            ("get-other-frame" function nil nil [21347 21605])
            ("next-multiframe-window" function (:user-visible-flag t) nil [21607 21865])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21867 22131])
            ("window-system-for-display" function (:arguments ("display")) nil [22133 22608])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [22610 22879])
            ("declare-function" code nil nil [22881 22938])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [22940 24292])
            ("make-frame-command" function (:user-visible-flag t) nil [24294 24557])
            ("before-make-frame-hook" variable nil nil [24559 24642])
            ("after-make-frame-functions" variable nil nil [24644 24791])
            ("after-setting-font-hook" variable nil nil [24793 24889])
            ("define-obsolete-function-alias" code nil nil [24919 24981])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24983 25101])
            ("x-display-name" variable nil nil [25103 25126])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25128 28771])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [28773 29072])
            ("minibuffer-frame-list" function nil nil [29074 29267])
            ("get-device-terminal" function (:arguments ("device")) nil [29319 30072])
            ("frames-on-display-list" function (:arguments ("device")) nil [30074 30516])
            ("framep-on-display" function (:arguments ("terminal")) nil [30518 30957])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [30959 31820])
            ("declare-function" code nil nil [31822 31872])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [31874 32984])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32986 33965])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [33967 34197])
            ("suspend-frame" function (:user-visible-flag t) nil [34199 34676])
            ("make-frame-names-alist" function nil nil [34678 35084])
            ("frame-name-history" variable nil nil [35086 35117])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35118 35809])
            ("frame-background-mode" variable nil nil [35836 36509])
            ("declare-function" code nil nil [36511 36605])
            ("declare-function" code nil nil [36650 36720])
            ("inhibit-frame-set-background-mode" variable nil nil [36722 36768])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [36770 39668])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [39670 40186])
            ("current-frame-configuration" function nil nil [40217 40813])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [40815 42820])
            ("frame-height" function (:arguments ("frame")) nil [42915 43581])
            ("frame-width" function (:arguments ("frame")) nil [43583 43788])
            ("declare-function" code nil nil [43790 43895])
            ("define-obsolete-function-alias" code nil nil [43897 43970])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [43972 47288])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [47290 47541])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47543 48288])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48290 49035])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49037 49523])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49525 49991])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49993 50375])
            ("define-minor-mode" code nil nil [50377 51257])
            ("define-minor-mode" code nil nil [51259 52100])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [52102 52478])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [52480 53007])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [53009 53699])
            ("declare-function" code nil nil [53737 53780])
            ("display-mouse-p" function (:arguments ("display")) nil [53782 54573])
            ("display-popup-menus-p" function (:arguments ("display")) nil [54575 54861])
            ("display-graphic-p" function (:arguments ("display")) nil [54863 55320])
            ("display-images-p" function (:arguments ("display")) nil [55322 55600])
            ("defalias" code nil nil [55602 55654])
            ("defalias" code nil nil [55655 55706])
            ("display-selections-p" function (:arguments ("display")) nil [55708 56339])
            ("declare-function" code nil nil [56341 56407])
            ("display-screens" function (:arguments ("display")) nil [56409 56798])
            ("declare-function" code nil nil [56800 56871])
            ("display-pixel-height" function (:arguments ("display")) nil [56873 57606])
            ("declare-function" code nil nil [57608 57678])
            ("display-pixel-width" function (:arguments ("display")) nil [57680 58408])
            ("display-mm-dimensions-alist" variable nil nil [58410 59028])
            ("declare-function" code nil nil [59030 59098])
            ("display-mm-height" function (:arguments ("display")) nil [59100 59979])
            ("declare-function" code nil nil [59981 60048])
            ("display-mm-width" function (:arguments ("display")) nil [60050 60925])
            ("declare-function" code nil nil [60927 60999])
            ("display-backing-store" function (:arguments ("display")) nil [61104 61622])
            ("declare-function" code nil nil [61624 61693])
            ("display-save-under" function (:arguments ("display")) nil [61695 62092])
            ("declare-function" code nil nil [62094 62159])
            ("display-planes" function (:arguments ("display")) nil [62161 62602])
            ("declare-function" code nil nil [62604 62674])
            ("display-color-cells" function (:arguments ("display")) nil [62676 63121])
            ("declare-function" code nil nil [63123 63194])
            ("display-visual-class" function (:arguments ("display")) nil [63196 63786])
            ("declare-function" code nil nil [63788 63874])
            ("declare-function" code nil nil [63875 63964])
            ("declare-function" code nil nil [63965 64053])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [64055 66580])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [66612 68482])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [68484 69743])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [69747 70799])
            ("define-obsolete-variable-alias" code nil nil [70844 70930])
            ("cursor" customgroup (:user-visible-flag t) nil [70954 71039])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [71041 71169])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [71171 71289])
            ("blink-cursor-blinks" variable (:default-value 10) nil [71291 71501])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [71503 71616])
            ("blink-cursor-idle-timer" variable nil nil [71618 71793])
            ("blink-cursor-timer" variable nil nil [71795 71957])
            ("blink-cursor-start" function nil nil [71959 72658])
            ("blink-cursor-timer-function" function nil nil [72660 73316])
            ("blink-cursor-end" function nil nil [73319 73714])
            ("blink-cursor-suspend" function nil nil [73716 74071])
            ("blink-cursor-check" function nil nil [74073 74558])
            ("define-obsolete-variable-alias" code nil nil [74560 74632])
            ("define-minor-mode" code nil nil [74634 75901])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [75939 76893])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [76895 77859])
            ("define-key" code nil nil [77882 77930])
            ("define-key" code nil nil [77931 77980])
            ("define-key" code nil nil [77981 78023])
            ("define-key" code nil nil [78024 78065])
            ("define-key" code nil nil [78066 78120])
            ("define-key" code nil nil [78121 78181])
            ("define-key" code nil nil [78182 78242])
            ("define-obsolete-variable-alias" code nil nil [78292 78374])
            ("make-variable-buffer-local" code nil nil [78376 78430])
            ("make-obsolete-variable" code nil nil [78457 78551])
            ("frame" package nil nil [78553 78569]))          
      :file "frame.el"
      :pointmax 78594
      :fsize 78593
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 965 . 966) (symbol 930 . 947) (open-paren 929 . 930)))
    (semanticdb-table "abbrev.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1049 1066])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1069 1183])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1185 1375])
            ("only-global-abbrevs" variable nil nil [1377 1628])
            ("define-minor-mode" code nil nil [1630 2058])
            ("put" code nil nil [2060 2109])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2113 2393])
            ("define-obsolete-variable-alias" code nil nil [2394 2476])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2478 2649])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2651 2986])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2988 3274])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3276 3574])
            ("abbrev-table-name" function (:arguments ("table")) nil [3576 3862])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3864 4750])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4752 5695])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5697 5892])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5894 6892])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6894 7411])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7413 7738])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7740 9499])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9501 9821])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9823 10056])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10060 10600])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10602 11092])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11094 11687])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11689 12120])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12122 12465])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12467 13078])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13080 13741])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13743 14430])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14456 14609])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14611 14836])
            ("defalias" code nil nil [14838 14927])
            ("defalias" code nil nil [14929 15099])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15155 15296])
            ("make-abbrev-table" function (:arguments ("props")) nil [15298 16089])
            ("abbrev-table-p" function (:arguments ("object")) nil [16091 16260])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16262 16726])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16728 16975])
            ("abbrev-minor-mode-table-alist" variable nil nil [16977 17232])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17234 17509])
            ("abbrevs-changed" variable nil nil [17511 17659])
            ("abbrev-all-caps" variable nil nil [17661 17802])
            ("abbrev-start-location" variable nil nil [17804 18006])
            ("abbrev-start-location-buffer" variable nil nil [18008 18186])
            ("last-abbrev" variable nil nil [18188 18285])
            ("last-abbrev-text" variable nil nil [18287 18417])
            ("last-abbrev-location" variable nil nil [18419 18509])
            ("pre-abbrev-expand-hook" variable nil nil [18686 18961])
            ("make-obsolete-variable" code nil nil [18962 19041])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19043 19665])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19667 22678])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22680 23423])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23425 23783])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23785 24207])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24209 25256])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25259 26207])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26209 26903])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [26906 27166])
            ("abbrev--before-point" function nil nil [27169 29753])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [29755 32799])
            ("abbrev-expand-functions" variable nil nil [32801 32887])
            ("make-obsolete-variable" code nil nil [32888 32968])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [32970 33173])
            ("expand-abbrev" function (:user-visible-flag t) nil [33175 33640])
            ("abbrev--default-expand" function nil nil [33642 35069])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35071 35969])
            ("abbrev--write" function (:arguments ("sym")) nil [35971 36426])
            ("abbrev--describe" function (:arguments ("sym")) nil [36428 36822])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [36824 37865])
            ("put" code nil nil [37867 37911])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [37912 39916])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [39918 40734])
            ("define-derived-mode" code nil nil [40829 40959])
            ("abbrev" package nil nil [40961 40978]))          
      :file "abbrev.el"
      :pointmax 41004
      :fsize 41003
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 1066 . 1067) (symbol 1031 . 1048) (open-paren 1030 . 1031)))
    (semanticdb-table "files-x.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("read-file-local-variable" function (:arguments ("prompt")) nil [1154 1916])
            ("read-file-local-variable-value" function (:arguments ("variable")) nil [1918 3570])
            ("read-file-local-variable-mode" function nil nil [3572 4409])
            ("modify-file-local-variable-message" function (:arguments ("variable" "value" "op")) nil [4411 5506])
            ("modify-file-local-variable" function (:arguments ("variable" "value" "op" "interactive")) nil [5508 8836])
            ("add-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [8853 9575])
            ("delete-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [9592 9885])
            ("modify-file-local-variable-prop-line" function (:arguments ("variable" "value" "op" "interactive")) nil [9887 14338])
            ("add-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [14355 14982])
            ("delete-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [14999 15304])
            ("auto-insert" variable nil nil [15306 15326])
            ("modify-dir-local-variable" function (:arguments ("mode" "variable" "value" "op")) nil [15349 18428])
            ("add-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable" "value"))
                nil [18445 18853])
            ("delete-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable"))
                nil [18870 19175])
            ("copy-file-locals-to-dir-locals" function (:user-visible-flag t) nil [19192 19460])
            ("copy-dir-locals-to-file-locals" function (:user-visible-flag t) nil [19477 19691])
            ("copy-dir-locals-to-file-locals-prop-line" function (:user-visible-flag t) nil [19708 19930])
            ("files-x" package nil nil [19935 19953]))          
      :file "files-x.el"
      :pointmax 19980
      :fsize 19979
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "epa-hook.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("epa-file" customgroup (:user-visible-flag t) nil [910 1028])
            ("epa-file--file-name-regexp-set" function (:arguments ("variable" "value")) nil [1030 1198])
            ("epa-file-name-regexp" variable (:default-value (purecopy "\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'")) nil [1200 1643])
            ("epa-file-inhibit-auto-save" variable (:default-value t) nil [1645 1789])
            ("epa-file-encrypt-to" variable nil nil [1791 1912])
            ("put" code nil nil [1914 2148])
            ("put" code nil nil [2150 2195])
            ("epa-file-handler" variable (:default-value (cons epa-file-name-regexp (quote epa-file-handler))) nil [2197 2270])
            ("epa-file-auto-mode-alist-entry" variable (:default-value (list epa-file-name-regexp nil (quote epa-file))) nil [2272 2355])
            ("epa-file-name-regexp-update" function nil nil [2357 2525])
            ("epa-file-find-file-hook" function nil nil [2527 2704])
            ("define-minor-mode" code nil nil [2706 3808])
            ("put" code nil nil [3810 3847])
            ("put" code nil nil [3848 3920])
            ("epa-hook" package nil nil [3922 3941]))          
      :file "epa-hook.el"
      :pointmax 3969
      :fsize 3968
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "files.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2498])
            ("make-backup-files" variable (:default-value t) nil [2500 3423])
            ("backup-inhibited" variable nil nil [3524 3716])
            ("put" code nil nil [3717 3759])
            ("backup-by-copying" variable nil nil [3761 3939])
            ("backup-by-copying-when-linked" variable nil nil [3941 4234])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4236 4724])
            ("put" code nil nil [4725 4782])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4784 5407])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5409 5628])
            ("buffer-offer-save" variable nil nil [5630 5849])
            ("make-variable-buffer-local" code nil nil [5850 5897])
            ("put" code nil nil [5898 5941])
            ("find-file-existing-other-name" variable (:default-value t) nil [5943 6236])
            ("find-file-visit-truename" variable nil nil [6238 6610])
            ("put" code nil nil [6611 6673])
            ("revert-without-query" variable nil nil [6675 7040])
            ("buffer-file-number" variable nil nil [7042 7311])
            ("make-variable-buffer-local" code nil nil [7312 7360])
            ("put" code nil nil [7361 7405])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7407 7552])
            ("buffer-file-read-only" variable nil nil [7554 7644])
            ("make-variable-buffer-local" code nil nil [7645 7696])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7698 8142])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8210 8279])
            ("declare-function" code nil nil [8281 8331])
            ("declare-function" code nil nil [8332 8381])
            ("declare-function" code nil nil [8382 8468])
            ("declare-function" code nil nil [8469 8536])
            ("declare-function" code nil nil [8537 8609])
            ("declare-function" code nil nil [8610 8666])
            ("declare-function" code nil nil [8667 8726])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8728 9401])
            ("file-precious-flag" variable nil nil [9403 10243])
            ("break-hardlink-on-save" variable nil nil [10245 11000])
            ("version-control" variable nil nil [11002 11372])
            ("put" code nil nil [11373 11469])
            ("dired-kept-versions" variable (:default-value 2) nil [11471 11611])
            ("delete-old-versions" variable nil nil [11613 11879])
            ("kept-old-versions" variable (:default-value 2) nil [11881 12020])
            ("put" code nil nil [12021 12076])
            ("kept-new-versions" variable (:default-value 2) nil [12078 12255])
            ("put" code nil nil [12256 12311])
            ("require-final-newline" variable nil nil [12313 13084])
            ("mode-require-final-newline" variable (:default-value t) nil [13086 14221])
            ("auto-save-default" variable (:default-value t) nil [14223 14365])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14367 15795])
            ("save-abbrevs" variable (:default-value t) nil [15797 16008])
            ("find-file-run-dired" variable (:default-value t) nil [16010 16207])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16209 16537])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16598 16926])
            ("define-obsolete-variable-alias" code nil nil [17034 17135])
            ("find-file-not-found-functions" variable nil nil [17136 17437])
            ("define-obsolete-variable-alias" code nil nil [17535 17607])
            ("find-file-hook" variable nil nil [17608 17885])
            ("define-obsolete-variable-alias" code nil nil [17887 17966])
            ("write-file-functions" variable nil nil [17967 18748])
            ("put" code nil nil [18749 18795])
            ("local-write-file-hooks" variable nil nil [18797 18832])
            ("make-variable-buffer-local" code nil nil [18833 18885])
            ("put" code nil nil [18886 18934])
            ("make-obsolete-variable" code nil nil [18935 19012])
            ("define-obsolete-variable-alias" code nil nil [19014 19105])
            ("write-contents-functions" variable nil nil [19106 19862])
            ("make-variable-buffer-local" code nil nil [19863 19917])
            ("enable-local-variables" variable (:default-value t) nil [19919 21171])
            ("enable-dir-local-variables" variable (:default-value t) nil [21173 21394])
            ("local-enable-local-variables" variable (:default-value t) nil [22757 23142])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23144 23535])
            ("or" code nil nil [23600 23663])
            ("or" code nil nil [23664 23731])
            ("or" code nil nil [23732 23799])
            ("view-read-only" variable nil nil [23801 24151])
            ("file-name-history" variable nil nil [24153 24336])
            ("put" code nil nil [24339 24393])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24394 25000])
            ("declare-function" code nil nil [25002 25074])
            ("declare-function" code nil nil [25075 25147])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25149 26402])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26404 27525])
            ("pwd" function (:user-visible-flag t) nil [27529 27648])
            ("cd-path" variable nil nil [27650 27780])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27782 28401])
            ("cd-absolute" function (:arguments ("dir")) nil [28403 29308])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29310 31200])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [31202 31529])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31531 32910])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32912 35874])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35876 36284])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [36286 36890])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38443 40632])
            ("user-emacs-directory-warning" variable (:default-value t) nil [40634 40836])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [40838 42652])
            ("executable-find" function (:arguments ("command")) nil [42655 42963])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [42965 43562])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [43564 45318])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [45617 46336])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [46338 47563])
            ("file-local-copy" function (:arguments ("file")) nil [47565 47954])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [47956 52847])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [52849 54252])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [54384 55501])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [55503 57094])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [57096 59333])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [59336 59949])
            ("confirm-nonexistent-file-or-buffer" function nil nil [59951 60392])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [60394 61220])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [61222 61336])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61338 62583])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62585 63515])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63517 64441])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [64443 64878])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [64880 65307])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65309 65690])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65692 66143])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66145 66591])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66593 67542])
            ("kill-buffer-hook" variable nil nil [67603 67843])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67845 70814])
            ("create-file-buffer" function (:arguments ("filename")) nil [70939 71619])
            ("generate-new-buffer" function (:arguments ("name")) nil [71621 71826])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [71828 71980])
            ("make-obsolete-variable" code nil nil [71981 72058])
            ("abbreviated-home-dir" variable nil nil [72060 72167])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [72169 74520])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [74522 76449])
            ("find-file-wildcards" variable (:default-value t) nil [76452 76699])
            ("find-file-suppress-same-file-warnings" variable nil nil [76701 77027])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [77029 77308])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [77310 77797])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [77799 84785])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [84787 87281])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [87284 88236])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [88238 88935])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [88937 89358])
            ("put" code nil nil [89359 89437])
            ("find-file-literally" variable nil nil [89439 89646])
            ("put" code nil nil [89647 89692])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [89694 90788])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [90791 94131])
            ("report-errors" function (:arguments ("format" "body")) nil [94133 94613])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [94615 96224])
            ("auto-mode-case-fold" variable (:default-value t) nil [96226 96664])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [96666 108054])
            ("put" code nil nil [108055 108101])
            ("conf-mode-maybe" function nil nil [108103 108353])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [108355 109729])
            ("define-obsolete-variable-alias" code nil nil [109731 109844])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [110043 110903])
            ("define-obsolete-variable-alias" code nil nil [110905 111015])
            ("inhibit-local-variables-suffixes" variable nil nil [111017 111293])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [111365 111471])
            ("inhibit-local-variables-p" function nil nil [111473 112283])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [112285 112803])
            ("magic-mode-alist" variable nil nil [112805 113339])
            ("put" code nil nil [113340 113387])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [113389 114930])
            ("put" code nil nil [114931 114987])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [114989 115131])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [115133 121561])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [121814 122221])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [122223 122489])
            ("set-auto-mode-1" function nil nil [122491 123996])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [124034 124240])
            ("put" code nil nil [124241 124295])
            ("hack-local-variables-hook" variable nil nil [124297 124530])
            ("safe-local-variable-values" variable nil nil [124532 124792])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [124794 125456])
            ("mapc" code nil nil [125484 126101])
            ("dolist" code nil nil [126743 127431])
            ("put" code nil nil [127433 127547])
            ("put" code nil nil [127549 127595])
            ("file-local-variables-alist" variable nil nil [127597 127952])
            ("make-variable-buffer-local" code nil nil [127953 128009])
            ("put" code nil nil [128010 128062])
            ("dir-local-variables-alist" variable nil nil [128064 128446])
            ("make-variable-buffer-local" code nil nil [128447 128502])
            ("before-hack-local-variables-hook" variable nil nil [128504 128922])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [128924 131794])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [131796 131883])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [131885 134339])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [134341 136827])
            ("hack-local-variables--warned-lexical" variable nil nil [136888 136937])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [136939 142855])
            ("hack-local-variables-apply" function nil nil [142857 143658])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [143660 144348])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [144350 145253])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [145255 145359])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [145361 145549])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [145551 147371])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [147373 147750])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [147752 148665])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [148731 148846])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [148848 149424])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [149426 149559])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [149561 150206])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [150208 152219])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [152221 152985])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [152987 154450])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [154452 154634])
            ("dir-locals-find-file" function (:arguments ("file")) nil [154636 157700])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [157702 158545])
            ("enable-remote-dir-locals" variable nil nil [158547 158713])
            ("hack-dir-local-variables--warned-coding" variable nil nil [158715 158767])
            ("hack-dir-local-variables" function nil nil [158769 160427])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [160429 160735])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [160739 161176])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [161178 166155])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [166157 168182])
            ("file-extended-attributes" function (:arguments ("filename")) nil [168185 168499])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [168501 168930])
            ("backup-buffer" function nil nil [168933 172958])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [172960 174230])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [174232 174525])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [174527 175226])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [175228 177095])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [177097 177792])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [177794 178611])
            ("file-name-base" function (:arguments ("filename")) nil [178613 178857])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [178859 179607])
            ("backup-directory-alist" variable nil nil [179609 180646])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [180648 181940])
            ("make-backup-file-name" function (:arguments ("file")) nil [181942 182255])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [182257 183007])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [183009 185116])
            ("backup-file-name-p" function (:arguments ("file")) nil [185118 185379])
            ("backup-extract-version-start" variable nil nil [185381 185418])
            ("backup-extract-version" function (:arguments ("fn")) nil [185593 186045])
            ("find-backup-file-name" function (:arguments ("fn")) nil [186047 188186])
            ("file-nlinks" function (:arguments ("filename")) nil [188188 188305])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [190281 193182])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193185 195587])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [195589 196160])
            ("auto-save-hook" variable nil nil [196162 196234])
            ("before-save-hook" variable nil nil [196236 196406])
            ("after-save-hook" variable nil nil [196408 196599])
            ("save-buffer-coding-system" variable nil nil [196601 196973])
            ("make-variable-buffer-local" code nil nil [196975 197030])
            ("put" code nil nil [197031 197082])
            ("basic-save-buffer" function (:user-visible-flag t) nil [197084 201251])
            ("basic-save-buffer-1" function nil nil [201533 201836])
            ("basic-save-buffer-2" function nil nil [201925 206549])
            ("declare-function" code nil nil [206551 206637])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [206639 207805])
            ("put" code nil nil [207806 207867])
            ("buffer-save-without-query" variable nil nil [207869 207985])
            ("make-variable-buffer-local" code nil nil [207986 208041])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [208043 211501])
            ("clear-visited-file-modtime" function nil nil [211504 211695])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211697 212148])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [212150 212436])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [212438 212834])
            ("put" code nil nil [212835 212893])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [212895 213506])
            ("file-newest-backup" function (:arguments ("filename")) nil [213508 214431])
            ("rename-uniquely" function (:user-visible-flag t) nil [214433 215449])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [215451 217023])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [217025 217171])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [217173 219634])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [219636 220196])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [220198 221136])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [221138 224325])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [224373 224935])
            ("put" code nil nil [224939 224987])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [224988 225440])
            ("put" code nil nil [225442 225511])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [225512 225984])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [225986 226498])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [226500 227415])
            ("before-revert-hook" variable nil nil [227417 227620])
            ("after-revert-hook" variable nil nil [227622 227977])
            ("revert-buffer-in-progress-p" variable nil nil [227979 228093])
            ("revert-buffer-internal-hook" variable nil nil [228095 228131])
            ("revert-buffer-preserve-modes" variable nil nil [228321 228358])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [228360 230572])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [230574 233929])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [233931 236131])
            ("recover-this-file" function (:user-visible-flag t) nil [236133 236284])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [236286 238369])
            ("recover-session" function (:user-visible-flag t) nil [238371 239964])
            ("recover-session-finish" function (:user-visible-flag t) nil [239966 242369])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [242371 242622])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [242624 243227])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [243229 243757])
            ("rename-auto-save-file" function nil nil [243761 244325])
            ("make-auto-save-file-name" function nil nil [244327 248556])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [248558 248786])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [248789 250972])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [250975 251136])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [251138 251304])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [251306 253027])
            ("files" package nil nil [253101 253137])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [253139 254485])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [254487 256319])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [256322 256449])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [256451 256988])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [256990 257177])
            ("get-free-disk-space" function (:arguments ("dir")) nil [257179 258930])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [259002 261391])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [261393 261438])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [262512 272643])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [272645 273211])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [273213 273697])
            ("kill-emacs-query-functions" variable nil nil [273699 274005])
            ("confirm-kill-emacs" variable nil nil [274007 274447])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274449 276096])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [276098 276586])
            ("setq" code nil nil [276696 276817])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [277018 279651])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [279694 280161])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [280163 281012])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [281014 282168])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [282170 283237])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [283239 284304])
            ("define-obsolete-variable-alias" code nil nil [284306 284388])
            ("trash-directory" variable nil nil [284412 284815])
            ("trash--hexify-table" variable nil nil [284817 284845])
            ("declare-function" code nil nil [284847 284913])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [284915 290335])
            ("define-key" code nil nil [290339 290379])
            ("define-key" code nil nil [290380 290430])
            ("define-key" code nil nil [290431 290481])
            ("define-key" code nil nil [290482 290524])
            ("define-key" code nil nil [290525 290570])
            ("define-key" code nil nil [290571 290612])
            ("define-key" code nil nil [290613 290652])
            ("define-key" code nil nil [290653 290691])
            ("define-key" code nil nil [290692 290737])
            ("define-key" code nil nil [290738 290795])
            ("define-key" code nil nil [290796 290841])
            ("define-key" code nil nil [290843 290895])
            ("define-key" code nil nil [290896 290958])
            ("define-key" code nil nil [290959 291014])
            ("define-key" code nil nil [291015 291074])
            ("define-key" code nil nil [291075 291122])
            ("define-key" code nil nil [291124 291182])
            ("define-key" code nil nil [291183 291234])
            ("define-key" code nil nil [291235 291289])
            ("define-key" code nil nil [291290 291351])
            ("define-key" code nil nil [291352 291411]))          
      :file "files.el"
      :pointmax 291436
      :fsize 291435
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "subr.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1111 2631])
            ("defalias" code nil nil [2660 2681])
            ("noreturn" function (:arguments ("form")) nil [2683 2887])
            ("1value" function (:arguments ("form")) nil [2889 3127])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3129 3589])
            ("lambda" function (:arguments ("cdr")) nil [3591 4749])
            ("setq-local" function (:arguments ("var" "val")) nil [4751 4963])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4965 5406])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5408 5823])
            ("push" function (:arguments ("newelt" "place")) nil [5825 6419])
            ("pop" function (:arguments ("place")) nil [6421 7232])
            ("when" function (:arguments ("cond" "body")) nil [7234 7522])
            ("unless" function (:arguments ("cond" "body")) nil [7524 7810])
            ("dolist" function (:arguments ("spec" "body")) nil [7812 9091])
            ("dotimes" function (:arguments ("spec" "body")) nil [9093 10558])
            ("declare" function (:arguments ("_specs")) nil [10560 11075])
            ("ignore-errors" function (:arguments ("body")) nil [11077 11384])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11415 11563])
            ("error" function (:arguments ("args")) nil [11620 12006])
            ("user-error" function (:arguments ("format" "args")) nil [12008 12534])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12536 13448])
            ("frame-configuration-p" function (:arguments ("object")) nil [13562 13817])
            ("caar" function (:arguments ("x")) nil [13842 13913])
            ("cadr" function (:arguments ("x")) nil [13915 13986])
            ("cdar" function (:arguments ("x")) nil [13988 14059])
            ("cddr" function (:arguments ("x")) nil [14061 14132])
            ("last" function (:arguments ("list" "n")) nil [14134 14551])
            ("butlast" function (:arguments ("list" "n")) nil [14553 14781])
            ("nbutlast" function (:arguments ("list" "n")) nil [14783 15060])
            ("delete-dups" function (:arguments ("list")) nil [15062 15415])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [15492 15960])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [15962 17779])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [17781 18530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [18570 19370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [19372 19694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [19696 19964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [19966 20401])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [20403 20887])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [20889 21382])
            ("remove" function (:arguments ("elt" "seq")) nil [21384 21737])
            ("remq" function (:arguments ("elt" "list")) nil [21739 22070])
            ("kbd" function (:arguments ("keys")) nil [22095 22405])
            ("put" code nil nil [22406 22424])
            ("undefined" function (:user-visible-flag t) nil [22426 22881])
            ("put" code nil nil [22976 23011])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [23013 23577])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [23579 24231])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [24233 26294])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [26296 26976])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [26978 27448])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [27502 28102])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [28104 28570])
            ("keymap-canonicalize" function (:arguments ("map")) nil [28572 30441])
            ("put" code nil nil [30443 30500])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [30502 30877])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30908 31654])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [31656 32460])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32462 32658])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32660 32889])
            ("key-substitution-in-progress" variable nil nil [32945 33038])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [33040 34424])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [34426 36091])
            ("global-map" variable nil nil [36240 36414])
            ("esc-map" variable nil nil [36416 36556])
            ("ctl-x-map" variable nil nil [36558 36693])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [36695 36773])
            ("defalias" code nil nil [36774 36812])
            ("define-key" code nil nil [36813 36855])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [36857 36929])
            ("defalias" code nil nil [36930 36968])
            ("define-key" code nil nil [36969 37011])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [37051 37106])
            ("listify-key-sequence" function (:arguments ("key")) nil [37108 37346])
            ("eventp" function (:arguments ("obj")) nil [37348 37549])
            ("event-modifiers" function (:arguments ("event")) nil [37551 38845])
            ("event-basic-type" function (:arguments ("event")) nil [38847 39615])
            ("mouse-movement-p" function (:arguments ("object")) nil [39617 39750])
            ("mouse-event-p" function (:arguments ("object")) nil [39752 39970])
            ("event-start" function (:arguments ("event")) nil [39972 41132])
            ("event-end" function (:arguments ("event")) nil [41134 41452])
            ("event-click-count" function (:arguments ("event")) nil [41454 41664])
            ("posnp" function (:arguments ("obj")) nil [41721 42303])
            ("posn-window" function (:arguments ("position")) nil [42337 42519])
            ("posn-area" function (:arguments ("position")) nil [42521 42845])
            ("posn-point" function (:arguments ("position")) nil [42847 43313])
            ("posn-set-point" function (:arguments ("position")) nil [43315 43635])
            ("posn-x-y" function (:arguments ("position")) nil [43637 43890])
            ("declare-function" code nil nil [43892 43958])
            ("posn-col-row" function (:arguments ("position")) nil [43960 45778])
            ("posn-actual-col-row" function (:arguments ("position")) nil [45780 46370])
            ("posn-timestamp" function (:arguments ("position")) nil [46372 46560])
            ("posn-string" function (:arguments ("position")) nil [46562 46921])
            ("posn-image" function (:arguments ("position")) nil [46923 47163])
            ("posn-object" function (:arguments ("position")) nil [47165 47534])
            ("posn-object-x-y" function (:arguments ("position")) nil [47536 47823])
            ("posn-object-width-height" function (:arguments ("position")) nil [47825 48085])
            ("define-obsolete-function-alias" code nil nil [48128 48193])
            ("define-obsolete-function-alias" code nil nil [48194 48267])
            ("define-obsolete-function-alias" code nil nil [48268 48332])
            ("define-obsolete-function-alias" code nil nil [48333 48404])
            ("define-obsolete-function-alias" code nil nil [48405 48478])
            ("define-obsolete-function-alias" code nil nil [48479 48551])
            ("make-obsolete" code nil nil [48553 48619])
            ("make-obsolete" code nil nil [48620 48669])
            ("insert-string" function (:arguments ("args")) nil [48671 48989])
            ("makehash" function (:arguments ("test")) nil [48991 49111])
            ("log10" function (:arguments ("x")) nil [49113 49222])
            ("defalias" code nil nil [49270 49304])
            ("make-obsolete" code nil nil [49305 49359])
            ("defalias" code nil nil [49360 49396])
            ("make-obsolete" code nil nil [49397 49453])
            ("make-obsolete" code nil nil [49454 49561])
            ("set-advertised-calling-convention" code nil nil [49562 49663])
            ("set-advertised-calling-convention" code nil nil [49664 49732])
            ("set-advertised-calling-convention" code nil nil [49733 49818])
            ("set-advertised-calling-convention" code nil nil [49819 49888])
            ("set-advertised-calling-convention" code nil nil [49889 49958])
            ("make-obsolete-variable" code nil nil [50363 50438])
            ("make-obsolete-variable" code nil nil [50439 50518])
            ("make-obsolete-variable" code nil nil [50519 50586])
            ("make-obsolete-variable" code nil nil [50587 50652])
            ("make-obsolete-variable" code nil nil [50653 50714])
            ("make-obsolete-variable" code nil nil [50715 50786])
            ("make-obsolete-variable" code nil nil [50787 50852])
            ("make-obsolete-variable" code nil nil [50853 50914])
            ("make-obsolete-variable" code nil nil [50915 50990])
            ("make-obsolete-variable" code nil nil [50991 51068])
            ("make-obsolete-variable" code nil nil [51069 51148])
            ("make-obsolete-variable" code nil nil [51149 51226])
            ("make-obsolete-variable" code nil nil [51227 51306])
            ("make-obsolete-variable" code nil nil [51307 51396])
            ("make-obsolete-variable" code nil nil [51397 51472])
            ("make-obsolete-variable" code nil nil [51473 51554])
            ("make-obsolete-variable" code nil nil [51555 51638])
            ("make-obsolete-variable" code nil nil [51639 51734])
            ("make-obsolete-variable" code nil nil [51735 51822])
            ("make-obsolete-variable" code nil nil [51823 51904])
            ("make-obsolete-variable" code nil nil [51905 51992])
            ("make-obsolete-variable" code nil nil [51993 52084])
            ("make-obsolete-variable" code nil nil [52085 52150])
            ("make-obsolete-variable" code nil nil [52151 52216])
            ("make-obsolete-variable" code nil nil [52217 52320])
            ("make-obsolete-variable" code nil nil [52321 52414])
            ("make-obsolete-variable" code nil nil [52415 52478])
            ("make-obsolete-variable" code nil nil [52479 52619])
            ("make-obsolete-variable" code nil nil [52621 52685])
            ("make-obsolete-variable" code nil nil [52686 52769])
            ("make-obsolete-variable" code nil nil [52770 52842])
            ("make-obsolete-variable" code nil nil [52843 52919])
            ("make-obsolete-variable" code nil nil [52920 52977])
            ("make-obsolete" code nil nil [52978 53034])
            ("make-obsolete" code nil nil [53035 53095])
            ("make-obsolete" code nil nil [53097 53151])
            ("make-obsolete" code nil nil [53152 53208])
            ("define-obsolete-variable-alias" code nil nil [53247 53334])
            ("define-obsolete-variable-alias" code nil nil [53336 53429])
            ("define-obsolete-variable-alias" code nil nil [53430 53523])
            ("make-obsolete-variable" code nil nil [53769 53833])
            ("defvaralias" code nil nil [53835 53892])
            ("defalias" code nil nil [53965 54009])
            ("defalias" code nil nil [54010 54054])
            ("defalias" code nil nil [54055 54088])
            ("defalias" code nil nil [54089 54122])
            ("defalias" code nil nil [54123 54158])
            ("defalias" code nil nil [54159 54185])
            ("defalias" code nil nil [54186 54212])
            ("defalias" code nil nil [54213 54235])
            ("defalias" code nil nil [54261 54300])
            ("defalias" code nil nil [54301 54355])
            ("defalias" code nil nil [54356 54426])
            ("defalias" code nil nil [54427 54499])
            ("defalias" code nil nil [54500 54543])
            ("defalias" code nil nil [54544 54588])
            ("defalias" code nil nil [54589 54622])
            ("defalias" code nil nil [54623 54656])
            ("defalias" code nil nil [54688 54731])
            ("defalias" code nil nil [54732 54781])
            ("defalias" code nil nil [54783 54836])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [54875 57004])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [57006 58674])
            ("letrec" function (:arguments ("binders" "body")) nil [58676 59305])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [59307 62360])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [62362 65709])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [65712 67031])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [67033 68245])
            ("delay-mode-hooks" variable nil nil [68267 68361])
            ("delayed-mode-hooks" variable nil nil [68362 68443])
            ("make-variable-buffer-local" code nil nil [68444 68492])
            ("put" code nil nil [68493 68535])
            ("change-major-mode-after-body-hook" variable nil nil [68537 68651])
            ("after-change-major-mode-hook" variable nil nil [68653 68755])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [68757 69640])
            ("delay-mode-hooks" function (:arguments ("body")) nil [69642 70043])
            ("derived-mode-p" function (:arguments ("modes")) nil [70104 70417])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [70608 70801])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [70803 73488])
            ("autoloadp" function (:arguments ("object")) nil [73510 73612])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [74096 75303])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [75305 76711])
            ("process-lines" function (:arguments ("program" "args")) nil [76736 77341])
            ("process-live-p" function (:arguments ("process")) nil [77343 77656])
            ("make-obsolete" code nil nil [77676 77801])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [77802 78146])
            ("process-kill-buffer-query-function" function nil nil [78148 78567])
            ("add-hook" code nil nil [78569 78644])
            ("process-get" function (:arguments ("process" "propname")) nil [78675 78887])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [78889 79128])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [79168 79218])
            ("read-key-delay" variable (:default-value 0.01) nil [79220 79248])
            ("read-key" function (:arguments ("prompt")) nil [79297 82003])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [82005 82342])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [82344 85116])
            ("read-number" function (:arguments ("prompt" "default")) nil [85118 86188])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [86190 87929])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [87931 90275])
            ("declare-function" code nil nil [90315 90394])
            ("y-or-n-p" function (:arguments ("prompt")) nil [90396 93874])
            ("atomic-change-group" function (:arguments ("body")) nil [93905 95111])
            ("prepare-change-group" function (:arguments ("buffer")) nil [95113 96589])
            ("activate-change-group" function (:arguments ("handle")) nil [96591 96829])
            ("accept-change-group" function (:arguments ("handle")) nil [96831 97122])
            ("cancel-change-group" function (:arguments ("handle")) nil [97124 98295])
            ("define-obsolete-function-alias" code nil nil [98353 98435])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [98437 99937])
            ("copy-overlay" function (:arguments ("o")) nil [99966 100540])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [100542 101550])
            ("suspend-hook" variable nil nil [101572 101656])
            ("suspend-resume-hook" variable nil nil [101658 101756])
            ("temp-buffer-show-hook" variable nil nil [101758 101974])
            ("temp-buffer-setup-hook" variable nil nil [101976 102207])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [102209 102584])
            ("buffer-narrowed-p" function nil nil [102617 102751])
            ("find-tag-default-bounds" function nil nil [102753 103756])
            ("find-tag-default" function nil nil [103758 104024])
            ("find-tag-default-as-regexp" function nil nil [104026 104461])
            ("find-tag-default-as-symbol-regexp" function nil nil [104463 105022])
            ("play-sound" function (:arguments ("sound")) nil [105024 105843])
            ("declare-function" code nil nil [105845 105901])
            ("shell-quote-argument" function (:arguments ("argument")) nil [105903 108048])
            ("string-or-null-p" function (:arguments ("object")) nil [108050 108187])
            ("booleanp" function (:arguments ("object")) nil [108189 108347])
            ("special-form-p" function (:arguments ("object")) nil [108349 108594])
            ("macrop" function (:arguments ("object")) nil [108596 108828])
            ("field-at-pos" function (:arguments ("pos")) nil [108830 109100])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [109102 109465])
            ("defalias" code nil nil [109467 109820])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [109822 110632])
            ("yank-handled-properties" variable nil nil [110739 110771])
            ("yank-excluded-properties" variable nil nil [110772 110805])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [110807 111596])
            ("yank-undo-function" variable nil nil [111598 111625])
            ("insert-for-yank" function (:arguments ("string")) nil [111627 111986])
            ("insert-for-yank-1" function (:arguments ("string")) nil [111988 114338])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [114340 114825])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [114827 115513])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [115515 115827])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [115966 116404])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [116442 117426])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [117428 117920])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [117922 119563])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [119565 120114])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [120169 120557])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [120559 121079])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [121081 121641])
            ("with-selected-window" function (:arguments ("window" "body")) nil [121643 122781])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [122783 123524])
            ("save-window-excursion" function (:arguments ("body")) nil [123526 124345])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [124347 125742])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [125795 128248])
            ("with-temp-file" function (:arguments ("file" "body")) nil [128250 128945])
            ("with-temp-message" function (:arguments ("message" "body")) nil [128947 129874])
            ("with-temp-buffer" function (:arguments ("body")) nil [129876 130435])
            ("with-silent-modifications" function (:arguments ("body")) nil [130437 131635])
            ("with-output-to-string" function (:arguments ("body")) nil [131637 132082])
            ("with-local-quit" function (:arguments ("body")) nil [132084 132839])
            ("while-no-input" function (:arguments ("body")) nil [132841 133341])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [133343 133896])
            ("define-obsolete-function-alias" code nil nil [133898 133993])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [133995 134932])
            ("combine-after-change-calls" function (:arguments ("body")) nil [134934 135629])
            ("with-case-table" function (:arguments ("table" "body")) nil [135631 136152])
            ("save-match-data-internal" variable nil nil [136185 136218])
            ("save-match-data" function (:arguments ("body")) nil [136476 137156])
            ("match-string" function (:arguments ("num" "string")) nil [137158 137803])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [137805 138529])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [138532 139181])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [139184 140369])
            ("looking-at-p" function (:arguments ("regexp")) nil [140371 140549])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [140551 140771])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [140773 142683])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [142705 143058])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [143320 146436])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [146438 146999])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [147001 147637])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [147671 148075])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [148077 150656])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [150659 150958])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [150960 151369])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [151371 152154])
            ("load-history-regexp" function (:arguments ("file")) nil [152194 152830])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [152832 153268])
            ("put" code nil nil [153270 153316])
            ("eval-after-load" function (:arguments ("file" "form")) nil [153317 157198])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [157200 157480])
            ("after-load-functions" variable nil nil [157482 157655])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [157657 159196])
            ("eval-next-after-load" function (:arguments ("file")) nil [159198 159498])
            ("display-delayed-warnings" function nil nil [159502 159769])
            ("collapse-delayed-warnings" function nil nil [159771 160450])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [160580 160920])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [160922 161177])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [161206 161549])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [161551 161775])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [161799 162435])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [162437 162757])
            ("syntax-after" function (:arguments ("pos")) nil [162759 163132])
            ("syntax-class" function (:arguments ("syntax")) nil [163134 163486])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163533 164116])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164131 164680])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164701 165183])
            ("text-clone--maintaining" variable nil nil [165205 165241])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [165243 167309])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [167311 169559])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [169667 171245])
            ("called-interactively-p-functions" variable nil nil [171248 171665])
            ("internal--call-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote call-interactively)))
                nil [171667 171744])
            ("called-interactively-p" function (:arguments ("kind")) nil [171746 175843])
            ("interactive-p" function nil nil [175845 176855])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [176857 177202])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [177204 177512])
            ("define-obsolete-function-alias" code nil nil [177514 177601])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [177603 179906])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [180489 181256])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [181258 183103])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [183105 183604])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [183606 183723])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [183725 185431])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [185433 185588])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [185590 186694])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [186731 186890])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?snapshot$" . -4) ("^[-_+]$" . -4) ("^[-_+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-_+ ]?alpha$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [186893 188388])
            ("version-to-list" function (:arguments ("ver")) nil [188391 190795])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [190798 191629])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [191632 192431])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [192434 193219])
            ("version-list-not-zero" function (:arguments ("lst")) nil [193221 193531])
            ("version<" function (:arguments ("v1" "v2")) nil [193534 194038])
            ("version<=" function (:arguments ("v1" "v2")) nil [194040 194558])
            ("version=" function (:arguments ("v1" "v2")) nil [194560 195054])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [195068 195130])
            ("when" code nil nil [195292 195417])
            ("unmsys--file-name" function (:arguments ("file")) nil [195550 196037]))          
      :file "subr.el"
      :pointmax 196062
      :fsize 196062
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "term.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("term-protocol-version" variable
               (:constant-flag t
                :default-value "0.96")
                nil [14571 14610])
            ("ange-ftp" include nil nil [14631 14650])
            ("ring" include nil nil [14652 14667])
            ("ehelp" include nil nil [14668 14684])
            ("declare-function" code nil nil [14686 14731])
            ("declare-function" code nil nil [14732 14779])
            ("declare-function" code nil nil [14780 14842])
            ("declare-function" code nil nil [14843 14887])
            ("declare-function" code nil nil [14888 14937])
            ("term" customgroup (:user-visible-flag t) nil [14939 15023])
            ("term-input-ring-size" variable (:default-value 32) nil [15504 15566])
            ("term-height" variable nil nil [16301 16321])
            ("term-width" variable nil nil [16370 16389])
            ("term-home-marker" variable nil nil [16441 16466])
            ("term-saved-home-marker" variable nil nil [16518 16648])
            ("term-start-line-column" variable nil nil [16649 16747])
            ("term-current-column" variable nil nil [16748 16823])
            ("term-current-row" variable nil nil [16824 16921])
            ("term-insert-mode" variable nil nil [16922 16951])
            ("term-vertical-motion" variable nil nil [16952 16981])
            ("term-terminal-state" variable nil nil [16982 17381])
            ("term-kill-echo-list" variable nil nil [17382 17468])
            ("term-terminal-parameter" variable nil nil [17469 17501])
            ("term-terminal-previous-parameter" variable nil nil [17502 17543])
            ("term-current-face" variable (:default-value (quote term)) nil [17544 17576])
            ("term-scroll-start" variable nil nil [17577 17654])
            ("term-scroll-end" variable nil nil [17655 17679])
            ("term-pager-count" variable nil nil [17734 17835])
            ("term-saved-cursor" variable nil nil [17836 17866])
            ("term-command-hook" variable nil nil [17867 17893])
            ("term-log-buffer" variable nil nil [17894 17922])
            ("term-scroll-with-delete" variable nil nil [17923 18204])
            ("term-pending-delete-marker" variable nil nil [18205 18240])
            ("term-old-mode-map" variable nil nil [18412 18484])
            ("term-old-mode-line-format" variable nil nil [18485 18519])
            ("term-pager-old-local-map" variable nil nil [18563 18633])
            ("term-pager-old-filter" variable nil nil [18634 18664])
            ("explicit-shell-file-name" variable nil nil [18703 18870])
            ("term-prompt-regexp" variable (:default-value "^") nil [18872 19309])
            ("term-delimiter-argument-list" variable nil nil [19311 19740])
            ("term-input-autoexpand" variable nil nil [19742 20260])
            ("term-input-ignoredups" variable nil nil [20262 20476])
            ("term-input-ring-file-name" variable nil nil [20478 20748])
            ("term-scroll-to-bottom-on-output" variable nil nil [20750 21183])
            ("term-scroll-show-maximum-output" variable nil nil [21185 21475])
            ("term-suppress-hard-newline" variable nil nil [21477 21709])
            ("term-pending-frame" variable nil nil [21880 21911])
            ("term-get-old-input" variable (:default-value (function term-get-old-input-default)) nil [21953 22333])
            ("term-dynamic-complete-functions" variable (:default-value (quote (term-replace-by-expanded-history term-dynamic-complete-filename))) nil [22335 22635])
            ("term-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [22637 22923])
            ("term-input-filter-functions" variable (:default-value (quote nil)) nil [22925 23128])
            ("term-input-sender" variable (:default-value (function term-simple-send)) nil [23130 23482])
            ("term-eol-on-send" variable (:default-value t) nil [23484 23635])
            ("term-mode-hook" variable (:default-value (quote nil)) nil [23637 23780])
            ("term-exec-hook" variable (:default-value (quote nil)) nil [23782 24162])
            ("term-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote term-previous-input)) (define-key map "n" (quote term-next-input)) (define-key map "r" (quote term-previous-matching-input)) (define-key map "s" (quote term-next-matching-input)) (unless (featurep (quote xemacs)) (define-key map [138412146] (quote term-previous-matching-input-from-input)) (define-key map [138412147] (quote term-next-matching-input-from-input))) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-send-input)) (define-key map "" (quote term-delchar-or-maybe-eof)) (define-key map "" (quote term-bol)) (define-key map "" (quote term-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote term-interrupt-subjob)) (define-key map "" (quote term-stop-subjob)) (define-key map "" (quote term-quit-subjob)) (define-key map "" (quote term-copy-old-input)) (define-key map "" (quote term-kill-output)) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-show-maximum-output)) (define-key map "" (quote term-dynamic-list-input-ring)) (define-key map "" (quote term-next-prompt)) (define-key map "" (quote term-previous-prompt)) (define-key map "" (quote term-send-eof)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map "" (quote term-pager-toggle)) (easy-menu-define nil map "Complete menu for Term mode." (quote ("Complete" ["Complete Before Point" term-dynamic-complete t] ["Complete File Name" term-dynamic-complete-filename t] ["File Completion Listing" term-dynamic-list-filename-completions t] ["Expand File Name" term-replace-by-expanded-filename t]))) (easy-menu-define nil map "In/Out menu for Term mode." (quote ("In/Out" ["Expand History Before Point" term-replace-by-expanded-history term-input-autoexpand] ["List Input History" term-dynamic-list-input-ring t] ["Previous Input" term-previous-input t] ["Next Input" term-next-input t] ["Previous Matching Current Input" term-previous-matching-input-from-input t] ["Next Matching Current Input" term-next-matching-input-from-input t] ["Previous Matching Input..." term-previous-matching-input t] ["Next Matching Input..." term-next-matching-input t] ["Backward Matching Input..." term-backward-matching-input t] ["Forward Matching Input..." term-forward-matching-input t] ["Copy Old Input" term-copy-old-input t] ["Kill Current Input" term-kill-input t] ["Show Current Output Group" term-show-output t] ["Show Maximum Output" term-show-maximum-output t] ["Backward Output Group" term-previous-prompt t] ["Forward Output Group" term-next-prompt t] ["Kill Current Output Group" term-kill-output t]))) map)) nil [24164 27235])
            ("term-escape-char" variable nil nil [27237 27382])
            ("term-pager-break-map" variable (:default-value (let ((map (make-keymap))) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map " " (quote term-pager-page)) (define-key map "" (quote term-pager-line)) (define-key map "?" (quote term-pager-help)) (define-key map "h" (quote term-pager-help)) (define-key map "b" (quote term-pager-back-page)) (define-key map "" (quote term-pager-back-line)) (define-key map "q" (quote term-pager-discard)) (define-key map "D" (quote term-pager-disable)) (define-key map "<" (quote term-pager-bob)) (define-key map ">" (quote term-pager-eob)) map)) nil [27384 28212])
            ("term-ptyp" variable (:default-value t) nil [28214 28360])
            ("term-last-input-match" variable nil nil [28362 28493])
            ("term-input-ring" variable nil nil [28495 28523])
            ("term-last-input-start" variable nil nil [28524 28554])
            ("term-last-input-end" variable nil nil [28555 28583])
            ("term-input-ring-index" variable nil nil [28584 28661])
            ("term-matching-input-from-input-string" variable nil nil [28662 28761])
            ("term-pager-filter" variable (:default-value t) nil [28876 28904])
            ("put" code nil nil [28906 28947])
            ("put" code nil nil [28948 28995])
            ("put" code nil nil [28996 29043])
            ("put" code nil nil [29044 29097])
            ("put" code nil nil [29098 29155])
            ("put" code nil nil [29156 29213])
            ("put" code nil nil [29214 29249])
            ("term-in-char-mode" function nil nil [29251 29321])
            ("term-in-line-mode" function nil nil [29322 29380])
            ("term-pager-enabled" function nil nil [29424 29474])
            ("term-handling-pager" function nil nil [29475 29534])
            ("term-using-alternate-sub-buffer" function nil nil [29535 29604])
            ("term-ansi-at-host" variable nil nil [29645 29675])
            ("term-ansi-at-dir" variable nil nil [29676 29705])
            ("term-ansi-at-user" variable nil nil [29706 29736])
            ("term-ansi-at-message" variable nil nil [29737 29770])
            ("term-ansi-at-save-user" variable nil nil [29771 29806])
            ("term-ansi-at-save-pwd" variable nil nil [29807 29841])
            ("term-ansi-at-save-anon" variable nil nil [29842 29877])
            ("term-ansi-current-bold" variable nil nil [29878 29913])
            ("term-ansi-current-color" variable nil nil [29914 29948])
            ("term-ansi-face-already-done" variable nil nil [29949 29989])
            ("term-ansi-current-bg-color" variable nil nil [29990 30027])
            ("term-ansi-current-underline" variable nil nil [30028 30068])
            ("term-ansi-current-reverse" variable nil nil [30069 30107])
            ("term-ansi-current-invisible" variable nil nil [30108 30148])
            ("term-terminal-more-parameters" variable nil nil [30208 30248])
            ("term-terminal-previous-parameter-2" variable (:default-value -1) nil [30249 30295])
            ("term-terminal-previous-parameter-3" variable (:default-value -1) nil [30296 30342])
            ("term-terminal-previous-parameter-4" variable (:default-value -1) nil [30343 30389])
            ("ansi-term-color-vector" variable (:default-value [term term-color-black term-color-red term-color-green term-color-yellow term-color-blue term-color-magenta term-color-cyan term-color-white]) nil [30401 30600])
            ("term-default-fg-color" variable nil nil [30602 30765])
            ("make-obsolete-variable" code nil nil [30766 30875])
            ("term-default-bg-color" variable nil nil [30877 31040])
            ("make-obsolete-variable" code nil nil [31041 31150])
            ("term" variable
               (:default-value (\` ((t :foreground (\, term-default-fg-color) :background (\, term-default-bg-color) :inherit default)))
                :type "face")
                nil [31152 31330])
            ("term-bold" variable
               (:default-value (quote ((t :bold t)))
                :type "face")
                nil [31332 31422])
            ("term-underline" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [31424 31530])
            ("term-color-black" variable
               (:default-value (quote ((t :foreground "black" :background "black")))
                :type "face")
                nil [31532 31664])
            ("term-color-red" variable
               (:default-value (quote ((t :foreground "red3" :background "red3")))
                :type "face")
                nil [31666 31792])
            ("term-color-green" variable
               (:default-value (quote ((t :foreground "green3" :background "green3")))
                :type "face")
                nil [31794 31928])
            ("term-color-yellow" variable
               (:default-value (quote ((t :foreground "yellow3" :background "yellow3")))
                :type "face")
                nil [31930 32068])
            ("term-color-blue" variable
               (:default-value (quote ((t :foreground "blue2" :background "blue2")))
                :type "face")
                nil [32070 32200])
            ("term-color-magenta" variable
               (:default-value (quote ((t :foreground "magenta3" :background "magenta3")))
                :type "face")
                nil [32202 32344])
            ("term-color-cyan" variable
               (:default-value (quote ((t :foreground "cyan3" :background "cyan3")))
                :type "face")
                nil [32346 32476])
            ("term-color-white" variable
               (:default-value (quote ((t :foreground "white" :background "white")))
                :type "face")
                nil [32478 32610])
            ("term-buffer-maximum-size" variable (:default-value 2048) nil [32651 32941])
            ("term-raw-map" variable (:default-value (let* ((map (make-keymap)) (esc-map (make-keymap)) (i 0)) (while (< i 128) (define-key map (make-string 1 i) (quote term-send-raw)) (unless (or (eq i 79) (eq i 91)) (define-key esc-map (make-string 1 i) (quote term-send-raw-meta))) (setq i (1+ i))) (define-key map [remap self-insert-command] (quote term-send-raw)) (define-key map "" esc-map) (if (featurep (quote xemacs)) (define-key map [button2] (quote term-mouse-paste)) (define-key map [mouse-2] (quote term-mouse-paste))) (define-key map [up] (quote term-send-up)) (define-key map [down] (quote term-send-down)) (define-key map [right] (quote term-send-right)) (define-key map [left] (quote term-send-left)) (define-key map [delete] (quote term-send-del)) (define-key map [deletechar] (quote term-send-del)) (define-key map [backspace] (quote term-send-backspace)) (define-key map [home] (quote term-send-home)) (define-key map [end] (quote term-send-end)) (define-key map [insert] (quote term-send-insert)) (define-key map [S-prior] (quote scroll-down)) (define-key map [S-next] (quote scroll-up)) (define-key map [S-insert] (quote term-paste)) (define-key map [prior] (quote term-send-prior)) (define-key map [next] (quote term-send-next)) map)) nil [32974 34390])
            ("easy-menu-define" code nil nil [34392 34886])
            ("easy-menu-define" code nil nil [34888 35573])
            ("easy-menu-define" code nil nil [35575 36067])
            ("term-raw-escape-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map (quote Control-X-prefix)) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (quote term-pager-toggle)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map [134217848] (quote execute-extended-command)) map)) nil [36069 36706])
            ("term-set-escape-char" function (:arguments ("key")) nil [36708 37236])
            ("term-set-escape-char" code nil nil [37238 37288])
            ("overflow-newline-into-fringe" variable nil nil [37290 37327])
            ("term-window-width" function nil nil [37329 37711])
            ("put" code nil nil [37715 37752])
            ("term-display-table" variable (:default-value (let ((dt (or (copy-sequence standard-display-table) (make-display-table))) i) (setq i 0) (while (< i 10) (aset dt i (vector i)) (setq i (1+ i))) (setq i 11) (while (< i 32) (aset dt i (vector i)) (setq i (1+ i))) (setq i 128) (while (< i 256) (aset dt i (vector i)) (setq i (1+ i))) dt)) nil [37812 38250])
            ("term-ansi-reset" function nil nil [38252 38767])
            ("define-derived-mode" code nil nil [38769 45009])
            ("term-reset-size" function (:arguments ("height" "width")) nil [45012 45239])
            ("term-check-kill-echo-list" function nil nil [45674 46300])
            ("term-check-size" function (:arguments ("process")) nil [46302 46552])
            ("term-send-raw-string" function (:arguments ("chars")) nil [46554 47000])
            ("term-send-raw" function (:user-visible-flag t) nil [47002 47238])
            ("term-send-raw-meta" function nil nil [47240 47833])
            ("term-mouse-paste" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [47835 48676])
            ("term-paste" function (:user-visible-flag t) nil [48678 48811])
            ("term-send-up" function nil nil [49086 49156])
            ("term-send-down" function nil nil [49157 49227])
            ("term-send-right" function nil nil [49228 49298])
            ("term-send-left" function nil nil [49299 49369])
            ("term-send-home" function nil nil [49370 49441])
            ("term-send-insert" function nil nil [49442 49513])
            ("term-send-end" function nil nil [49514 49585])
            ("term-send-prior" function nil nil [49586 49657])
            ("term-send-next" function nil nil [49658 49729])
            ("term-send-del" function nil nil [49730 49801])
            ("term-send-backspace" function nil nil [49802 49877])
            ("term-char-mode" function (:user-visible-flag t) nil [49880 50782])
            ("term-line-mode" function (:user-visible-flag t) nil [50784 51114])
            ("term-update-mode-line" function nil nil [51116 53474])
            ("term-check-proc" function (:arguments ("buffer")) nil [53476 53756])
            ("make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [53773 54576])
            ("term" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [54593 55112])
            ("term-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [55114 56504])
            ("term-sentinel" function (:arguments ("proc" "msg")) nil [56506 57269])
            ("term-handle-exit" function (:arguments ("process-name" "msg")) nil [57271 57741])
            ("term-term-name" variable (:default-value "eterm-color") nil [57744 57879])
            ("term-termcap-format" variable (:default-value "%s%s:li#%d:co#%d:cl=\\E[H\\E[J:cd=\\E[J:bs:am:xn:cm=\\E[%%i%%d;%%dH:nd=\\E[C:up=\\E[A:ce=\\E[K:ho=\\E[H:pt:al=\\E[L:dl=\\E[M:DL=\\E[%%dM:AL=\\E[%%dL:cs=\\E[%%i%%d;%%dr:sf=^J:dc=\\E[P:DC=\\E[%%dP:IC=\\E[%%d@:im=\\E[4h:ei=\\E[4l:mi::so=\\E[7m:se=\\E[m:us=\\E[4m:ue=\\E[m:md=\\E[1m:mr=\\E[7m:me=\\E[m:UP=\\E[%%dA:DO=\\E[%%dB:LE=\\E[%%dD:RI=\\E[%%dC:kl=\\EOD:kd=\\EOB:kr=\\EOC:ku=\\EOA:kN=\\E[6~:kP=\\E[5~:@7=\\E[4~:kh=\\E[1~:mk=\\E[8m:cb=\\E[1K:op=\\E[39;49m:Co#8:pa#64:AB=\\E[4%%dm:AF=\\E[3%%dm:cr=^M:bl=^G:do=^J:le=^H:ta=^I:se=\\E[27m:ue=\\E24m:kb=^?:kD=^[[3~:sc=\\E7:rc=\\E8:r1=\\Ec:") nil [57970 58718])
            ("term-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [58819 60429])
            ("term-read-input-ring" function (:arguments ("silent")) nil [61529 63446])
            ("term-write-input-ring" function nil nil [63448 64631])
            ("term-dynamic-list-input-ring" function (:user-visible-flag t) nil [64634 65678])
            ("term-regexp-arg" function (:arguments ("prompt")) nil [65681 66130])
            ("term-search-arg" function (:arguments ("arg")) nil [66132 66534])
            ("term-search-start" function (:arguments ("arg")) nil [66536 67003])
            ("term-previous-input-string" function (:arguments ("arg")) nil [67037 67322])
            ("term-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [67324 67462])
            ("term-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [67464 67588])
            ("term-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [67590 67881])
            ("term-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [67883 69073])
            ("term-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69075 69865])
            ("term-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69867 70254])
            ("term-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [70256 70992])
            ("term-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [70994 71358])
            ("term-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [71361 72587])
            ("term-replace-by-expanded-history-before-point" function (:arguments ("silent")) nil [72590 76217])
            ("term-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76220 76481])
            ("term-within-quotes" function (:arguments ("beg" "end")) nil [76484 76805])
            ("term-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [76807 77070])
            ("term-args" function (:arguments ("string" "begin" "end")) nil [77072 77841])
            ("term-delim-arg" function (:arguments ("arg")) nil [77979 78517])
            ("term-arguments" function (:arguments ("string" "nth" "mth")) nil [78519 80011])
            ("term-send-input" function (:user-visible-flag t) nil [80062 84287])
            ("term-get-old-input-default" function nil nil [84289 84596])
            ("term-copy-old-input" function (:user-visible-flag t) nil [84598 84982])
            ("term-skip-prompt" function nil nil [84984 85290])
            ("term-after-pmark-p" function nil nil [85293 85763])
            ("term-simple-send" function (:arguments ("proc" "string")) nil [85765 86014])
            ("term-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86016 86412])
            ("term-read-noecho" function (:arguments ("prompt" "stars")) nil [86607 88610])
            ("term-send-invisible" function
               (:user-visible-flag t
                :arguments ("str" "proc"))
                nil [88612 89336])
            ("term-input-chunk-size" variable (:default-value 512) nil [89377 89591])
            ("term-send-string" function (:arguments ("proc" "str")) nil [89593 90254])
            ("term-send-region" function (:arguments ("proc" "start" "end")) nil [90256 90542])
            ("term-kill-output" function (:user-visible-flag t) nil [90572 90878])
            ("term-show-output" function (:user-visible-flag t) nil [90880 91190])
            ("term-interrupt-subjob" function (:user-visible-flag t) nil [91192 91310])
            ("term-kill-subjob" function (:user-visible-flag t) nil [91312 91430])
            ("term-quit-subjob" function (:user-visible-flag t) nil [91432 91550])
            ("term-stop-subjob" function (:user-visible-flag t) nil [91552 91922])
            ("term-continue-subjob" function (:user-visible-flag t) nil [91924 92120])
            ("term-kill-input" function (:user-visible-flag t) nil [92122 92399])
            ("term-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [92401 92603])
            ("term-send-eof" function (:user-visible-flag t) nil [92605 92715])
            ("term-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [92717 93346])
            ("term-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [93348 93748])
            ("term-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [93751 94006])
            ("term-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [94008 94167])
            ("term-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [97353 97636])
            ("term-check-source" function (:arguments ("fname")) nil [98078 98352])
            ("term-extract-string" function nil nil [99473 99924])
            ("term-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [99926 100676])
            ("term-proc-query" function (:arguments ("proc" "str")) nil [101958 102844])
            ("term-horizontal-column" function nil nil [102962 103048])
            ("term-vertical-motion" function (:arguments ("count")) nil [103113 103198])
            ("term-buffer-vertical-motion" function (:arguments ("count")) nil [103347 104698])
            ("term-start-line-column" function nil nil [104759 104988])
            ("term-current-column" function nil nil [105060 105168])
            ("term-move-columns" function (:arguments ("delta")) nil [105243 105702])
            ("term-insert-char" function (:arguments ("char" "count")) nil [105756 105919])
            ("term-current-row" function nil nil [105921 106141])
            ("term-adjust-current-row-cache" function (:arguments ("delta")) nil [106143 106280])
            ("term-terminal-pos" function nil nil [106282 106546])
            ("term-handle-ansi-terminal-messages" function (:arguments ("message")) nil [106642 108678])
            ("term-emulate-terminal" function (:arguments ("proc" "str")) nil [108831 123246])
            ("term-handle-deferred-scroll" function nil nil [123248 123532])
            ("term-reset-terminal" function nil nil [123534 123943])
            ("term-handle-colors-array" function (:arguments ("parameter")) nil [124079 127142])
            ("term-handle-ansi-escape" function (:arguments ("proc" "char")) nil [127256 131401])
            ("term-set-scroll-region" function (:arguments ("top" "bottom")) nil [131403 132064])
            ("term-command-hook" function (:arguments ("string")) nil [133316 134054])
            ("term-display-line" function (:arguments ("true-file" "line")) nil [134286 134393])
            ("term-display-buffer-line" function (:arguments ("buffer" "line")) nil [134395 134956])
            ("term-goto-home" function nil nil [135179 135393])
            ("term-goto" function (:arguments ("row" "col")) nil [135395 135748])
            ("term-process-pager" function nil nil [135815 136396])
            ("term-pager-line" function (:arguments ("lines")) nil [136398 136714])
            ("term-pager-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [136716 136886])
            ("term-pager-bob" function nil nil [136940 137112])
            ("term-pager-eob" function nil nil [137160 137314])
            ("term-pager-back-line" function (:arguments ("lines")) nil [137316 137578])
            ("term-pager-back-page" function (:arguments ("arg")) nil [137580 137679])
            ("term-pager-discard" function nil nil [137681 137826])
            ("term-pager-disable" function nil nil [137927 138091])
            ("term-pager-enable" function nil nil [138121 138292])
            ("term-pager-toggle" function nil nil [138294 138407])
            ("term-pager-help" function (:user-visible-flag t) nil [138409 139600])
            ("term-pager-continue" function (:arguments ("new-count")) nil [139602 140038])
            ("term-handle-scroll" function (:arguments ("down")) nil [140179 141781])
            ("term-down" function (:arguments ("down" "check-for-scroll")) nil [141783 142899])
            ("term-unwrap-line" function nil nil [143084 143161])
            ("term-erase-in-line" function (:arguments ("kind")) nil [143163 144418])
            ("term-erase-in-display" function (:arguments ("kind")) nil [144420 145201])
            ("term-delete-chars" function (:arguments ("count")) nil [145203 145440])
            ("term-insert-spaces" function (:arguments ("count")) nil [145619 146342])
            ("term-delete-lines" function (:arguments ("lines")) nil [146344 147235])
            ("term-insert-lines" function (:arguments ("lines")) nil [147237 148512])
            ("term-start-output-log" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [148515 149222])
            ("term-stop-output-log" function (:user-visible-flag t) nil [149224 149347])
            ("term-show-maximum-output" function (:user-visible-flag t) nil [149349 149501])
            ("term-load-hook" variable nil nil [149540 149653])
            ("run-hooks" code nil nil [149655 149682])
            ("term-completion-autolist" variable nil nil [150639 150827])
            ("term-completion-addsuffix" variable (:default-value t) nil [150829 151315])
            ("term-completion-recexact" variable nil nil [151317 151577])
            ("term-completion-fignore" variable nil nil [151579 151902])
            ("term-file-name-prefix" variable nil nil [151904 152109])
            ("term-directory" function (:arguments ("directory")) nil [152112 152341])
            ("term-word" function (:arguments ("word-chars")) nil [152344 152958])
            ("term-match-partial-filename" function nil nil [152961 153228])
            ("term-dynamic-complete" function (:user-visible-flag t) nil [153231 153646])
            ("term-dynamic-complete-filename" function (:user-visible-flag t) nil [153649 154580])
            ("term-dynamic-complete-as-filename" function nil nil [154582 157160])
            ("term-replace-by-expanded-filename" function (:user-visible-flag t) nil [157163 157811])
            ("term-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [157814 159793])
            ("term-dynamic-list-filename-completions" function (:user-visible-flag t) nil [159795 160363])
            ("term-dynamic-list-completions" function (:arguments ("completions")) nil [160366 161371])
            ("term-ansi-make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [161429 162198])
            ("term-ansi-buffer-name" variable nil nil [162200 162234])
            ("term-ansi-default-program" variable nil nil [162235 162273])
            ("term-ansi-buffer-base-name" variable nil nil [162274 162313])
            ("ansi-term" function
               (:user-visible-flag t
                :arguments ("program" "new-buffer-name"))
                nil [162330 163944])
            ("serial-port-is-file-p" function nil nil [164048 164379])
            ("serial-name-history" variable (:default-value (if (serial-port-is-file-p) (or (when (file-exists-p "/dev/ttys0") (list "/dev/ttys0")) (when (file-exists-p "/dev/ttyS0") (list "/dev/ttyS0"))) (list "COM1"))) nil [164381 164647])
            ("serial-speed-history" variable (:default-value (list "9600" "1200" "2400" "4800" "9600" "14400" "19200" "28800" "38400" "57600" "115200")) nil [164649 164960])
            ("serial-nice-speed-history" function nil nil [164962 165351])
            ("serial-no-speed" variable
               (:constant-flag t
                :default-value "nil")
                nil [165353 165620])
            ("serial-supported-or-barf" function nil nil [165622 165822])
            ("serial-read-name" function nil nil [165824 167914])
            ("serial-read-speed" function nil nil [167916 168889])
            ("serial-term" function
               (:user-visible-flag t
                :arguments ("port" "speed"))
                nil [168906 170074])
            ("serial-mode-line-speed-menu" variable nil nil [170076 170116])
            ("serial-mode-line-config-menu" variable nil nil [170117 170158])
            ("serial-speed" function nil nil [170160 170376])
            ("serial-mode-line-speed-menu-1" function (:arguments ("event")) nil [170378 170772])
            ("serial-mode-line-speed-menu" function (:arguments ("event")) nil [170774 170868])
            ("serial-update-speed-menu" function nil nil [170870 171867])
            ("serial-mode-line-config-menu-1" function (:arguments ("event")) nil [171869 172309])
            ("serial-mode-line-config-menu" function (:arguments ("event")) nil [172311 172407])
            ("serial-update-config-menu" function nil nil [172409 173753])
            ("term" package nil nil [177304 177319]))          
      :file "term.el"
      :pointmax 177343
      :fsize 177342
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 14650 . 14651) (symbol 14613 . 14630) (open-paren 14612 . 14613)))
    (semanticdb-table "ehelp.el"
      :file "ehelp.el"
      :fsize 16902
      :lastmodtime '(21710 25077 0 0))
    (semanticdb-table "arc-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("archive" customgroup (:user-visible-flag t) nil [4484 4553])
            ("archive-arc" customgroup (:user-visible-flag t) nil [4555 4636])
            ("archive-lzh" customgroup (:user-visible-flag t) nil [4638 4719])
            ("archive-zip" customgroup (:user-visible-flag t) nil [4721 4802])
            ("archive-zoo" customgroup (:user-visible-flag t) nil [4804 4885])
            ("archive-tmpdir" variable (:default-value (make-temp-name (expand-file-name (if (eq system-type (quote ms-dos)) "ar" "archive.tmp") temporary-file-directory))) nil [4887 5215])
            ("archive-remote-regexp" variable (:default-value "^/[^/:]*[^/:.]:") nil [5217 5490])
            ("define-obsolete-variable-alias" code nil nil [5492 5578])
            ("archive-extract-hook" variable nil nil [5579 5703])
            ("archive-arc-extract" variable (:default-value (quote ("arc" "x"))) nil [5893 6231])
            ("archive-arc-expunge" variable (:default-value (quote ("arc" "d"))) nil [6233 6517])
            ("archive-arc-write-file-member" variable (:default-value (quote ("arc" "u"))) nil [6519 6814])
            ("archive-lzh-extract" variable (:default-value (quote ("lha" "pq"))) nil [6879 7212])
            ("archive-lzh-expunge" variable (:default-value (quote ("lha" "d"))) nil [7214 7498])
            ("archive-lzh-write-file-member" variable (:default-value (quote ("lha" "a"))) nil [7500 7795])
            ("archive-7z-program" variable (:default-value (let ((7z (or (executable-find "7z") (executable-find "7za")))) (when 7z (file-name-nondirectory 7z)))) nil [7860 8091])
            ("archive-zip-extract" variable (:default-value (cond ((executable-find "unzip") (quote ("unzip" "-qq" "-c"))) (archive-7z-program (\` ((\, archive-7z-program) "x" "-so"))) ((executable-find "pkunzip") (quote ("pkunzip" "-e" "-o-"))) (t (quote ("unzip" "-qq" "-c"))))) nil [8093 8660])
            ("archive-zip-expunge" variable (:default-value (cond ((executable-find "zip") (quote ("zip" "-d" "-q"))) (archive-7z-program (\` ((\, archive-7z-program) "d"))) ((executable-find "pkzip") (quote ("pkzip" "-d"))) (t (quote ("zip" "-d" "-q"))))) nil [8885 9385])
            ("archive-zip-update" variable (:default-value (cond ((executable-find "zip") (quote ("zip" "-q"))) (archive-7z-program (\` ((\, archive-7z-program) "u"))) ((executable-find "pkzip") (quote ("pkzip" "-u" "-P"))) (t (quote ("zip" "-q"))))) nil [9387 9960])
            ("archive-zip-update-case" variable (:default-value (cond ((executable-find "zip") (quote ("zip" "-q" "-k"))) (archive-7z-program (\` ((\, archive-7z-program) "u"))) ((executable-find "pkzip") (quote ("pkzip" "-u" "-P"))) (t (quote ("zip" "-q" "-k"))))) nil [9962 10557])
            ("archive-zip-case-fiddle" variable (:default-value t) nil [10559 10790])
            ("archive-zoo-extract" variable (:default-value (quote ("zoo" "xpq"))) nil [10855 11188])
            ("archive-zoo-expunge" variable (:default-value (quote ("zoo" "DqPP"))) nil [11190 11477])
            ("archive-zoo-write-file-member" variable (:default-value (quote ("zoo" "a"))) nil [11479 11773])
            ("archive-7z-extract" variable (:default-value (\` ((\, (or archive-7z-program "7z")) "x" "-so"))) nil [11837 12231])
            ("archive-7z-expunge" variable (:default-value (\` ((\, (or archive-7z-program "7z")) "d"))) nil [12233 12574])
            ("archive-7z-update" variable (:default-value (\` ((\, (or archive-7z-program "7z")) "u"))) nil [12576 12994])
            ("archive-subtype" variable nil nil [13097 13159])
            ("archive-file-list-start" variable nil nil [13160 13231])
            ("archive-file-list-end" variable nil nil [13232 13308])
            ("archive-proper-file-start" variable nil nil [13309 13383])
            ("archive-read-only" variable nil nil [13384 13461])
            ("archive-local-name" variable nil nil [13462 13533])
            ("archive-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map special-mode-map) (define-key map " " (quote archive-next-line)) (define-key map "a" (quote archive-alternate-display)) (define-key map "d" (quote archive-flag-deleted)) (define-key map "" (quote archive-flag-deleted)) (define-key map "e" (quote archive-extract)) (define-key map "f" (quote archive-extract)) (define-key map "" (quote archive-extract)) (define-key map "m" (quote archive-mark)) (define-key map "n" (quote archive-next-line)) (define-key map "" (quote archive-next-line)) (define-key map [down] (quote archive-next-line)) (define-key map "o" (quote archive-extract-other-window)) (define-key map "p" (quote archive-previous-line)) (define-key map "" (quote archive-previous-line)) (define-key map [up] (quote archive-previous-line)) (define-key map "r" (quote archive-rename-entry)) (define-key map "u" (quote archive-unflag)) (define-key map "\377" (quote archive-unmark-all-files)) (define-key map "v" (quote archive-view)) (define-key map "x" (quote archive-expunge)) (define-key map "" (quote archive-unflag-backwards)) (define-key map "E" (quote archive-extract-other-window)) (define-key map "M" (quote archive-chmod-entry)) (define-key map "G" (quote archive-chgrp-entry)) (define-key map "O" (quote archive-chown-entry)) (define-key map [follow-link] (quote mouse-face)) (if (fboundp (quote command-remapping)) (progn (define-key map [remap advertised-undo] (quote archive-undo)) (define-key map [remap undo] (quote archive-undo))) (substitute-key-definition (quote advertised-undo) (quote archive-undo) map global-map) (substitute-key-definition (quote undo) (quote archive-undo) map global-map)) (define-key map (if (featurep (quote xemacs)) (quote button2) [mouse-2]) (quote archive-extract)) (if (featurep (quote xemacs)) nil (define-key map [menu-bar immediate] (cons "Immediate" (make-sparse-keymap "Immediate"))) (define-key map [menu-bar immediate alternate] (quote (menu-item "Alternate Display" archive-alternate-display :enable (boundp (archive-name "alternate-display")) :help "Toggle alternate file info display"))) (define-key map [menu-bar immediate view] (quote (menu-item "View This File" archive-view :help "Display file at cursor in View Mode"))) (define-key map [menu-bar immediate display] (quote (menu-item "Display in Other Window" archive-display-other-window :help "Display file at cursor in another window"))) (define-key map [menu-bar immediate find-file-other-window] (quote (menu-item "Find in Other Window" archive-extract-other-window :help "Edit file at cursor in another window"))) (define-key map [menu-bar immediate find-file] (quote (menu-item "Find This File" archive-extract :help "Extract file at cursor and edit it"))) (define-key map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" archive-unmark-all-files :help "Unmark all marked files"))) (define-key map [menu-bar mark deletion] (quote (menu-item "Flag" archive-flag-deleted :help "Flag file at cursor for deletion"))) (define-key map [menu-bar mark unmark] (quote (menu-item "Unflag" archive-unflag :help "Unmark file at cursor"))) (define-key map [menu-bar mark mark] (quote (menu-item "Mark" archive-mark :help "Mark file at cursor"))) (define-key map [menu-bar operate] (cons "Operate" (make-sparse-keymap "Operate"))) (define-key map [menu-bar operate chown] (quote (menu-item "Change Owner..." archive-chown-entry :enable (fboundp (archive-name "chown-entry")) :help "Change owner of marked files"))) (define-key map [menu-bar operate chgrp] (quote (menu-item "Change Group..." archive-chgrp-entry :enable (fboundp (archive-name "chgrp-entry")) :help "Change group ownership of marked files"))) (define-key map [menu-bar operate chmod] (quote (menu-item "Change Mode..." archive-chmod-entry :enable (fboundp (archive-name "chmod-entry")) :help "Change mode (permissions) of marked files"))) (define-key map [menu-bar operate rename] (quote (menu-item "Rename to..." archive-rename-entry :enable (fboundp (archive-name "rename-entry")) :help "Rename marked files"))) (define-key map [menu-bar operate expunge] (quote (menu-item "Expunge Marked Files" archive-expunge :help "Delete all flagged files from archive"))) map))) nil [13534 18357])
            ("archive-file-name-indent" variable nil nil [18358 18428])
            ("archive-remote" variable nil nil [18430 18506])
            ("make-variable-buffer-local" code nil nil [18507 18551])
            ("put" code nil nil [18552 18592])
            ("archive-member-coding-system" variable nil nil [18594 18670])
            ("make-variable-buffer-local" code nil nil [18671 18729])
            ("archive-alternate-display" variable nil nil [18731 18818])
            ("make-variable-buffer-local" code nil nil [18819 18874])
            ("put" code nil nil [18875 18926])
            ("archive-superior-buffer" variable nil nil [18928 19005])
            ("put" code nil nil [19006 19055])
            ("archive-subfile-mode" variable nil nil [19057 19127])
            ("make-variable-buffer-local" code nil nil [19128 19178])
            ("put" code nil nil [19179 19225])
            ("archive-file-name-coding-system" variable nil nil [19227 19271])
            ("make-variable-buffer-local" code nil nil [19272 19333])
            ("put" code nil nil [19334 19391])
            ("archive-files" variable nil nil [19393 19544])
            ("make-variable-buffer-local" code nil nil [19545 19588])
            ("insert-unibyte" function (:arguments ("args")) nil [19869 20133])
            ("byte-after" function (:arguments ("pos")) nil [19721 19866])
            ("archive-name" function (:arguments ("suffix")) nil [20139 20243])
            ("archive-l-e" function (:arguments ("str" "len" "float")) nil [20245 20936])
            ("archive-int-to-mode" function (:arguments ("mode")) nil [20938 21751])
            ("archive-calc-mode" function (:arguments ("oldmode" "newmode" "error")) nil [21753 23525])
            ("archive-dosdate" function (:arguments ("date")) nil [23527 23962])
            ("archive-dostime" function (:arguments ("time")) nil [23964 24231])
            ("archive-unixdate" function (:arguments ("low" "high")) nil [24233 24484])
            ("archive-unixtime" function (:arguments ("low" "high")) nil [24486 24637])
            ("archive-get-lineno" function nil nil [24639 24793])
            ("archive-get-descr" function (:arguments ("noerror")) nil [24795 25337])
            ("archive-mode" function (:arguments ("force")) nil [25464 28525])
            ("put" code nil nil [28590 28630])
            ("let" code nil nil [28632 28781])
            ("archive-find-type" function nil nil [28859 29941])
            ("archive-desummarize" function nil nil [30020 30232])
            ("archive-summarize" function (:arguments ("shut-up")) nil [30235 31264])
            ("archive-resummarize" function nil nil [31266 31500])
            ("archive-summarize-files" function (:arguments ("files")) nil [31502 32463])
            ("archive-alternate-display" function (:user-visible-flag t) nil [32465 32776])
            ("archive-unique-fname" function (:arguments ("fname" "dir")) nil [32896 34202])
            ("archive-maybe-copy" function (:arguments ("archive")) nil [34204 35029])
            ("archive-maybe-update" function (:arguments ("unchanged")) nil [35031 35675])
            ("archive-delete-local" function (:arguments ("name")) nil [35677 36138])
            ("archive-try-jka-compr" function nil nil [36248 37215])
            ("archive-file-name-handler" function (:arguments ("op" "args")) nil [37217 37357])
            ("archive-set-buffer-as-visiting-file" function (:arguments ("filename")) nil [37359 38623])
            ("define-obsolete-function-alias" code nil nil [38625 38704])
            ("archive-extract" function
               (:user-visible-flag t
                :arguments ("other-window-p" "event"))
                nil [38706 42615])
            ("archive-*-extract" function (:arguments ("archive" "name" "command")) nil [42617 43571])
            ("archive-extract-by-stdout" function (:arguments ("archive" "name" "command" "stderr-test")) nil [43573 44206])
            ("archive-extract-by-file" function (:arguments ("archive" "name" "command" "stdout-test")) nil [44208 45362])
            ("archive-extract-other-window" function (:user-visible-flag t) nil [45364 45498])
            ("archive-display-other-window" function (:user-visible-flag t) nil [45500 45644])
            ("archive-view" function (:user-visible-flag t) nil [45646 45762])
            ("archive-add-new-member" function
               (:user-visible-flag t
                :arguments ("arcbuf" "name"))
                nil [45764 47140])
            ("archive-write-file-member" function nil nil [47241 48249])
            ("archive-*-write-file-member" function (:arguments ("archive" "descr" "command")) nil [48251 49685])
            ("archive-write-file" function (:arguments ("file")) nil [49687 49940])
            ("archive-flag-deleted" function
               (:user-visible-flag t
                :arguments ("p" "type"))
                nil [50055 50636])
            ("archive-unflag" function
               (:user-visible-flag t
                :arguments ("p"))
                nil [50638 50844])
            ("archive-unflag-backwards" function
               (:user-visible-flag t
                :arguments ("p"))
                nil [50846 51069])
            ("archive-unmark-all-files" function (:user-visible-flag t) nil [51071 51472])
            ("archive-mark" function
               (:user-visible-flag t
                :arguments ("p"))
                nil [51474 51710])
            ("archive-get-marked" function (:arguments ("mark" "default")) nil [51712 52079])
            ("archive-next-line" function (:arguments ("p")) nil [52179 52307])
            ("archive-previous-line" function (:arguments ("p")) nil [52309 52390])
            ("archive-chmod-entry" function
               (:user-visible-flag t
                :arguments ("new-mode"))
                nil [52392 52962])
            ("archive-chown-entry" function
               (:user-visible-flag t
                :arguments ("new-uid"))
                nil [52964 53362])
            ("archive-chgrp-entry" function
               (:user-visible-flag t
                :arguments ("new-gid"))
                nil [53364 53762])
            ("archive-expunge" function (:user-visible-flag t) nil [53764 54699])
            ("archive-*-expunge" function (:arguments ("archive" "files" "command")) nil [54701 54854])
            ("archive-rename-entry" function
               (:user-visible-flag t
                :arguments ("newname"))
                nil [54856 55445])
            ("archive-mode-revert" function (:arguments ("_no-auto-save" "_no-confirm")) nil [55506 55832])
            ("archive-undo" function (:user-visible-flag t) nil [55834 56025])
            ("archive-arc-summarize" function nil nil [56130 58223])
            ("archive-arc-rename-entry" function (:arguments ("newname" "descr")) nil [58225 58770])
            ("archive-lzh-summarize" function (:arguments ("start")) nil [58875 65339])
            ("archive-lzh-alternate-display" variable
               (:constant-flag t
                :default-value t)
                nil [65341 65383])
            ("archive-lzh-extract" function (:arguments ("archive" "name")) nil [65385 65490])
            ("archive-lzh-resum" function (:arguments ("p" "count")) nil [65492 65666])
            ("archive-lzh-rename-entry" function (:arguments ("newname" "descr")) nil [65668 66268])
            ("archive-lzh-ogm" function (:arguments ("newval" "files" "errtxt" "ofs")) nil [66270 67058])
            ("archive-lzh-chown-entry" function (:arguments ("newuid" "files")) nil [67060 67151])
            ("archive-lzh-chgrp-entry" function (:arguments ("newgid" "files")) nil [67153 67243])
            ("archive-lzh-chmod-entry" function (:arguments ("newmode" "files")) nil [67245 67468])
            ("archive-lzh-exe-summarize" function nil nil [67834 68469])
            ("defalias" code nil nil [68560 68690])
            ("archive-zip-summarize" function nil nil [68796 71569])
            ("archive-zip-extract" function (:arguments ("archive" "name")) nil [71571 72542])
            ("archive-zip-write-file-member" function (:arguments ("archive" "descr")) nil [72544 72715])
            ("archive-zip-chmod-entry" function (:arguments ("newmode" "files")) nil [72717 73479])
            ("archive-zoo-summarize" function nil nil [73584 75908])
            ("archive-zoo-extract" function (:arguments ("archive" "name")) nil [75910 76015])
            ("archive-rar-summarize" function (:arguments ("file")) nil [76121 78829])
            ("archive-rar-extract" function (:arguments ("archive" "name")) nil [78831 79228])
            ("archive-rar-exe-summarize" function nil nil [79279 79604])
            ("archive-rar-exe-extract" function (:arguments ("archive" "name")) nil [79606 80524])
            ("archive-7z-summarize" function nil nil [80629 82513])
            ("archive-7z-extract" function (:arguments ("archive" "name")) nil [82515 82849])
            ("archive-7z-write-file-member" function (:arguments ("archive" "descr")) nil [82851 82976])
            ("tar-grind-file-mode" function (:prototype-flag t) nil [83249 83291])
            ("archive-ar-file-header-re" variable
               (:constant-flag t
                :default-value "\\(.\\{16\\}\\)\\([ 0-9]\\{12\\}\\)\\([ 0-9]\\{6\\}\\)\\([ 0-9]\\{6\\}\\)\\([ 0-7]\\{8\\}\\)\\([ 0-9]\\{10\\}\\)`
")
                nil [83293 83449])
            ("archive-ar-summarize" function nil nil [83451 87341])
            ("archive-ar-extract" function (:arguments ("archive" "name")) nil [87343 88522])
            ("archive-mode" package nil nil [88681 88704])
            ("arc-mode" package nil nil [88706 88725]))          
      :file "arc-mode.el"
      :pointmax 88753
      :fsize 88752
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 20136 . 20137) (symbol 19701 . 19718) (open-paren 19700 . 19701)))
    (semanticdb-table "apropos.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("button" include nil nil [2351 2368])
            ("apropos" customgroup (:user-visible-flag t) nil [2370 2475])
            ("apropos-do-all" variable nil nil [2522 3389])
            ("apropos-symbol" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [3391 3524])
            ("apropos-keybinding" variable
               (:default-value (quote ((t (:inherit underline))))
                :type "face")
                nil [3526 3672])
            ("apropos-property" variable
               (:default-value (quote ((t (:inherit font-lock-builtin-face))))
                :type "face")
                nil [3674 3842])
            ("apropos-function-button" variable
               (:default-value (quote ((t (:inherit (font-lock-function-name-face button)))))
                :type "face")
                nil [3844 4040])
            ("apropos-variable-button" variable
               (:default-value (quote ((t (:inherit (font-lock-variable-name-face button)))))
                :type "face")
                nil [4042 4219])
            ("apropos-user-option-button" variable
               (:default-value (quote ((t (:inherit (font-lock-variable-name-face button)))))
                :type "face")
                nil [4221 4404])
            ("apropos-misc-button" variable
               (:default-value (quote ((t (:inherit (font-lock-constant-face button)))))
                :type "face")
                nil [4406 4591])
            ("apropos-match-face" variable (:default-value (quote match)) nil [4593 4923])
            ("apropos-sort-by-scores" variable nil nil [4925 5290])
            ("apropos-documentation-sort-by-scores" variable (:default-value t) nil [5292 5644])
            ("apropos-mode-map" variable (:default-value (let ((map (copy-keymap button-buffer-map))) (set-keymap-parent map special-mode-map) (define-key map "" (quote apropos-follow)) map)) nil [5646 6026])
            ("apropos-mode-hook" variable nil nil [6028 6095])
            ("apropos-pattern" variable nil nil [6097 6165])
            ("apropos-pattern-quoted" variable nil nil [6167 6253])
            ("apropos-words" variable nil nil [6255 6348])
            ("apropos-all-words" variable nil nil [6350 6419])
            ("apropos-regexp" variable nil nil [6421 6488])
            ("apropos-all-words-regexp" variable nil nil [6490 6568])
            ("apropos-files-scanned" variable nil nil [6570 6684])
            ("apropos-accumulator" variable nil nil [6686 7242])
            ("apropos-item" variable nil nil [7244 7318])
            ("apropos-synonyms" variable (:default-value (quote (("find" "open" "edit") ("kill" "cut") ("yank" "paste") ("region" "selection")))) nil [7320 7604])
            ("define-button-type" code nil nil [7642 7828])
            ("apropos-symbol-button-display-help" function (:arguments ("button")) nil [7830 8099])
            ("define-button-type" code nil nil [8101 8397])
            ("define-button-type" code nil nil [8399 8686])
            ("define-button-type" code nil nil [8688 8981])
            ("define-button-type" code nil nil [9275 9571])
            ("define-button-type" code nil nil [9573 9881])
            ("define-button-type" code nil nil [9883 10177])
            ("define-button-type" code nil nil [10179 10479])
            ("define-button-type" code nil nil [10481 10776])
            ("define-button-type" code nil nil [10778 11071])
            ("define-button-type" code nil nil [11073 11277])
            ("apropos-next-label-button" function (:arguments ("pos")) nil [11279 12032])
            ("apropos-words-to-regexp" function (:arguments ("words" "wild")) nil [12036 12542])
            ("apropos-read-pattern" function (:arguments ("subject")) nil [12559 13148])
            ("apropos-parse-pattern" function (:arguments ("pattern")) nil [13150 14686])
            ("apropos-calc-scores" function (:arguments ("str" "words")) nil [14688 15132])
            ("apropos-score-str" function (:arguments ("str")) nil [15134 15402])
            ("apropos-score-doc" function (:arguments ("doc")) nil [15404 15755])
            ("apropos-score-symbol" function (:arguments ("symbol" "weight")) nil [15757 16069])
            ("apropos-true-hit" function (:arguments ("str" "words")) nil [16071 16391])
            ("apropos-false-hit-symbol" function (:arguments ("symbol")) nil [16393 16566])
            ("apropos-false-hit-str" function (:arguments ("str")) nil [16568 16715])
            ("apropos-true-hit-doc" function (:arguments ("doc")) nil [16717 16857])
            ("define-derived-mode" code nil nil [16859 17009])
            ("apropos-multi-type" variable (:default-value t) nil [17011 17166])
            ("apropos-user-option" function
               (:user-visible-flag t
                :arguments ("pattern" "do-all"))
                nil [17183 18021])
            ("apropos-variable" function
               (:user-visible-flag t
                :arguments ("pattern" "do-not-all"))
                nil [18038 18450])
            ("defalias" code nil nil [18490 18534])
            ("apropos-command" function
               (:user-visible-flag t
                :arguments ("pattern" "do-all" "var-predicate"))
                nil [18550 21366])
            ("apropos-documentation-property" function (:arguments ("symbol" "property" "raw")) nil [21384 21725])
            ("apropos" function
               (:user-visible-flag t
                :arguments ("pattern" "do-all"))
                nil [21743 22777])
            ("apropos-library-button" function (:arguments ("sym")) nil [22779 23087])
            ("apropos-library" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [23104 25156])
            ("apropos-symbols-internal" function (:arguments ("symbols" "keys" "text")) nil [25158 26920])
            ("apropos-value" function
               (:user-visible-flag t
                :arguments ("pattern" "do-all"))
                nil [26938 28652])
            ("apropos-documentation" function
               (:user-visible-flag t
                :arguments ("pattern" "do-all"))
                nil [28670 30884])
            ("apropos-value-internal" function (:arguments ("predicate" "symbol" "function")) nil [30888 31262])
            ("apropos-documentation-internal" function (:arguments ("doc")) nil [31264 31781])
            ("apropos-format-plist" function (:arguments ("pl" "sep" "compare")) nil [31783 32372])
            ("apropos-documentation-check-doc-file" function nil nil [32456 34331])
            ("apropos-documentation-check-elc-file" function (:arguments ("file")) nil [34333 36314])
            ("apropos-safe-documentation" function (:arguments ("function")) nil [36318 37015])
            ("apropos-compact-layout" variable nil nil [37017 37119])
            ("apropos-print" function (:arguments ("do-keys" "spacing" "text" "nosubst")) nil [37121 41996])
            ("apropos-print-doc" function (:arguments ("i" "type" "do-keys")) nil [42010 43691])
            ("apropos-follow" function (:user-visible-flag t) nil [43693 43942])
            ("apropos-describe-plist" function (:arguments ("symbol")) nil [43945 44426])
            ("apropos" package nil nil [44429 44447]))          
      :file "apropos.el"
      :pointmax 44474
      :fsize 44473
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "button.el"
      :file "button.el"
      :fsize 20200
      :lastmodtime '(21710 25077 0 0))
    (semanticdb-table "allout.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [3469 3556])
            ("overlay" include nil nil [3581 3599])
            ("cl" include nil nil [3844 3857])
            ("allout" customgroup (:user-visible-flag t) nil [3943 4133])
            ("allout-keybindings" customgroup (:user-visible-flag t) nil [4134 4241])
            ("allout-command-prefix" variable nil nil [4296 4326])
            ("allout-mode-map" variable (:default-value (quote allout-mode-map)) nil [4489 4745])
            ("allout-mode-map-value" variable nil nil [4778 5007])
            ("defalias" code nil nil [5136 5185])
            ("allout-compose-and-institute-keymap" function (:arguments ("varname" "value")) nil [5257 6771])
            ("allout-institute-keymap" function (:arguments ("map")) nil [6810 7519])
            ("allout-compose-and-institute-keymap" code nil nil [7645 7682])
            ("allout-command-prefix" variable (:default-value " ") nil [7714 8050])
            ("define-widget" code nil nil [8087 8393])
            ("allout-prefixed-keybindings" variable (:default-value (quote (("[(control ?n)]" allout-next-visible-heading) ("[(control ?p)]" allout-previous-visible-heading) ("[(control ?u)]" allout-up-current-level) ("[(control ?f)]" allout-forward-current-level) ("[(control ?b)]" allout-backward-current-level) ("[(control ?a)]" allout-beginning-of-current-entry) ("[(control ?e)]" allout-end-of-entry) ("[(control ?i)]" allout-show-children) ("[(control ?s)]" allout-show-current-subtree) ("[(control ?t)]" allout-toggle-current-subtree-exposure) ("[?h]" allout-hide-current-subtree) ("[(control ?o)]" allout-show-current-entry) ("[?!]" allout-show-all) ("[?x]" allout-toggle-current-subtree-encryption) ("[? ]" allout-open-sibtopic) ("[?.]" allout-open-subtopic) ("[?,]" allout-open-supertopic) ("[?']" allout-shift-in) ("[?>]" allout-shift-in) ("[?<]" allout-shift-out) ("[(control ?m)]" allout-rebullet-topic) ("[?*]" allout-rebullet-current-heading) ("[?#]" allout-number-siblings) ("[(control ?k)]" allout-kill-topic) ("[(meta ?k)]" allout-copy-topic-as-kill) ("[?@]" allout-resolve-xref) ("[?=?c]" allout-copy-exposed-to-buffer) ("[?=?i]" allout-indented-exposed-to-buffer) ("[?=?t]" allout-latexify-exposed) ("[?=?p]" allout-flatten-exposed-to-buffer)))) nil [8431 10659])
            ("allout-unprefixed-keybindings" variable (:default-value (quote (("[(control ?k)]" allout-kill-line) ("[(meta ?k)]" allout-copy-line-as-kill) ("[(control ?y)]" allout-yank) ("[(meta ?y)]" allout-yank-pop)))) nil [10699 11563])
            ("allout-auto-activation-helper" function (:arguments ("var" "value")) nil [11630 11830])
            ("allout-setup" function nil nil [11870 12320])
            ("allout-auto-activation" variable nil nil [12367 13347])
            ("allout-setup" code nil nil [13348 13362])
            ("allout-default-layout" variable (:default-value (quote (-2 : 0))) nil [13393 16010])
            ("define-widget" code nil nil [16038 16545])
            ("allout-inhibit-auto-fill" variable nil nil [16580 17224])
            ("make-variable-buffer-local" code nil nil [17225 17279])
            ("allout-inhibit-auto-fill-on-headline" variable nil nil [17325 17503])
            ("make-variable-buffer-local" code nil nil [17504 17570])
            ("allout-use-hanging-indents" variable (:default-value t) nil [17606 17916])
            ("make-variable-buffer-local" code nil nil [17917 17973])
            ("put" code nil nil [17989 18116])
            ("allout-reindent-bodies" variable (:default-value (if allout-use-hanging-indents (quote text))) nil [18148 18742])
            ("make-variable-buffer-local" code nil nil [18744 18796])
            ("put" code nil nil [18812 18909])
            ("allout-show-bodies" variable nil nil [18938 19091])
            ("make-variable-buffer-local" code nil nil [19092 19140])
            ("put" code nil nil [19156 19275])
            ("allout-beginning-of-line-cycles" variable (:default-value t) nil [19317 20672])
            ("allout-end-of-line-cycles" variable (:default-value t) nil [20707 21617])
            ("allout-header-prefix" variable (:default-value ".") nil [21648 22184])
            ("make-variable-buffer-local" code nil nil [22185 22235])
            ("put" code nil nil [22251 22308])
            ("allout-primary-bullet" variable (:default-value "*") nil [22339 22865])
            ("make-variable-buffer-local" code nil nil [22866 22917])
            ("put" code nil nil [22933 22991])
            ("allout-plain-bullets-string" variable (:default-value ".,") nil [23028 23392])
            ("make-variable-buffer-local" code nil nil [23393 23450])
            ("put" code nil nil [23466 23530])
            ("allout-distinctive-bullets-string" variable (:default-value "*+-=>()[{}&!?#%\"X@$~_\\:;^") nil [23573 25346])
            ("make-variable-buffer-local" code nil nil [25347 25410])
            ("put" code nil nil [25426 25496])
            ("allout-use-mode-specific-leader" variable (:default-value t) nil [25538 27011])
            ("put" code nil nil [27027 27195])
            ("allout-mode-leaders" variable (:default-value (quote nil)) nil [27224 27743])
            ("allout-old-style-prefixes" variable nil nil [27779 28222])
            ("make-variable-buffer-local" code nil nil [28223 28278])
            ("put" code nil nil [28294 28420])
            ("allout-stylish-prefixes" variable (:default-value t) nil [28476 29983])
            ("make-variable-buffer-local" code nil nil [29984 30037])
            ("put" code nil nil [30053 30177])
            ("allout-numbered-bullet" variable (:default-value "#") nil [30210 30617])
            ("make-variable-buffer-local" code nil nil [30618 30670])
            ("put" code nil nil [30686 30847])
            ("allout-file-xref-bullet" variable (:default-value "@") nil [30880 31116])
            ("put" code nil nil [31132 31294])
            ("allout-presentation-padding" variable (:default-value 2) nil [31331 31478])
            ("make-variable-buffer-local" code nil nil [31480 31537])
            ("put" code nil nil [31553 31618])
            ("define-obsolete-variable-alias" code nil nil [31668 31789])
            ("allout-flattened-numbering-abbreviation" variable nil nil [31790 32055])
            ("allout-number-pages" variable nil nil [32109 32250])
            ("allout-label-style" variable (:default-value "\\large\\bf") nil [32278 32419])
            ("allout-head-line-style" variable (:default-value "\\large\\sl ") nil [32451 32598])
            ("allout-body-line-style" variable (:default-value " ") nil [32630 32766])
            ("allout-title-style" variable (:default-value "\\Large\\bf") nil [32794 32935])
            ("allout-title" variable (:default-value (quote (or buffer-file-name (buffer-name)))) nil [32957 33129])
            ("allout-line-skip" variable (:default-value ".05cm") nil [33155 33284])
            ("allout-indent" variable (:default-value ".3cm") nil [33307 33414])
            ("allout-encryption" customgroup (:user-visible-flag t) nil [33472 33584])
            ("allout-topic-encryption-bullet" variable (:default-value "~") nil [33624 33807])
            ("allout-encrypt-unencrypted-on-saves" variable (:default-value t) nil [33852 34541])
            ("make-variable-buffer-local" code nil nil [34542 34607])
            ("allout-auto-save-temporarily-disabled" variable nil nil [34608 34850])
            ("allout-just-did-undo" variable nil nil [34851 34955])
            ("make-variable-buffer-local" code nil nil [34956 35006])
            ("allout-developer" customgroup (:user-visible-flag t) nil [35056 35184])
            ("allout-run-unit-tests-on-load" variable nil nil [35223 35674])
            ("allout-enable-file-variable-adjustment" variable (:default-value t) nil [35759 36290])
            ("make-variable-buffer-local" code nil nil [36291 36359])
            ("allout-version" variable (:default-value "2.3") nil [36500 36591])
            ("allout-version" function
               (:user-visible-flag t
                :arguments ("here"))
                nil [36616 36855])
            ("allout-mode" variable nil nil [36946 37009])
            ("make-variable-buffer-local" code nil nil [37010 37051])
            ("allout-layout" variable nil nil [37079 38214])
            ("make-variable-buffer-local" code nil nil [38215 38258])
            ("put" code nil nil [38274 38380])
            ("allout-regexp" variable nil nil [38433 38676])
            ("make-variable-buffer-local" code nil nil [38677 38720])
            ("allout-bullets-string" variable nil nil [38752 39035])
            ("make-variable-buffer-local" code nil nil [39036 39087])
            ("allout-bullets-string-len" variable nil nil [39123 39221])
            ("make-variable-buffer-local" code nil nil [39222 39277])
            ("allout-depth-specific-regexp" variable nil nil [39316 39813])
            ("make-variable-buffer-local" code nil nil [39814 39872])
            ("allout-depth-one-regexp" variable nil nil [39906 40233])
            ("make-variable-buffer-local" code nil nil [40234 40287])
            ("allout-line-boundary-regexp" variable nil nil [40325 40478])
            ("make-variable-buffer-local" code nil nil [40479 40536])
            ("allout-bob-regexp" variable nil nil [40564 40669])
            ("make-variable-buffer-local" code nil nil [40670 40717])
            ("allout-header-subtraction" variable (:default-value (1- (length allout-header-prefix))) nil [40753 40894])
            ("make-variable-buffer-local" code nil nil [40895 40950])
            ("allout-plain-bullets-string-len" variable (:default-value (length allout-plain-bullets-string)) nil [40992 41146])
            ("make-variable-buffer-local" code nil nil [41147 41208])
            ("allout-doublecheck-at-and-shallower" variable
               (:constant-flag t
                :default-value 3)
                nil [41255 42578])
            ("allout-reset-header-lead" function
               (:user-visible-flag t
                :arguments ("header-lead"))
                nil [42627 42905])
            ("allout-lead-with-comment-string" function
               (:user-visible-flag t
                :arguments ("header-lead"))
                nil [42961 43439])
            ("allout-infer-header-lead-and-primary-bullet" function nil nil [43496 45324])
            ("defalias" code nil nil [45325 45408])
            ("allout-infer-body-reindent" function nil nil [45448 45842])
            ("set-allout-regexp" function (:user-visible-flag t) nil [45873 51199])
            ("allout-mode-exposure-menu" variable nil nil [51217 51251])
            ("allout-mode-editing-menu" variable nil nil [51252 51285])
            ("allout-mode-navigation-menu" variable nil nil [51286 51322])
            ("allout-mode-misc-menu" variable nil nil [51323 51353])
            ("produce-allout-mode-menubar-entries" function nil nil [51354 53829])
            ("allout-mode-prior-settings" variable nil nil [53907 54082])
            ("make-variable-buffer-local" code nil nil [54083 54139])
            ("allout-add-resumptions" function (:arguments ("pairs")) nil [54186 56997])
            ("allout-do-resumptions" function nil nil [57032 57609])
            ("allout-unprotected" function (:arguments ("expr")) nil [57679 57890])
            ("allout-mode-hook" variable nil nil [57917 57984])
            ("define-obsolete-variable-alias" code nil nil [58022 58114])
            ("allout-mode-deactivate-hook" variable nil nil [58115 58191])
            ("allout-exposure-category" variable nil nil [58226 58325])
            ("define-obsolete-variable-alias" code nil nil [58369 58473])
            ("allout-exposure-change-functions" variable nil nil [58474 59005])
            ("define-obsolete-variable-alias" code nil nil [59049 59153])
            ("allout-structure-added-functions" variable nil nil [59154 59575])
            ("define-obsolete-variable-alias" code nil nil [59621 59729])
            ("allout-structure-deleted-functions" variable nil nil [59730 60299])
            ("define-obsolete-variable-alias" code nil nil [60345 60453])
            ("allout-structure-shifted-functions" variable nil nil [60454 61003])
            ("allout-after-copy-or-kill-hook" variable nil nil [61045 61189])
            ("allout-post-undo-hook" variable nil nil [61222 61443])
            ("allout-outside-normal-auto-fill-function" variable nil nil [61495 61745])
            ("make-variable-buffer-local" code nil nil [61746 61816])
            ("add-to-list" code nil nil [61872 61935])
            ("allout-passphrase-verifier-string" variable nil nil [61979 62653])
            ("make-variable-buffer-local" code nil nil [62654 62717])
            ("make-obsolete-variable" code nil nil [62718 62822])
            ("put" code nil nil [62838 62908])
            ("allout-passphrase-hint-string" variable nil nil [62948 63372])
            ("make-variable-buffer-local" code nil nil [63373 63432])
            ("setq-default" code nil nil [63433 63480])
            ("make-obsolete-variable" code nil nil [63481 63577])
            ("put" code nil nil [63593 63659])
            ("allout-after-save-decrypt" variable nil nil [63695 64064])
            ("make-variable-buffer-local" code nil nil [64065 64120])
            ("allout-encryption-plaintext-sanitization-regexps" variable nil nil [64179 64838])
            ("make-variable-buffer-local" code nil nil [64839 64917])
            ("allout-encryption-ciphertext-rejection-regexps" variable nil nil [64974 65463])
            ("make-variable-buffer-local" code nil nil [65465 65541])
            ("allout-encryption-ciphertext-rejection-ceiling" variable (:default-value 5) nil [65598 65796])
            ("make-variable-buffer-local" code nil nil [65797 65873])
            ("allout-mode-p" function nil nil [66050 66151])
            ("allout-write-contents-hook-handler" function nil nil [66199 67695])
            ("allout-after-saves-handler" function nil nil [67735 68495])
            ("allout-called-interactively-p" function nil nil [68538 68861])
            ("allout-inhibit-aberrance-doublecheck" variable nil nil [69319 69522])
            ("allout-explicitly-deactivated" variable nil nil [69602 69765])
            ("make-variable-buffer-local" code nil nil [69766 69825])
            ("allout-init" function (:arguments ("mode")) nil [69853 70285])
            ("allout-setup-menubar" function nil nil [70319 70666])
            ("allout-overlay-preparations" function nil nil [70703 71766])
            ("define-minor-mode" code nil nil [71836 90037])
            ("defalias" code nil nil [90096 90138])
            ("allout-unload-function" function nil nil [90170 90413])
            ("allout-hidden-p" function (:arguments ("pos")) nil [90484 90660])
            ("allout-overlay-insert-in-front-handler" function (:arguments ("ol" "after" "beg" "_end" "_prelen")) nil [90796 91199])
            ("allout-overlay-interior-modification-handler" function (:arguments ("ol" "after" "beg" "end" "_prelen")) nil [91346 93166])
            ("allout-before-change-handler" function (:arguments ("beg" "end")) nil [93214 93977])
            ("allout-isearch-end-handler" function (:arguments ("_overlay")) nil [94033 94446])
            ("allout-recent-prefix-beginning" variable nil nil [95010 95119])
            ("make-variable-buffer-local" code nil nil [95120 95180])
            ("allout-recent-prefix-end" variable nil nil [95214 95315])
            ("make-variable-buffer-local" code nil nil [95316 95370])
            ("allout-recent-depth" variable nil nil [95399 95477])
            ("make-variable-buffer-local" code nil nil [95478 95527])
            ("allout-recent-end-of-subtree" variable nil nil [95565 95671])
            ("make-variable-buffer-local" code nil nil [95672 95730])
            ("allout-prefix-data" function nil nil [95761 96434])
            ("nullify-allout-prefix-data" function nil nil [96473 96717])
            ("allout-recent-depth" function nil nil [96749 97122])
            ("allout-recent-prefix" function nil nil [97155 97628])
            ("allout-recent-bullet" function nil nil [97661 98172])
            ("allout-do-doublecheck" function nil nil [98286 98734])
            ("allout-aberrant-container-p" function nil nil [98777 100651])
            ("allout-on-current-heading-p" function nil nil [100693 101093])
            ("defalias" code nil nil [101127 101187])
            ("allout-e-o-prefix-p" function nil nil [101221 101581])
            ("allout-depth" function nil nil [101637 102203])
            ("allout-current-depth" function nil nil [102238 102601])
            ("allout-get-current-prefix" function nil nil [102641 102789])
            ("allout-get-bullet" function nil nil [102821 102980])
            ("allout-current-bullet" function nil nil [103016 103431])
            ("allout-get-prefix-bullet" function (:arguments ("prefix")) nil [103476 103795])
            ("allout-sibling-index" function (:arguments ("depth")) nil [103845 104511])
            ("allout-topic-flat-index" function nil nil [104549 104954])
            ("allout-beginning-of-current-line" function nil nil [105029 105527])
            ("allout-end-of-current-line" function nil nil [105567 105974])
            ("allout-beginning-of-line" function (:user-visible-flag t) nil [106012 107290])
            ("allout-end-of-line" function (:user-visible-flag t) nil [107322 108338])
            ("allout-mark-active-p" function nil nil [108372 108757])
            ("allout-next-heading" function nil nil [108790 109659])
            ("allout-this-or-next-heading" function nil nil [109697 109954])
            ("allout-previous-heading" function nil nil [109991 110911])
            ("allout-get-invisibility-overlay" function nil nil [110956 111291])
            ("allout-back-to-visible-text" function nil nil [111332 111552])
            ("allout-chart-subtree" function (:arguments ("levels" "visible" "orig-depth" "prev-depth")) nil [111937 115973])
            ("allout-chart-siblings" function (:arguments ("_start" "_end")) nil [116027 116485])
            ("allout-chart-to-reveal" function (:arguments ("chart" "depth")) nil [116532 117425])
            ("allout-goto-prefix" function nil nil [118755 119460])
            ("allout-goto-prefix-doublechecked" function nil nil [119506 119993])
            ("allout-end-of-prefix" function (:arguments ("ignore-decorations")) nil [120028 120610])
            ("allout-current-bullet-pos" function nil nil [120649 120823])
            ("allout-back-to-current-heading" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [120888 121732])
            ("defalias" code nil nil [121768 121834])
            ("allout-pre-next-prefix" function nil nil [121870 122076])
            ("allout-end-of-subtree" function
               (:user-visible-flag t
                :arguments ("current" "include-trailing-blank"))
                nil [122151 123085])
            ("allout-end-of-current-subtree" function
               (:user-visible-flag t
                :arguments ("include-trailing-blank"))
                nil [123160 123594])
            ("allout-beginning-of-current-entry" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [123662 124261])
            ("allout-end-of-entry" function
               (:user-visible-flag t
                :arguments ("inclusive"))
                nil [124313 124726])
            ("allout-end-of-current-heading" function nil nil [124769 124913])
            ("defalias" code nil nil [124914 124978])
            ("allout-get-body-text" function nil nil [125012 125492])
            ("allout-ascend-to-depth" function (:arguments ("depth")) nil [125553 126015])
            ("allout-ascend" function (:arguments ("dont-move-if-unsuccessful")) nil [126077 127238])
            ("allout-descend-to-depth" function (:arguments ("depth")) nil [127280 127859])
            ("allout-up-current-level" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [127899 128311])
            ("allout-next-sibling" function (:arguments ("depth" "backward")) nil [128384 130180])
            ("allout-next-sibling-leap" function (:arguments ("depth" "backward")) nil [130242 132753])
            ("allout-previous-sibling" function (:arguments ("depth" "backward")) nil [132814 133151])
            ("allout-snug-back" function nil nil [133181 133448])
            ("allout-beginning-of-level" function nil nil [133487 133621])
            ("allout-end-of-level" function (:arguments ("_backward")) nil [133672 133959])
            ("allout-next-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [134003 136274])
            ("allout-previous-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [136322 136675])
            ("allout-forward-current-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [136720 137715])
            ("allout-backward-current-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [137761 138054])
            ("allout-post-goto-bullet" variable nil nil [138129 138546])
            ("make-variable-buffer-local" code nil nil [138547 138600])
            ("allout-command-counter" variable nil nil [138633 138833])
            ("make-variable-buffer-local" code nil nil [138834 138886])
            ("allout-this-command-hid-text" variable nil nil [138925 139028])
            ("make-variable-buffer-local" code nil nil [139029 139087])
            ("allout-post-command-business" function nil nil [139129 140828])
            ("allout-pre-command-business" function nil nil [140869 142050])
            ("allout-hotspot-key-handler" function (:user-visible-flag t) nil [142090 144165])
            ("allout-find-file-hook" function nil nil [144201 144468])
            ("allout-solicit-alternate-bullet" function (:arguments ("depth" "current-bullet")) nil [144576 145415])
            ("allout-distinctive-bullet" function (:arguments ("bullet")) nil [145460 145650])
            ("allout-numbered-type-prefix" function (:arguments ("prefix")) nil [145707 146017])
            ("allout-encrypted-type-prefix" function (:arguments ("prefix")) nil [146075 146416])
            ("allout-bullet-for-depth" function (:arguments ("depth")) nil [146468 146881])
            ("allout-make-topic-prefix" function (:arguments ("prior-bullet" "new" "depth" "instead" "number-control" "index")) nil [146966 153963])
            ("allout-open-topic" function (:arguments ("relative-depth" "before" "offer-recent-bullet")) nil [154045 162645])
            ("allout-open-subtopic" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [162682 162940])
            ("allout-open-sibtopic" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [162977 163290])
            ("allout-open-supertopic" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163329 163597])
            ("allout-former-auto-filler" variable nil nil [163690 163797])
            ("allout-auto-fill" function nil nil [163828 165255])
            ("allout-reindent-body" function (:arguments ("old-depth" "new-depth" "_number")) nil [165326 166851])
            ("allout-rebullet-current-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [166900 168072])
            ("allout-rebullet-heading" function (:arguments ("instead" "new-depth" "number-control" "index" "do-successors")) nil [168131 172441])
            ("allout-rebullet-topic" function
               (:user-visible-flag t
                :arguments ("arg" "sans-offspring"))
                nil [172488 173658])
            ("allout-rebullet-topic-grunt" function (:arguments ("relative-depth" "starting-depth" "starting-point" "index" "do-successors" "sans-offspring")) nil [173728 178861])
            ("allout-renumber-to-depth" function (:arguments ("depth")) nil [178915 180214])
            ("allout-number-siblings" function
               (:user-visible-flag t
                :arguments ("denumber"))
                nil [180269 181222])
            ("allout-shift-in" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [181255 183152])
            ("allout-shift-out" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [183186 184842])
            ("allout-kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [184963 186259])
            ("allout-copy-line-as-kill" function (:user-visible-flag t) nil [186298 186534])
            ("allout-kill-topic" function (:user-visible-flag t) nil [186566 188094])
            ("allout-copy-topic-as-kill" function (:user-visible-flag t) nil [188134 188396])
            ("allout-annotate-hidden" function (:arguments ("begin" "end")) nil [188442 189999])
            ("allout-deannotate-hidden" function (:arguments ("begin" "end")) nil [190047 190352])
            ("allout-hide-by-annotation" function (:arguments ("begin" "end")) nil [190401 191767])
            ("allout-yank-processing" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [191804 198030])
            ("allout-yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [198069 199358])
            ("allout-yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [199401 199802])
            ("allout-resolve-xref" function (:user-visible-flag t) nil [199903 201402])
            ("allout-flag-region" function (:arguments ("from" "to" "flag")) nil [201493 202429])
            ("allout-flag-current-subtree" function (:arguments ("flag")) nil [202474 203103])
            ("allout-show-entry" function (:user-visible-flag t) nil [203158 203759])
            ("allout-show-children" function
               (:user-visible-flag t
                :arguments ("level" "strict"))
                nil [203815 207527])
            ("allout-show-to-offshoot" function (:user-visible-flag t) nil [207564 208756])
            ("allout-hide-current-entry" function (:user-visible-flag t) nil [208795 209135])
            ("allout-show-current-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209187 209588])
            ("allout-show-current-subtree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209642 210317])
            ("allout-current-topic-collapsed-p" function (:arguments ("include-single-liners")) nil [210394 211249])
            ("allout-hide-current-subtree" function
               (:user-visible-flag t
                :arguments ("just-close"))
                nil [211310 212214])
            ("allout-toggle-current-subtree-exposure" function (:user-visible-flag t) nil [212263 212605])
            ("allout-show-current-branches" function (:user-visible-flag t) nil [212647 212857])
            ("allout-hide-current-leaves" function (:user-visible-flag t) nil [212897 213176])
            ("allout-show-all" function (:user-visible-flag t) nil [213232 213452])
            ("allout-hide-bodies" function (:user-visible-flag t) nil [213484 213621])
            ("allout-hide-region-body" function (:arguments ("start" "end")) nil [213667 214198])
            ("allout-expose-topic" function
               (:user-visible-flag t
                :arguments ("spec"))
                nil [214236 218969])
            ("allout-old-expose-topic" function
               (:user-visible-flag t
                :arguments ("spec" "followers"))
                nil [219026 222035])
            ("allout-new-exposure" function (:arguments ("spec")) nil [222069 223251])
            ("allout-stringify-flat-index" function (:arguments ("flat-index" "context")) nil [223475 224504])
            ("allout-stringify-flat-index-plain" function (:arguments ("flat-index")) nil [224561 224905])
            ("allout-stringify-flat-index-indented" function (:arguments ("flat-index")) nil [224965 225785])
            ("allout-listify-exposed" function
               (:user-visible-flag t
                :arguments ("start" "end" "format"))
                nil [225847 229989])
            ("allout-region-active-p" function nil nil [230025 230193])
            ("allout-process-exposed" function (:arguments ("func" "from" "to" "frombuf" "tobuf" "format" "_start-num")) nil [230283 232403])
            ("allout-insert-listified" function (:arguments ("listified")) nil [232471 233195])
            ("allout-copy-exposed-to-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf" "format"))
                nil [233264 234795])
            ("allout-flatten-exposed-to-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf"))
                nil [234860 235478])
            ("allout-indented-exposed-to-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf"))
                nil [235544 236174])
            ("allout-latex-verb-quote" function (:arguments ("string" "_flow")) nil [236258 236742])
            ("allout-latex-verbatim-quote-curr-line" function nil nil [236793 237629])
            ("allout-insert-latex-header" function (:arguments ("buffer")) nil [237675 239709])
            ("allout-insert-latex-trailer" function (:arguments ("buffer")) nil [239756 239912])
            ("allout-latexify-one-item" function (:arguments ("depth" "_prefix" "bullet" "text")) nil [239974 241549])
            ("allout-latexify-exposed" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf"))
                nil [241605 242582])
            ("allout-toggle-current-subtree-encryption" function
               (:user-visible-flag t
                :arguments ("keymode-cue"))
                nil [242676 244696])
            ("allout-toggle-subtree-encryption" function
               (:user-visible-flag t
                :arguments ("keymode-cue"))
                nil [244762 250470])
            ("declare-function" code nil nil [250472 250580])
            ("declare-function" code nil nil [250581 250649])
            ("declare-function" code nil nil [250650 250710])
            ("declare-function" code nil nil [250711 250827])
            ("declare-function" code nil nil [250828 250881])
            ("declare-function" code nil nil [250882 250933])
            ("allout-encrypt-string" function (:arguments ("text" "decrypt" "allout-buffer" "keymode-cue" "rejected")) nil [251061 258621])
            ("allout-inhibit-auto-save-info-for-decryption" function (:arguments ("was-buffer-saved-size")) nil [258675 259088])
            ("allout-maybe-resume-auto-save-info-after-encryption" function nil nil [259152 259689])
            ("allout-encrypted-topic-p" function nil nil [259727 260047])
            ("allout-next-topic-pending-encryption" function nil nil [260096 261561])
            ("allout-encrypt-decrypted" function (:user-visible-flag t) nil [261598 263577])
            ("defalias" code nil nil [263735 263782])
            ("outlineify-sticky" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [263798 264480])
            ("allout-file-vars-section-data" function nil nil [264523 265597])
            ("allout-adjust-file-variable" function (:arguments ("varname" "value")) nil [265651 268194])
            ("allout-get-configvar-values" function (:arguments ("configvar-name")) nil [268242 268927])
            ("allout-mark-topic" function (:user-visible-flag t) nil [268974 269263])
            ("solicit-char-in-string" function (:arguments ("prompt" "string" "do-defaulting")) nil [269348 270305])
            ("regexp-sans-escapes" function (:arguments ("regexp" "successive-backslashes")) nil [270361 271227])
            ("count-trailing-whitespace-region" function (:arguments ("beg" "end")) nil [271280 271718])
            ("allout-format-quote" function (:arguments ("string")) nil [271757 271976])
            ("allout-flatten" function (:arguments ("list")) nil [272022 272283])
            ("unless" code nil nil [272351 272655])
            ("allout-mark-marker" function (:arguments ("force" "buffer")) nil [272719 273020])
            ("if" code nil nil [273064 273561])
            ("if" code nil nil [273594 273660])
            ("if" code nil nil [273699 274899])
            ("if" code nil nil [274952 275435])
            ("if" code nil nil [275500 275921])
            ("if" code nil nil [275991 276327])
            ("if" code nil nil [276396 277663])
            ("if" code nil nil [277727 279911])
            ("defalias" code nil nil [279985 280225])
            ("defalias" code nil nil [280303 280559])
            ("defalias" code nil nil [280602 280751])
            ("defalias" code nil nil [280845 280912])
            ("if" code nil nil [280974 281132])
            ("allout-bullet-isearch" function
               (:user-visible-flag t
                :arguments ("bullet"))
                nil [281203 281634])
            ("allout-run-unit-tests" function nil nil [281734 281931])
            ("allout-tests-obliterate-variable" function (:arguments ("name")) nil [282007 282213])
            ("allout-tests-globally-unbound" variable nil nil [282250 282366])
            ("allout-tests-globally-true" variable nil nil [282367 282480])
            ("allout-tests-locally-true" variable nil nil [282481 282593])
            ("allout-test-resumptions" function nil nil [282594 288203])
            ("when" code nil nil [288274 288336])
            ("allout" package nil nil [288355 288372]))          
      :file "allout.el"
      :pointmax 288785
      :fsize 288784
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 3860 . 3861) (symbol 3601 . 3618) (open-paren 3600 . 3601)))
    (semanticdb-table "bindings.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [928 1263])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1266 1471])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1473 1732])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1734 1924])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1926 2371])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2373 2981])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2983 3333])
            ("mode-line-eol-desc-cache" variable nil nil [3335 3372])
            ("mode-line-eol-desc" function nil nil [3374 4253])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4281 4821])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4823 5108])
            ("put" code nil nil [5109 5161])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5163 5615])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5617 6539])
            ("put" code nil nil [6555 6605])
            ("make-variable-buffer-local" code nil nil [6606 6655])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6657 6868])
            ("put" code nil nil [6884 6931])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6933 7208])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7210 7470])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7472 7990])
            ("put" code nil nil [8006 8055])
            ("make-variable-buffer-local" code nil nil [8056 8104])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8106 8616])
            ("put" code nil nil [8632 8679])
            ("make-variable-buffer-local" code nil nil [8680 8726])
            ("mode-line-frame-control" function nil nil [8796 9033])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9143 9272])
            ("put" code nil nil [9288 9349])
            ("mode-line-process" variable nil nil [9351 9510])
            ("put" code nil nil [9526 9574])
            ("make-variable-buffer-local" code nil nil [9575 9622])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9624 10375])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10377 10486])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10488 10879])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10881 11271])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11273 12283])
            ("put" code nil nil [12284 12330])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12332 13041])
            ("mode-line-position" variable (:default-value (\` ((-3 (\, (propertize "%p" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu"))) (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))))))))) nil [13043 14479])
            ("put" code nil nil [14480 14529])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [14531 15264])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [15266 15750])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [15752 16065])
            ("put" code nil nil [16081 16143])
            ("make-variable-buffer-local" code nil nil [16144 16205])
            ("mode-line-misc-info" variable (:default-value (quote ((which-func-mode ("" which-func-format " ")) (global-mode-string ("" global-mode-string " "))))) nil [16207 16489])
            ("put" code nil nil [16490 16540])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [16542 16675])
            ("put" code nil nil [16676 16727])
            ("let" code nil nil [16792 17357])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17361 17540])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17542 17739])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [17741 17908])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17910 18107])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18109 18318])
            ("bound-and-true-p" function (:arguments ("var")) nil [18320 18450])
            ("bindings--define-key" code nil nil [18569 18790])
            ("bindings--define-key" code nil nil [18791 19039])
            ("bindings--define-key" code nil nil [19040 19305])
            ("bindings--define-key" code nil nil [19306 19535])
            ("bindings--define-key" code nil nil [19536 19775])
            ("bindings--define-key" code nil nil [19776 19950])
            ("bindings--define-key" code nil nil [19951 20156])
            ("bindings--define-key" code nil nil [20157 20451])
            ("bindings--define-key" code nil nil [20452 20692])
            ("bindings--define-key" code nil nil [20693 20893])
            ("bindings--define-key" code nil nil [20894 21084])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [21086 21325])
            ("minor-mode-alist" variable nil nil [21327 21624])
            ("put" code nil nil [21640 21687])
            ("setq" code nil nil [21758 21965])
            ("setq" code nil nil [22250 23512])
            ("setq" code nil nil [23548 23690])
            ("setq" code nil nil [23804 24193])
            ("make-variable-buffer-local" code nil nil [24195 24241])
            ("mapc" code nil nil [24497 24863])
            ("base64" package nil nil [24921 24938])
            ("md5" package nil nil [24939 24953])
            ("sha1" package nil nil [24954 24969])
            ("overlay" package nil nil [24970 25018])
            ("text-properties" package nil nil [25019 25089])
            ("define-key" code nil nil [25091 25133])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25135 25514])
            ("garbage-collect" code nil nil [25632 25649])
            ("setq" code nil nil [25653 25690])
            ("make-variable-buffer-local" code nil nil [25692 25753])
            ("global-set-key" code nil nil [25771 25823])
            ("global-set-key" code nil nil [25824 25878])
            ("global-set-key" code nil nil [26074 26126])
            ("global-set-key" code nil nil [26127 26173])
            ("global-set-key" code nil nil [26174 26225])
            ("put" code nil nil [26311 26346])
            ("visual-order-cursor-movement" variable nil nil [26399 27103])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27105 27861])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27863 28618])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28620 29234])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29236 29849])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [29851 29926])
            ("define-key" code nil nil [29927 29964])
            ("define-key" code nil nil [29966 30011])
            ("define-key" code nil nil [30012 30046])
            ("define-key" code nil nil [30060 30114])
            ("define-key" code nil nil [30115 30160])
            ("substitute-key-definition" code nil nil [30269 30337])
            ("define-key" code nil nil [30339 30378])
            ("define-key" code nil nil [30379 30420])
            ("define-key" code nil nil [30421 30460])
            ("define-key" code nil nil [30461 30506])
            ("define-key" code nil nil [30507 30551])
            ("define-key" code nil nil [30552 30602])
            ("define-key" code nil nil [30603 30648])
            ("define-key" code nil nil [30649 30698])
            ("define-key" code nil nil [30699 30739])
            ("define-key" code nil nil [30740 30777])
            ("define-key" code nil nil [30778 30822])
            ("define-key" code nil nil [30823 30871])
            ("define-key" code nil nil [30872 30913])
            ("define-key" code nil nil [30987 31031])
            ("define-key" code nil nil [31098 31151])
            ("define-key" code nil nil [31185 31238])
            ("define-key" code nil nil [31239 31271])
            ("put" code nil nil [31272 31314])
            ("define-key" code nil nil [31385 31422])
            ("define-key" code nil nil [31423 31459])
            ("define-key" code nil nil [31638 31677])
            ("define-key" code nil nil [31678 31727])
            ("define-key" code nil nil [31728 31773])
            ("define-key" code nil nil [31775 31818])
            ("define-key" code nil nil [31819 31864])
            ("define-key" code nil nil [31865 31915])
            ("define-key" code nil nil [31916 31962])
            ("define-key" code nil nil [31963 32011])
            ("define-key" code nil nil [32012 32063])
            ("let" code nil nil [32065 32952])
            ("define-key" code nil nil [32954 33004])
            ("let" code nil nil [33005 33119])
            ("define-key" code nil nil [33120 33163])
            ("let" code nil nil [33190 33318])
            ("define-key" code nil nil [33319 33369])
            ("let" code nil nil [33401 33526])
            ("define-key" code nil nil [33527 33580])
            ("define-key" code nil nil [33636 33688])
            ("define-key" code nil nil [33971 34014])
            ("define-key" code nil nil [34016 34057])
            ("define-key" code nil nil [34058 34101])
            ("define-key" code nil nil [34102 34142])
            ("define-key" code nil nil [34143 34188])
            ("define-key" code nil nil [34189 34225])
            ("define-key" code nil nil [34226 34260])
            ("define-key" code nil nil [34311 34359])
            ("define-key" code nil nil [34417 34466])
            ("put" code nil nil [34467 34518])
            ("define-key" code nil nil [34520 34574])
            ("define-key" code nil nil [34575 34621])
            ("define-key" code nil nil [34622 34669])
            ("define-key" code nil nil [34670 34717])
            ("define-key" code nil nil [34719 34760])
            ("define-key" code nil nil [34761 34806])
            ("define-key" code nil nil [34807 34853])
            ("define-key" code nil nil [34854 34908])
            ("define-key" code nil nil [34909 34957])
            ("define-key" code nil nil [34959 34997])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [34999 35073])
            ("define-key" code nil nil [35074 35107])
            ("define-key" code nil nil [35109 35148])
            ("define-key" code nil nil [35149 35188])
            ("define-key" code nil nil [35189 35228])
            ("define-key" code nil nil [35229 35269])
            ("define-key" code nil nil [35270 35310])
            ("define-key" code nil nil [35311 35355])
            ("define-key" code nil nil [35356 35400])
            ("define-key" code nil nil [35401 35445])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [35447 35527])
            ("define-key" code nil nil [35528 35563])
            ("define-key" code nil nil [35565 35600])
            ("define-key" code nil nil [35601 35647])
            ("define-key" code nil nil [35648 35694])
            ("define-key" code nil nil [35695 35756])
            ("define-key" code nil nil [35757 35812])
            ("define-key" code nil nil [35813 35861])
            ("define-key" code nil nil [35862 35913])
            ("define-key" code nil nil [35914 35978])
            ("define-key" code nil nil [36088 36144])
            ("define-key" code nil nil [36145 36191])
            ("define-key" code nil nil [36388 36445])
            ("define-key" code nil nil [36446 36501])
            ("define-key" code nil nil [36502 36556])
            ("define-key" code nil nil [36557 36624])
            ("define-key" code nil nil [36625 36690])
            ("define-key" code nil nil [36691 36733])
            ("define-key" code nil nil [36734 36778])
            ("define-key" code nil nil [36779 36823])
            ("define-key" code nil nil [36824 36866])
            ("define-key" code nil nil [36867 36920])
            ("define-key" code nil nil [36921 36971])
            ("define-key" code nil nil [36972 37023])
            ("define-key" code nil nil [37024 37076])
            ("define-key" code nil nil [37077 37124])
            ("put" code nil nil [37125 37155])
            ("define-key" code nil nil [37156 37202])
            ("define-key" code nil nil [37203 37257])
            ("define-key" code nil nil [37258 37310])
            ("define-key" code nil nil [37311 37370])
            ("define-key" code nil nil [37371 37429])
            ("define-key" code nil nil [37430 37488])
            ("define-key" code nil nil [37489 37537])
            ("define-key" code nil nil [37538 37585])
            ("define-key" code nil nil [37586 37646])
            ("define-key" code nil nil [37647 37705])
            ("define-key" code nil nil [37706 37759])
            ("define-key" code nil nil [37760 37827])
            ("define-key" code nil nil [37828 37894])
            ("define-key" code nil nil [38006 38065])
            ("define-key" code nil nil [38066 38115])
            ("define-key" code nil nil [38116 38166])
            ("define-key" code nil nil [38167 38207])
            ("define-key" code nil nil [38306 38358])
            ("define-key" code nil nil [38359 38413])
            ("define-key" code nil nil [38414 38458])
            ("define-key" code nil nil [38459 38496])
            ("define-key" code nil nil [38497 38552])
            ("define-key" code nil nil [38553 38609])
            ("define-key" code nil nil [38625 38667])
            ("define-key" code nil nil [38899 38946])
            ("define-key" code nil nil [38947 38994])
            ("define-key" code nil nil [38995 39052])
            ("let" code nil nil [43013 43859])
            ("define-key" code nil nil [43861 43910])
            ("define-key" code nil nil [43911 43957])
            ("define-key" code nil nil [43958 44007])
            ("define-key" code nil nil [45174 45220])
            ("define-key" code nil nil [45342 45389])
            ("define-key" code nil nil [45391 45439])
            ("define-key" code nil nil [45441 45488])
            ("define-key" code nil nil [45489 45530])
            ("define-key" code nil nil [45531 45575])
            ("define-key" code nil nil [45576 45622])
            ("define-key" code nil nil [45624 45662])
            ("define-key" code nil nil [45663 45712])
            ("define-key" code nil nil [45713 45765])
            ("define-key" code nil nil [45766 45812])
            ("define-key" code nil nil [45813 45856])
            ("define-key" code nil nil [45857 45906])
            ("define-key" code nil nil [45908 45943])
            ("define-key" code nil nil [45944 45982])
            ("define-key" code nil nil [45983 46022])
            ("define-key" code nil nil [46023 46058])
            ("define-key" code nil nil [46059 46106])
            ("define-key" code nil nil [46108 46153])
            ("define-key" code nil nil [46154 46193])
            ("define-key" code nil nil [46194 46239])
            ("define-key" code nil nil [46240 46290])
            ("defalias" code nil nil [46292 46353])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [46354 46469])
            ("define-key" code nil nil [46470 46530])
            ("global-set-key" code nil nil [46532 46571])
            ("define-key" code nil nil [46572 46614])
            ("global-set-key" code nil nil [46615 46653])
            ("define-key" code nil nil [46654 46696])
            ("global-set-key" code nil nil [46773 46812])
            ("global-set-key" code nil nil [46813 46851])
            ("global-set-key" code nil nil [46911 46949])
            ("global-set-key" code nil nil [46950 47000])
            ("global-set-key" code nil nil [47061 47101])
            ("global-set-key" code nil nil [47103 47148])
            ("define-key" code nil nil [47149 47194])
            ("global-set-key" code nil nil [47195 47239])
            ("define-key" code nil nil [47240 47284])
            ("global-set-key" code nil nil [47285 47333])
            ("define-key" code nil nil [47334 47382])
            ("global-set-key" code nil nil [47383 47424])
            ("define-key" code nil nil [47425 47466])
            ("global-set-key" code nil nil [47467 47517])
            ("define-key" code nil nil [47518 47568])
            ("global-set-key" code nil nil [47569 47613])
            ("define-key" code nil nil [47614 47658])
            ("define-key" code nil nil [47660 47701])
            ("define-key" code nil nil [47702 47744])
            ("define-key" code nil nil [47745 47790])
            ("define-key" code nil nil [47791 47829])
            ("define-key" code nil nil [47830 47870])
            ("define-key" code nil nil [47871 47909])
            ("define-key" code nil nil [47910 47948])
            ("define-key" code nil nil [48166 48217])
            ("define-key" code nil nil [48218 48272])
            ("define-key" code nil nil [48273 48314])
            ("define-key" code nil nil [48315 48357])
            ("define-key" code nil nil [48358 48405])
            ("define-key" code nil nil [48406 48447])
            ("define-key" code nil nil [48448 48487])
            ("define-key" code nil nil [48488 48532])
            ("define-key" code nil nil [48533 48577])
            ("define-key" code nil nil [48578 48632])
            ("define-key" code nil nil [48634 48679])
            ("define-key" code nil nil [48681 48721])
            ("define-key" code nil nil [48722 48777])
            ("define-key" code nil nil [48778 48832])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [48836 49892])
            ("define-key" code nil nil [49893 49931])
            ("define-key" code nil nil [49933 49973])
            ("define-key" code nil nil [49974 50017])
            ("define-key" code nil nil [50020 50064])
            ("define-key" code nil nil [50065 50108])
            ("define-key" code nil nil [50109 50149])
            ("define-key" code nil nil [50150 50193])
            ("define-key" code nil nil [50194 50236])
            ("define-key" code nil nil [50237 50276])
            ("define-key" code nil nil [50277 50330])
            ("define-key" code nil nil [50332 50373])
            ("define-key" code nil nil [50374 50414])
            ("define-key" code nil nil [50415 50455])
            ("define-key" code nil nil [50456 50500])
            ("define-key" code nil nil [50501 50544])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [50593 50665])
            ("define-key" code nil nil [50666 50703])
            ("define-key" code nil nil [50705 50749])
            ("define-key" code nil nil [50750 50797])
            ("define-key" code nil nil [50798 50844])
            ("define-key" code nil nil [50845 50889])
            ("define-key" code nil nil [50890 50945])
            ("define-key" code nil nil [50946 50999])
            ("define-key" code nil nil [51061 51115])
            ("define-key" code nil nil [51116 51158])
            ("define-key" code nil nil [51159 51201])
            ("define-key" code nil nil [51418 51462])
            ("define-key" code nil nil [51463 51504])
            ("define-key" code nil nil [51505 51548])
            ("define-key" code nil nil [51550 51584])
            ("define-key" code nil nil [51586 51632])
            ("define-key" code nil nil [51634 51697])
            ("define-key" code nil nil [51698 51762])
            ("define-key" code nil nil [51783 51831])
            ("define-key" code nil nil [51832 51880]))          
      :file "bindings.el"
      :pointmax 52012
      :fsize 52011
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "allout-widgets.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("allout" include nil nil [2885 2902])
            ("widget" include nil nil [2903 2920])
            ("wid-edit" include nil nil [2921 2940])
            ("progn" code nil nil [2963 3016])
            ("allout-widgets-mode" variable nil nil [3433 3514])
            ("make-variable-buffer-local" code nil nil [3515 3564])
            ("allout-widgets" customgroup (:user-visible-flag t) nil [3660 3863])
            ("allout-widgets-developer" customgroup (:user-visible-flag t) nil [3906 4028])
            ("allout-widgets-mode-enable" function nil nil [4139 4447])
            ("allout-widgets-mode-disable" function nil nil [4484 4800])
            ("allout-widgets-setup" function (:arguments ("varname" "value")) nil [4861 5189])
            ("allout-widgets-auto-activation" variable nil nil [5244 5872])
            ("allout-widgets-icons-dark-subdir" variable (:default-value "icons/allout-widgets/dark-bg/") nil [6881 7094])
            ("allout-widgets-icons-light-subdir" variable (:default-value "icons/allout-widgets/light-bg/") nil [7137 7353])
            ("allout-widgets-icon-types" variable (:default-value (quote (xpm png))) nil [7388 7583])
            ("allout-widgets-theme-dark-background" variable (:default-value "allout-dark-bg") nil [7657 7852])
            ("allout-widgets-theme-light-background" variable (:default-value "allout-light-bg") nil [7900 8098])
            ("allout-widgets-item-image-properties-emacs" variable (:default-value (quote (:ascent center :mask (heuristic t)))) nil [8151 8364])
            ("allout-widgets-item-image-properties-xemacs" variable nil nil [8418 8590])
            ("allout-widgets-run-unit-tests-on-load" variable nil nil [8656 9154])
            ("allout-widgets-time-decoration-activity" variable nil nil [9204 9559])
            ("allout-widgets-hook-error-post-time" variable nil nil [9607 9869])
            ("allout-widgets-maintain-tally" variable nil nil [9913 10313])
            ("allout-widgets-tally" variable nil nil [10314 10584])
            ("make-variable-buffer-local" code nil nil [10585 10635])
            ("allout-widgets-mode-inhibit" variable nil nil [10636 10672])
            ("allout-widgets-tally-string" function nil nil [10729 11351])
            ("allout-widgets-track-decoration" variable nil nil [11397 11761])
            ("make-variable-buffer-local" code nil nil [11762 11823])
            ("allout-widgets-version" variable (:default-value "1.0") nil [11982 12077])
            ("allout-widgets-version" function
               (:user-visible-flag t
                :arguments ("here"))
                nil [12111 12400])
            ("allout-widgets-mode-inhibit" variable nil nil [12439 12958])
            ("put" code nil nil [12974 13102])
            ("make-variable-buffer-local" code nil nil [13103 13160])
            ("allout-inhibit-body-modification-hook" variable nil nil [13209 13512])
            ("make-variable-buffer-local" code nil nil [13513 13580])
            ("allout-widgets-icons-cache" variable nil nil [13618 13976])
            ("allout-widgets-unset-inhibit-read-only" variable nil nil [14026 14203])
            ("allout-widgets-reenable-before-change-handler" variable nil nil [14260 14488])
            ("allout-unresolved-body-mod-workroster" variable (:default-value (make-hash-table :size 16)) nil [14562 14791])
            ("allout-structure-unruly-deletion-message" variable (:default-value "Unruly edit prevented --
To change the bullet character: \\[allout-rebullet-current-heading]
To promote this item: \\[allout-shift-out]
To demote it: \\[allout-shift-in]
To delete it and offspring: \\[allout-kill-topic]
See \\[describe-mode] for many more options.") nil [14843 15303])
            ("allout-widgets-changes-record" variable nil nil [15344 15780])
            ("make-variable-buffer-local" code nil nil [15781 15840])
            ("allout-widgets-undo-exposure-record" variable nil nil [15887 16086])
            ("make-variable-buffer-local" code nil nil [16087 16152])
            ("allout-widgets-last-hook-error" variable nil nil [16194 16299])
            ("allout-widgets-adjust-message-length-threshold" variable (:default-value 100) nil [16361 16502])
            ("allout-widgets-adjust-message-size-threshold" variable (:default-value 10000) nil [16564 16703])
            ("allout-undo-exposure-in-progress" variable nil nil [16755 16868])
            ("allout-escaped-prefix-regexp" variable nil nil [16953 17106])
            ("make-variable-buffer-local" code nil nil [17107 17165])
            ("allout-item-icon-keymap" variable (:default-value (let ((km (make-sparse-keymap))) (dolist (digit (quote ("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))) (define-key km digit (quote digit-argument))) (define-key km "-" (quote negative-argument)) (define-key km [(mouse-1)] (lambda nil (interactive) nil)) (define-key km [(mouse-2)] (lambda nil (interactive) nil)) (define-key km [t] (quote allout-item-icon-key-handler)) km)) nil [17235 18119])
            ("allout-item-body-keymap" variable (:default-value (let ((km (make-sparse-keymap)) (local-map (current-local-map))) (if local-map (set-keymap-parent km local-map)) km)) nil [18154 18622])
            ("make-variable-buffer-local" code nil nil [18623 18676])
            ("allout-body-span-category" variable nil nil [18713 18808])
            ("allout-cue-span-keymap" variable (:default-value (let ((km (make-sparse-keymap))) (set-keymap-parent km allout-item-icon-keymap) km)) nil [18842 19047])
            ("allout-escapes-category" variable nil nil [19082 19223])
            ("allout-guides-category" variable nil nil [19257 19351])
            ("allout-guides-span-category" variable nil nil [19390 19498])
            ("allout-icon-span-category" variable nil nil [19535 19641])
            ("allout-cue-span-category" variable nil nil [19677 20017])
            ("allout-span-to-category" variable (:default-value (quote ((:guides-span . allout-guides-span-category) (:cue-span . allout-cue-span-category) (:icon-span . allout-icon-span-category) (:body-span . allout-body-span-category)))) nil [20052 20336])
            ("allout-trailing-category" variable nil nil [20372 20481])
            ("allout-widgets-last-decoration-timing" variable nil nil [20501 20950])
            ("make-variable-buffer-local" code nil nil [20951 21018])
            ("define-minor-mode" code nil nil [21107 27242])
            ("allout-widgets-mode-off" function nil nil [27276 27383])
            ("allout-widgets-mode-on" function nil nil [27417 27521])
            ("allout-setup-text-properties" function nil nil [27563 29732])
            ("allout-widgets-prepopulate-buffer" function nil nil [29779 30132])
            ("allout-container-item-widget" variable nil nil [30189 30389])
            ("make-variable-buffer-local" code nil nil [30390 30448])
            ("allout-widgets-pre-command-business" function (:arguments ("_recursing")) nil [30586 30711])
            ("allout-widgets-post-command-business" function (:arguments ("_recursing")) nil [30781 36556])
            ("allout-widgets-before-change-handler" function (:arguments ("beg" "end")) nil [36636 38054])
            ("allout-widgets-after-change-handler" function (:arguments ("_beg" "_end" "_prelength")) nil [38101 38244])
            ("allout-current-decorated-p" function nil nil [38284 38551])
            ("allout-widgets-hook-error-handler" function (:arguments ("mode" "args")) nil [38596 39865])
            ("allout-widgets-adjusting-message" function (:arguments ("message")) nil [39920 41659])
            ("allout-widgets-changes-dispatcher" function nil nil [41706 42946])
            ("allout-widgets-exposure-change-recorder" function (:arguments ("from" "to" "flag")) nil [43011 43274])
            ("allout-widgets-exposure-change-processor" function (:arguments ("changes")) nil [43335 45859])
            ("allout-widgets-additions-recorder" function (:arguments ("from" "to")) nil [45914 46307])
            ("allout-widgets-additions-processor" function (:arguments ("changes")) nil [46362 47938])
            ("allout-widgets-deletions-recorder" function (:arguments ("depth" "from")) nil [47996 48407])
            ("allout-widgets-deletions-processor" function (:arguments ("changes")) nil [48462 49087])
            ("allout-widgets-shifts-recorder" function (:arguments ("shifted-amount" "at")) nil [49149 49575])
            ("allout-widgets-shifts-processor" function (:arguments ("changes")) nil [49627 50030])
            ("allout-widgets-after-copy-or-kill-function" function nil nil [50086 50362])
            ("allout-widgets-after-undo-function" function nil nil [50410 50674])
            ("allout-widgets-exposure-undo-recorder" function (:arguments ("widget")) nil [50743 51190])
            ("allout-widgets-exposure-undo-processor" function nil nil [51242 53261])
            ("allout-chart-exposure-contour-by-icon" function (:arguments ("from-depth")) nil [53332 55054])
            ("allout-range-overlaps" function (:arguments ("from" "to" "ranges")) nil [55103 58537])
            ("allout-test-range-overlaps" function nil nil [58577 60853])
            ("allout-widgetize-buffer" function
               (:user-visible-flag t
                :arguments ("doing"))
                nil [60905 61961])
            ("define-widget" code nil nil [62027 65116])
            ("allout-new-item-widget" function nil nil [65151 65579])
            ("allout-decorate-item-and-context" function (:arguments ("item-widget" "redecorate" "blank-container" "_parent")) nil [65758 70035])
            ("allout-redecorate-item" function (:arguments ("item-widget")) nil [70075 70926])
            ("allout-redecorate-visible-subtree" function (:arguments ("parent-widget" "depth" "chart")) nil [71061 73543])
            ("allout-parse-item-at-point" function (:arguments ("item-widget" "at-beginning" "blank-container")) nil [73691 77432])
            ("allout-set-boundary-marker" function (:arguments ("_boundary" "position" "current-marker")) nil [77514 78300])
            ("allout-decorate-item-span" function (:arguments ("item-widget")) nil [78350 78956])
            ("allout-decorate-item-guides" function (:arguments ("item-widget" "parent-widget" "has-successor")) nil [79083 82902])
            ("allout-decorate-item-icon" function (:arguments ("item-widget")) nil [82952 86886])
            ("allout-decorate-item-cue" function (:arguments ("item-widget")) nil [86935 87641])
            ("allout-decorate-item-body" function (:arguments ("item-widget" "force")) nil [87707 88257])
            ("allout-item-actual-position" function (:arguments ("item-widget" "field")) nil [88315 89726])
            ("allout-widgets-undecorate-region" function (:arguments ("start" "end")) nil [89807 90535])
            ("allout-widgets-undecorate-text" function (:arguments ("text")) nil [90583 90908])
            ("allout-widgets-undecorate-item" function (:arguments ("item-widget" "no-expose")) nil [90983 92284])
            ("allout-item-span" function (:arguments ("item-widget" "start" "end")) nil [92378 93561])
            ("allout-item-element-span-is" function (:arguments ("item-widget" "element" "start" "end" "force")) nil [93681 95042])
            ("allout-get-item-widget" function (:arguments ("container")) nil [95152 96142])
            ("allout-get-or-create-item-widget" function (:arguments ("redecorate" "blank-container")) nil [96224 97473])
            ("allout-get-or-create-parent-widget" function (:arguments ("redecorate")) nil [97541 98211])
            ("allout-body-modification-handler" function (:arguments ("_beg" "_end")) nil [98293 99200])
            ("allout-graphics-modification-handler" function (:arguments ("beg" "_end")) nil [99258 100257])
            ("allout-item-icon-key-handler" function (:user-visible-flag t) nil [100299 100641])
            ("allout-item-location" function (:arguments ("item-widget")) nil [100700 100845])
            ("allout-fetch-icon-image" function (:arguments ("name")) nil [100909 102357])
            ("allout-elapsed-time-seconds" function (:arguments ("end" "start")) nil [102425 102615])
            ("defalias" code nil nil [102663 102837])
            ("defalias" code nil nil [102872 103027])
            ("allout-widgets-copy-list" function (:arguments ("list")) nil [103068 103432])
            ("allout-widgets-count-buttons-in-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [103492 104128])
            ("allout-widgets-run-unit-tests" function nil nil [104153 104338])
            ("when" code nil nil [104340 104418])
            ("allout-widgets" package nil nil [104435 104460]))          
      :file "allout-widgets.el"
      :pointmax 104553
      :fsize 104552
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 3016 . 3017) (symbol 2943 . 2960) (open-paren 2942 . 2943)))
    (semanticdb-table "widget.el"
      :file "widget.el"
      :fsize 3826
      :lastmodtime '(21788 61018 0 0))
    (semanticdb-table "wid-edit.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1860 1877])
            ("widget-event-point" function (:arguments ("event")) nil [1899 2033])
            ("widget-button-release-event-p" function (:arguments ("event")) nil [2035 2322])
            ("widgets" customgroup (:user-visible-flag t) nil [2344 2555])
            ("widget-documentation" customgroup (:user-visible-flag t) nil [2557 2672])
            ("widget-faces" customgroup (:user-visible-flag t) nil [2674 2773])
            ("widget-documentation-face" variable (:default-value (quote widget-documentation)) nil [2775 2954])
            ("widget-documentation" variable
               (:default-value (quote ((((class color) (background dark)) (:foreground "lime green")) (((class color) (background light)) (:foreground "dark green")) (t nil)))
                :type "face")
                nil [2956 3246])
            ("define-obsolete-face-alias" code nil nil [3247 3333])
            ("widget-button-face" variable (:default-value (quote widget-button)) nil [3335 3486])
            ("widget-button" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [3488 3590])
            ("define-obsolete-face-alias" code nil nil [3591 3661])
            ("widget-mouse-face" variable (:default-value (quote highlight)) nil [3663 3803])
            ("widget-field" variable
               (:default-value (quote ((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [3999 4333])
            ("define-obsolete-face-alias" code nil nil [4334 4402])
            ("widget-single-line-field" variable
               (:default-value (quote ((((type tty)) :background "green3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [4404 4827])
            ("define-obsolete-face-alias" code nil nil [4828 4922])
            ("widget-princ-to-string" function (:arguments ("object")) nil [5417 5654])
            ("widget-clear-undo" function nil nil [5656 5780])
            ("widget-menu-max-size" variable (:default-value 40) nil [5782 5951])
            ("widget-menu-max-shortcuts" variable (:default-value 40) nil [5953 6161])
            ("widget-menu-minibuffer-flag" variable nil nil [6163 6365])
            ("widget-choose" function (:arguments ("title" "items" "event")) nil [6367 9983])
            ("widget-field-add-space" variable (:constant-flag t) nil [10146 10334])
            ("widget-field-use-before-change" variable (:default-value t) nil [10336 10564])
            ("widget-specify-field" function (:arguments ("widget" "from" "to")) nil [10566 12678])
            ("widget-specify-secret" function (:arguments ("field")) nil [12680 13302])
            ("widget-specify-button" function (:arguments ("widget" "from" "to")) nil [13304 14614])
            ("widget-mouse-help" function (:arguments ("_window" "overlay" "_point")) nil [14616 14973])
            ("widget-specify-sample" function (:arguments ("widget" "from" "to")) nil [14975 15283])
            ("widget-specify-doc" function (:arguments ("widget" "from" "to")) nil [15285 15626])
            ("widget-specify-insert" function (:arguments ("form")) nil [15628 15915])
            ("widget-inactive" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15917 16026])
            ("define-obsolete-face-alias" code nil nil [16027 16103])
            ("widget-specify-inactive" function (:arguments ("widget" "from" "to")) nil [16105 16681])
            ("widget-overlay-inactive" function (:arguments ("_junk")) nil [16683 16846])
            ("widget-specify-active" function (:arguments ("widget")) nil [16849 17077])
            ("widget-type" function (:arguments ("widget")) nil [17103 17203])
            ("widgetp" function (:arguments ("widget")) nil [17220 17426])
            ("widget-get-indirect" function (:arguments ("widget" "property")) nil [17428 17701])
            ("widget-member" function (:arguments ("widget" "property")) nil [17703 17939])
            ("widget-value" function (:arguments ("widget")) nil [17941 18089])
            ("widget-value-set" function (:arguments ("widget" "value")) nil [18091 18266])
            ("widget-default-get" function (:arguments ("widget")) nil [18268 18789])
            ("widget-match-inline" function (:arguments ("widget" "vals")) nil [18791 19070])
            ("widget-apply-action" function (:arguments ("widget" "event")) nil [19072 19312])
            ("widget-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [19385 19930])
            ("widget-get-sibling" function (:arguments ("widget")) nil [19932 20344])
            ("widget-map-buttons" function (:arguments ("function" "buffer" "maparg")) nil [20346 21010])
            ("widget-image-directory" variable (:default-value (file-name-as-directory (expand-file-name "images/custom" data-directory))) nil [21025 21302])
            ("widget-image-enable" variable (:default-value t) nil [21304 21451])
            ("widget-image-conversion" variable (:default-value (quote ((xpm ".xpm") (gif ".gif") (png ".png") (jpeg ".jpg" ".jpeg") (xbm ".xbm")))) nil [21453 21802])
            ("widget-image-find" function (:arguments ("image")) nil [21804 22630])
            ("widget-button-pressed-face" variable (:default-value (quote widget-button-pressed)) nil [22632 22807])
            ("widget-image-insert" function (:arguments ("widget" "tag" "image" "_down" "_inactive")) nil [22809 23398])
            ("widget-move-and-invoke" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23400 23677])
            ("widget-button" customgroup (:user-visible-flag t) nil [23693 23781])
            ("widget-button-prefix" variable nil nil [23783 23897])
            ("widget-button-suffix" variable nil nil [23899 24013])
            ("widget-create" function (:arguments ("type" "args")) nil [24053 24269])
            ("widget-create-child-and-convert" function (:arguments ("parent" "type" "args")) nil [24271 24791])
            ("widget-create-child" function (:arguments ("parent" "type")) nil [24793 25182])
            ("widget-create-child-value" function (:arguments ("parent" "type" "value")) nil [25184 25680])
            ("widget-delete" function (:arguments ("widget")) nil [25697 25778])
            ("widget-copy" function (:arguments ("widget")) nil [25780 25886])
            ("widget-convert" function (:arguments ("type" "args")) nil [25888 27774])
            ("widget-insert" function (:arguments ("args")) nil [27791 27981])
            ("widget-convert-text" function (:arguments ("type" "from" "to" "button-from" "button-to" "args")) nil [27983 28783])
            ("widget-convert-button" function (:arguments ("type" "from" "to" "args")) nil [28785 29164])
            ("widget-leave-text" function (:arguments ("widget")) nil [29166 29783])
            ("define-obsolete-function-alias" code nil nil [30026 30112])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [30129 30926])
            ("widget-global-map" variable (:default-value global-map) nil [30928 31025])
            ("make-variable-buffer-local" code nil nil [31026 31073])
            ("widget-field-keymap" variable (:default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" (quote widget-kill-line)) (define-key map "\211" (quote widget-complete)) (define-key map "" (quote widget-field-activate)) (define-key map "" (quote widget-end-of-line)) map)) nil [31075 31575])
            ("widget-text-keymap" variable (:default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" (quote widget-end-of-line)) map)) nil [31577 31928])
            ("widget-field-activate" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [31930 32217])
            ("widget-button-pressed" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:weight bold :underline t))))
                :type "face")
                nil [32219 32461])
            ("define-obsolete-face-alias" code nil nil [32462 32550])
            ("widget-button-click-moves-point" variable nil nil [32552 32749])
            ("widget-button-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [32751 36713])
            ("widget-button-press" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [36715 37048])
            ("widget-tabable-at" function (:arguments ("pos")) nil [37050 37336])
            ("widget-use-overlay-change" variable (:default-value t) nil [37338 37469])
            ("widget-move" function (:arguments ("arg")) nil [37471 38741])
            ("widget-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [38743 38939])
            ("widget-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [38941 39147])
            ("defalias" code nil nil [39270 39325])
            ("widget-end-of-line" function (:user-visible-flag t) nil [39327 39924])
            ("widget-kill-line" function (:user-visible-flag t) nil [39926 40244])
            ("widget-narrow-to-field" function (:user-visible-flag t) nil [40246 40443])
            ("widget-complete" function (:user-visible-flag t) nil [40585 41136])
            ("widget-completions-at-point" function nil nil [41390 41540])
            ("widget-field-new" variable nil nil [41570 41660])
            ("make-variable-buffer-local" code nil nil [41661 41707])
            ("widget-field-list" variable nil nil [41709 41786])
            ("make-variable-buffer-local" code nil nil [41787 41834])
            ("widget-at" function (:arguments ("pos")) nil [41836 41998])
            ("widget-setup" function nil nil [42015 42619])
            ("widget-field-last" variable nil nil [42621 42651])
            ("make-variable-buffer-local" code nil nil [42684 42731])
            ("widget-field-was" variable nil nil [42733 42762])
            ("make-variable-buffer-local" code nil nil [42801 42847])
            ("widget-field-at" function (:arguments ("pos")) nil [42849 43084])
            ("widget-field-buffer" function (:arguments ("widget")) nil [43086 43342])
            ("widget-field-start" function (:arguments ("widget")) nil [43344 43555])
            ("widget-field-end" function (:arguments ("widget")) nil [43557 44903])
            ("widget-field-text-end" function (:arguments ("widget")) nil [44905 45356])
            ("widget-field-find" function (:arguments ("pos")) nil [45358 45785])
            ("widget-before-change" function (:arguments ("from" "to")) nil [45787 46506])
            ("widget-add-change" function nil nil [46508 46722])
            ("widget-after-change" function (:arguments ("from" "to" "_old")) nil [46724 47748])
            ("widget-parent-action" function (:arguments ("widget" "event")) nil [47842 48059])
            ("widget-children-value-delete" function (:arguments ("widget")) nil [48061 48333])
            ("widget-children-validate" function (:arguments ("widget")) nil [48335 48631])
            ("widget-child-value-get" function (:arguments ("widget")) nil [48633 48787])
            ("widget-child-value-inline" function (:arguments ("widget")) nil [48789 48967])
            ("widget-child-validate" function (:arguments ("widget")) nil [48969 49140])
            ("widget-type-value-create" function (:arguments ("widget")) nil [49142 49683])
            ("widget-type-default-get" function (:arguments ("widget")) nil [49685 49921])
            ("widget-type-match" function (:arguments ("widget" "value")) nil [49923 50164])
            ("widget-types-copy" function (:arguments ("widget")) nil [50166 50327])
            ("widget-types-convert-widget" function (:arguments ("widget")) nil [50380 50560])
            ("widget-value-convert-widget" function (:arguments ("widget")) nil [50562 50979])
            ("widget-value-value-get" function (:arguments ("widget")) nil [50981 51091])
            ("define-widget" code nil nil [51120 52209])
            ("widget--completing-widget" variable nil nil [52211 52245])
            ("widget-default-completions" function (:arguments ("widget")) nil [52247 52889])
            ("widget-default-create" function (:arguments ("widget")) nil [52891 55285])
            ("widget-default-format-handler" function (:arguments ("_widget" "escape")) nil [55287 55380])
            ("widget-default-button-face-get" function (:arguments ("widget")) nil [55382 55643])
            ("widget-default-mouse-face-get" function (:arguments ("widget")) nil [55645 55900])
            ("widget-default-sample-face-get" function (:arguments ("widget")) nil [55902 56007])
            ("widget-default-delete" function (:arguments ("widget")) nil [56009 56942])
            ("widget-default-value-set" function (:arguments ("widget" "value")) nil [56944 57800])
            ("widget-default-value-inline" function (:arguments ("widget")) nil [57802 57988])
            ("widget-default-default-get" function (:arguments ("widget")) nil [57990 58080])
            ("widget-default-menu-tag-get" function (:arguments ("widget")) nil [58082 58284])
            ("widget-default-active" function (:arguments ("widget")) nil [58286 58578])
            ("widget-default-deactivate" function (:arguments ("widget")) nil [58580 58768])
            ("widget-default-action" function (:arguments ("widget" "event")) nil [58770 58983])
            ("widget-default-notify" function (:arguments ("widget" "_child" "event")) nil [58985 59118])
            ("widget-default-prompt-value" function (:arguments ("_widget" "prompt" "_value" "_unbound")) nil [59120 59244])
            ("widget-docstring" function (:arguments ("widget")) nil [59246 60259])
            ("define-widget" code nil nil [60285 60633])
            ("widget-item-value-create" function (:arguments ("widget")) nil [60635 60782])
            ("widget-item-match" function (:arguments ("widget" "value")) nil [60784 60904])
            ("widget-item-match-inline" function (:arguments ("widget" "vals")) nil [60906 61230])
            ("widget-sublist" function (:arguments ("list" "start" "end")) nil [61232 61586])
            ("widget-item-action" function (:arguments ("widget" "event")) nil [61588 61709])
            ("widget-push-button-prefix" variable (:default-value "[") nil [61960 62080])
            ("widget-push-button-suffix" variable (:default-value "]") nil [62082 62202])
            ("define-widget" code nil nil [62204 62369])
            ("widget-push-button-value-create" function (:arguments ("widget")) nil [62371 62765])
            ("widget-link-prefix" variable (:default-value "[") nil [62917 63028])
            ("widget-link-suffix" variable (:default-value "]") nil [63030 63141])
            ("define-widget" code nil nil [63143 63344])
            ("define-widget" code nil nil [63375 63470])
            ("widget-info-link-action" function (:arguments ("widget" "_event")) nil [63472 63604])
            ("define-widget" code nil nil [63634 63726])
            ("widget-url-link-action" function (:arguments ("widget" "_event")) nil [63728 63859])
            ("define-widget" code nil nil [63894 64002])
            ("widget-function-link-action" function (:arguments ("widget" "_event")) nil [64004 64152])
            ("define-widget" code nil nil [64187 64295])
            ("widget-variable-link-action" function (:arguments ("widget" "_event")) nil [64297 64445])
            ("define-widget" code nil nil [64476 64565])
            ("widget-file-link-action" function (:arguments ("widget" "_event")) nil [64567 64699])
            ("define-widget" code nil nil [64739 64866])
            ("widget-emacs-library-link-action" function (:arguments ("widget" "_event")) nil [64868 65040])
            ("define-widget" code nil nil [65083 65230])
            ("widget-emacs-commentary-link-action" function (:arguments ("widget" "_event")) nil [65232 65416])
            ("define-widget" code nil nil [65452 66267])
            ("widget-field-history" variable nil nil [66269 66341])
            ("widget-field-prompt-internal" function (:arguments ("_widget" "prompt" "initial" "history")) nil [66343 66584])
            ("widget-field-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [66586 66927])
            ("widget-edit-functions" variable nil nil [66929 66963])
            ("widget-field-action" function (:arguments ("widget" "_event")) nil [66965 67116])
            ("widget-field-validate" function (:arguments ("widget")) nil [67118 67313])
            ("widget-field-value-set" function (:arguments ("widget" "value")) nil [67315 67672])
            ("widget-field-value-create" function (:arguments ("widget")) nil [67674 68509])
            ("widget-field-value-delete" function (:arguments ("widget")) nil [68511 68910])
            ("widget-field-value-get" function (:arguments ("widget" "no-truncate")) nil [68912 69717])
            ("widget-field-match" function (:arguments ("_widget" "value")) nil [69719 69802])
            ("define-widget" code nil nil [69828 69921])
            ("define-widget" code nil nil [69954 70571])
            ("widget-choice-value-create" function (:arguments ("widget")) nil [70573 71593])
            ("widget-choice-default-get" function (:arguments ("widget")) nil [71595 71731])
            ("widget-choice-toggle" variable nil nil [71733 71969])
            ("widget-choice-mouse-down-action" function (:arguments ("widget" "_event")) nil [71971 72590])
            ("widget-choice-action" function (:arguments ("widget" "event")) nil [72592 74035])
            ("widget-choice-validate" function (:arguments ("widget")) nil [74037 74263])
            ("widget-choice-match" function (:arguments ("widget" "value")) nil [74265 74554])
            ("widget-choice-match-inline" function (:arguments ("widget" "vals")) nil [74556 74851])
            ("define-widget" code nil nil [74879 75097])
            ("widget-toggle-value-create" function (:arguments ("widget")) nil [75099 75468])
            ("widget-toggle-action" function (:arguments ("widget" "event")) nil [75470 75696])
            ("define-widget" code nil nil [75726 76139])
            ("widget-checkbox-action" function (:arguments ("widget" "event")) nil [76141 76501])
            ("define-widget" code nil nil [76532 76943])
            ("widget-checklist-value-create" function (:arguments ("widget")) nil [76945 77268])
            ("widget-checklist-add-item" function (:arguments ("widget" "type" "chosen")) nil [77270 78899])
            ("widget-checklist-match" function (:arguments ("widget" "vals")) nil [78901 79082])
            ("widget-checklist-match-inline" function (:arguments ("widget" "vals")) nil [79084 79736])
            ("widget-checklist-match-find" function (:arguments ("widget" "vals")) nil [79738 80399])
            ("widget-checklist-match-up" function (:arguments ("args" "vals")) nil [80401 80684])
            ("widget-checklist-value-get" function (:arguments ("widget")) nil [80686 81049])
            ("widget-checklist-validate" function (:arguments ("widget")) nil [81051 81430])
            ("define-widget" code nil nil [81457 81540])
            ("define-widget" code nil nil [81573 81724])
            ("define-widget" code nil nil [81758 82010])
            ("widget-radio-button-notify" function (:arguments ("widget" "_child" "event")) nil [82012 82161])
            ("define-widget" code nil nil [82202 82752])
            ("widget-radio-value-create" function (:arguments ("widget")) nil [82754 82974])
            ("widget-radio-add-item" function (:arguments ("widget" "type")) nil [82976 84635])
            ("widget-radio-value-get" function (:arguments ("widget")) nil [84637 84799])
            ("widget-radio-chosen" function (:arguments ("widget")) nil [84801 85169])
            ("widget-radio-value-inline" function (:arguments ("widget")) nil [85171 85550])
            ("widget-radio-value-set" function (:arguments ("widget" "value")) nil [85552 86239])
            ("widget-radio-validate" function (:arguments ("widget")) nil [86241 86646])
            ("widget-radio-action" function (:arguments ("widget" "child" "event")) nil [86648 87275])
            ("define-widget" code nil nil [87310 87523])
            ("widget-insert-button-action" function (:arguments ("widget" "_event")) nil [87525 87718])
            ("define-widget" code nil nil [87753 87947])
            ("widget-delete-button-action" function (:arguments ("widget" "_event")) nil [87949 88138])
            ("define-widget" code nil nil [88332 88928])
            ("widget-editable-list-format-handler" function (:arguments ("widget" "escape")) nil [88930 89388])
            ("widget-editable-list-value-create" function (:arguments ("widget")) nil [89390 90055])
            ("widget-editable-list-value-get" function (:arguments ("widget")) nil [90057 90253])
            ("widget-editable-list-match" function (:arguments ("widget" "value")) nil [90255 90462])
            ("widget-editable-list-match-inline" function (:arguments ("widget" "value")) nil [90464 90791])
            ("widget-editable-list-insert-before" function (:arguments ("widget" "before")) nil [90793 91690])
            ("widget-editable-list-delete-at" function (:arguments ("widget" "child")) nil [91692 92642])
            ("widget-editable-list-entry-create" function (:arguments ("widget" "value" "conv")) nil [92644 94389])
            ("define-widget" code nil nil [94416 94823])
            ("widget-group-value-create" function (:arguments ("widget")) nil [94825 95550])
            ("widget-group-default-get" function (:arguments ("widget")) nil [95552 95690])
            ("widget-group-match" function (:arguments ("widget" "vals")) nil [95692 95885])
            ("widget-group-match-inline" function (:arguments ("widget" "vals")) nil [95887 96304])
            ("define-widget" code nil nil [96336 97013])
            ("defalias" code nil nil [97015 97085])
            ("define-widget" code nil nil [97183 97365])
            ("widget-documentation-link-action" function (:arguments ("widget" "_event")) nil [97367 97841])
            ("widget-documentation-links" variable (:default-value t) nil [97843 97989])
            ("widget-documentation-link-regexp" variable (:default-value "`\\([^
`' ]+\\)'") nil [97991 98211])
            ("widget-documentation-link-p" variable (:default-value (quote intern-soft)) nil [98213 98575])
            ("widget-documentation-link-type" variable (:default-value (quote documentation-link)) nil [98577 98743])
            ("widget-documentation-link-add" function (:arguments ("widget" "from" "to")) nil [98745 99515])
            ("define-widget" code nil nil [99557 99780])
            ("widget-documentation-string-value-create" function (:arguments ("widget")) nil [99782 101269])
            ("widget-documentation-string-indent-to" function (:arguments ("col")) nil [101271 101502])
            ("widget-documentation-string-action" function (:arguments ("widget" "_ignore")) nil [101504 101800])
            ("widget-add-documentation-string-button" function (:arguments ("widget" "args")) nil [101802 102724])
            ("define-widget" code nil nil [102750 102863])
            ("widget-const-prompt-value" function (:arguments ("widget" "_prompt" "_value" "_unbound")) nil [102865 102991])
            ("define-widget" code nil nil [102993 103203])
            ("define-widget" code nil nil [103205 103343])
            ("define-widget" code nil nil [103345 103720])
            ("widget-string-prompt-value-history" variable nil nil [103722 103823])
            ("define-widget" code nil nil [103825 104013])
            ("define-widget" code nil nil [104015 104246])
            ("widget-regexp-match" function (:arguments ("_widget" "value")) nil [104248 104427])
            ("widget-regexp-validate" function (:arguments ("widget")) nil [104429 104683])
            ("define-widget" code nil nil [104685 104998])
            ("widget-file-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [105000 105416])
            ("define-widget" code nil nil [106027 106157])
            ("widget-symbol-prompt-value-history" variable nil nil [106159 106260])
            ("define-widget" code nil nil [106262 106793])
            ("widget-symbol-prompt-internal" function (:arguments ("widget" "prompt" "initial" "history")) nil [106795 107113])
            ("widget-function-prompt-value-history" variable nil nil [107115 107220])
            ("define-widget" code nil nil [107222 107865])
            ("widget-variable-prompt-value-history" variable nil nil [107867 107972])
            ("define-widget" code nil nil [107974 108250])
            ("define-widget" code nil nil [108252 108893])
            ("widget-coding-system-prompt-value" function (:arguments ("widget" "prompt" "value" "_unbound")) nil [108895 109281])
            ("widget-coding-system-action" function (:arguments ("widget" "event")) nil [109283 109582])
            ("widget-key-sequence-prompt-value-history" variable nil nil [109637 109750])
            ("widget-key-sequence-default-value" variable (:default-value [ignore]) nil [109752 109848])
            ("widget-key-sequence-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map widget-field-keymap) (define-key map [(control 113)] (quote widget-key-sequence-read-event)) map)) nil [109850 110043])
            ("define-widget" code nil nil [110045 110744])
            ("widget-key-sequence-read-event" function (:arguments ("ev")) nil [110746 111868])
            ("widget-key-sequence-validate" function (:arguments ("widget")) nil [111870 112112])
            ("widget-key-sequence-value-to-internal" function (:arguments ("widget" "value")) nil [112114 112316])
            ("widget-key-sequence-value-to-external" function (:arguments ("_widget" "value")) nil [112318 112526])
            ("define-widget" code nil nil [112530 112938])
            ("widget-sexp-value-to-internal" function (:arguments ("_widget" "value")) nil [112940 113288])
            ("widget-sexp-validate" function (:arguments ("widget")) nil [113290 114281])
            ("widget-sexp-prompt-value-history" variable nil nil [114283 114380])
            ("widget-sexp-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [114382 114804])
            ("define-widget" code nil nil [114806 115186])
            ("widget-restricted-sexp-match" function (:arguments ("widget" "value")) nil [115188 115647])
            ("define-widget" code nil nil [115650 115822])
            ("define-widget" code nil nil [115824 116047])
            ("define-widget" code nil nil [116049 116259])
            ("define-widget" code nil nil [116261 116801])
            ("define-widget" code nil nil [116803 116886])
            ("define-widget" code nil nil [116888 117140])
            ("widget-vector-match" function (:arguments ("widget" "value")) nil [117142 117296])
            ("define-widget" code nil nil [117298 117575])
            ("widget-cons-match" function (:arguments ("widget" "value")) nil [117577 117727])
            ("define-widget" code nil nil [117781 119837])
            ("define-widget" code nil nil [119888 120067])
            ("widget-plist-value-type" variable nil nil [120069 120101])
            ("widget-plist-convert-widget" function (:arguments ("widget")) nil [120121 120653])
            ("widget-plist-convert-option" function (:arguments ("option")) nil [120655 121079])
            ("define-widget" code nil nil [121132 121313])
            ("widget-alist-value-type" variable nil nil [121315 121347])
            ("widget-alist-convert-widget" function (:arguments ("widget")) nil [121367 121899])
            ("widget-alist-convert-option" function (:arguments ("option")) nil [121901 122314])
            ("define-widget" code nil nil [122317 122574])
            ("widget-choice-prompt-value" function (:arguments ("widget" "prompt" "value" "_unbound")) nil [122576 123700])
            ("define-widget" code nil nil [123703 123865])
            ("define-widget" code nil nil [123867 123989])
            ("define-widget" code nil nil [123991 124099])
            ("define-widget" code nil nil [124101 124408])
            ("widget-boolean-prompt-value" function (:arguments ("_widget" "prompt" "_value" "_unbound")) nil [124410 124521])
            ("define-widget" code nil nil [124565 124935])
            ("widget-color-value-create" function (:arguments ("widget")) nil [124937 125175])
            ("widget-color--choose-action" function (:arguments ("widget" "_event")) nil [125177 125603])
            ("widget-color-sample-face-get" function (:arguments ("widget")) nil [125605 125844])
            ("widget-color-action" function (:arguments ("widget" "event")) nil [125846 126190])
            ("widget-color-notify" function (:arguments ("widget" "child" "event")) nil [126192 126446])
            ("widget-echo-help" function (:arguments ("pos")) nil [126468 126765])
            ("wid-edit" package nil nil [126781 126800]))          
      :file "wid-edit.el"
      :pointmax 126828
      :fsize 126827
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "image-file.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("image" include nil nil [1256 1272])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [1290 2068])
            ("image-file-name-regexps" variable nil nil [2085 2796])
            ("image-file-name-regexp" function nil nil [2814 3317])
            ("insert-image-file" function (:arguments ("file" "visit" "beg" "end" "replace")) nil [3335 4866])
            ("image-file-yank-handler" function (:arguments ("string")) nil [5033 5581])
            ("put" code nil nil [5583 5622])
            ("image-file-handler" function (:arguments ("operation" "args")) nil [5623 6060])
            ("image-file-call-underlying" function (:arguments ("function" "operation" "args")) nil [6062 6486])
            ("define-minor-mode" code nil nil [6504 7317])
            ("image-file" package nil nil [7320 7341]))          
      :file "image-file.el"
      :pointmax 7371
      :fsize 7370
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "image.el"
      :file "image.el"
      :fsize 33593
      :lastmodtime '(21710 25077 0 0))
    (semanticdb-table "jka-cmpr-hook.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("compression" customgroup (:user-visible-flag t) nil [1177 1250])
            ("jka-compr" customgroup (:user-visible-flag t) nil [1252 1327])
            ("jka-compr-verbose" variable (:default-value t) nil [1329 1492])
            ("jka-compr-added-to-file-coding-system-alist" variable nil nil [1569 1625])
            ("jka-compr-file-name-handler-entry" variable nil nil [1627 1744])
            ("jka-compr-compression-info-list" variable nil nil [1887 1927])
            ("jka-compr-mode-alist-additions" variable nil nil [1928 1967])
            ("jka-compr-load-suffixes" variable nil nil [1968 2000])
            ("jka-compr-compression-info-list--internal" variable nil nil [2002 2267])
            ("jka-compr-mode-alist-additions--internal" variable nil nil [2269 2531])
            ("jka-compr-load-suffixes--internal" variable nil nil [2533 2774])
            ("jka-compr-build-file-regexp" function nil nil [2778 3306])
            ("jka-compr-info-regexp" function (:arguments ("info")) nil [3386 3451])
            ("jka-compr-info-compress-message" function (:arguments ("info")) nil [3452 3517])
            ("jka-compr-info-compress-program" function (:arguments ("info")) nil [3518 3583])
            ("jka-compr-info-compress-args" function (:arguments ("info")) nil [3584 3649])
            ("jka-compr-info-uncompress-message" function (:arguments ("info")) nil [3650 3715])
            ("jka-compr-info-uncompress-program" function (:arguments ("info")) nil [3716 3781])
            ("jka-compr-info-uncompress-args" function (:arguments ("info")) nil [3782 3847])
            ("jka-compr-info-can-append" function (:arguments ("info")) nil [3848 3913])
            ("jka-compr-info-strip-extension" function (:arguments ("info")) nil [3914 3979])
            ("jka-compr-info-file-magic-bytes" function (:arguments ("info")) nil [3980 4045])
            ("jka-compr-get-compression-info" function (:arguments ("filename")) nil [4048 4580])
            ("jka-compr-install" function nil nil [4582 6305])
            ("jka-compr-installed-p" function nil nil [6307 6686])
            ("jka-compr-update" function nil nil [6688 7216])
            ("jka-compr-set" function (:arguments ("variable" "value")) nil [7218 7343])
            ("jka-compr-compression-info-list" variable (:default-value (mapcar (quote purecopy) (quote (["\\.Z\\'" "compressing" "compress" ("-c") "uncompressing" "gzip" ("-c" "-q" "-d") nil t "\235"] ["\\.bz2\\'" "bzip2ing" "bzip2" nil "bunzip2ing" "bzip2" ("-d") nil t "BZh"] ["\\.tbz2?\\'" "bzip2ing" "bzip2" nil "bunzip2ing" "bzip2" ("-d") nil nil "BZh"] ["\\.\\(?:tgz\\|svgz\\|sifz\\)\\'" "compressing" "gzip" ("-c" "-q") "uncompressing" "gzip" ("-c" "-q" "-d") t nil "\213"] ["\\.g?z\\'" "compressing" "gzip" ("-c" "-q") "uncompressing" "gzip" ("-c" "-q" "-d") t t "\213"] ["\\.lz\\'" "Lzip compressing" "lzip" ("-c" "-q") "Lzip uncompressing" "lzip" ("-c" "-q" "-d") t t "LZIP"] ["\\.lzma\\'" "LZMA compressing" "lzma" ("-c" "-q" "-z") "LZMA uncompressing" "lzma" ("-c" "-q" "-d") t t ""] ["\\.xz\\'" "XZ compressing" "xz" ("-c" "-q") "XZ uncompressing" "xz" ("-c" "-q" "-d") t t "\3757zXZ "] ["\\.txz\\'" "XZ compressing" "xz" ("-c" "-q") "XZ uncompressing" "xz" ("-c" "-q" "-d") t nil "\3757zXZ "] ["\\.dz\\'" nil nil nil "uncompressing" "gzip" ("-c" "-q" "-d") nil t "\213"])))) nil [7490 11976])
            ("jka-compr-mode-alist-additions" variable (:default-value (purecopy (quote (("\\.tgz\\'" . tar-mode) ("\\.tbz2?\\'" . tar-mode) ("\\.txz\\'" . tar-mode))))) nil [11978 12657])
            ("jka-compr-load-suffixes" variable (:default-value (purecopy (quote (".gz")))) nil [12659 13289])
            ("define-minor-mode" code nil nil [13291 14016])
            ("with-auto-compression-mode" function (:arguments ("body")) nil [14018 14457])
            ("put" code nil nil [14555 14593])
            ("put" code nil nil [14594 14737])
            ("when" code nil nil [14760 14814])
            ("jka-cmpr-hook" package nil nil [14816 14840]))          
      :file "jka-cmpr-hook.el"
      :pointmax 14873
      :fsize 14872
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "register.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1199 1216])
            ("cl-defstruct" code nil nil [1230 1562])
            ("cl-defun" code nil nil [1564 2185])
            ("register-alist" variable nil nil [2187 2900])
            ("register" customgroup (:user-visible-flag t) nil [2902 2988])
            ("register-separator" variable nil nil [2990 3386])
            ("register-preview-delay" variable (:default-value 1) nil [3388 3714])
            ("get-register" function (:arguments ("register")) nil [3716 3856])
            ("set-register" function (:arguments ("register" "value")) nil [3858 4190])
            ("register-describe-oneline" function (:arguments ("c")) nil [4192 4511])
            ("register-preview-default" function (:arguments ("r")) nil [4513 4713])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4715 4919])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4921 5529])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5531 6791])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6793 7480])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7482 8126])
            ("set-advertised-calling-convention" code nil nil [8188 8283])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8285 8917])
            ("set-advertised-calling-convention" code nil nil [8979 9073])
            ("make-obsolete" code nil nil [9075 9153])
            ("defalias" code nil nil [9155 9202])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9203 11103])
            ("register-swap-out" function nil nil [11105 11458])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11460 12161])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12163 13016])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13018 13497])
            ("list-registers" function (:user-visible-flag t) nil [13499 13876])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [13878 16079])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16081 17265])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17267 18238])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18240 19241])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19243 20248])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20250 21186])
            ("register" package nil nil [21188 21207]))          
      :file "register.el"
      :pointmax 21234
      :fsize 21233
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1216 . 1217) (symbol 1181 . 1198) (open-paren 1180 . 1181)))
    (semanticdb-table "align.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("align" customgroup (:user-visible-flag t) nil [4413 4514])
            ("align-load-hook" variable nil nil [4537 4656])
            ("align-indent-before-aligning" variable nil nil [4658 4796])
            ("align-default-spacing" variable (:default-value 1) nil [4798 5183])
            ("align-to-tab-stop" variable (:default-value (quote indent-tabs-mode)) nil [5185 5400])
            ("align-region-heuristic" variable (:default-value 500) nil [5402 5914])
            ("align-highlight-change-face" variable (:default-value (quote highlight)) nil [5916 6053])
            ("align-highlight-nochange-face" variable (:default-value (quote secondary-selection)) nil [6055 6207])
            ("align-large-region" variable (:default-value 10000) nil [6209 6407])
            ("align-c++-modes" variable (:default-value (quote (c++-mode c-mode java-mode))) nil [6409 6556])
            ("align-perl-modes" variable (:default-value (quote (perl-mode cperl-mode))) nil [6558 6704])
            ("align-lisp-modes" variable (:default-value (quote (emacs-lisp-mode lisp-interaction-mode lisp-mode scheme-mode))) nil [6706 6889])
            ("align-tex-modes" variable (:default-value (quote (tex-mode plain-tex-mode latex-mode slitex-mode))) nil [6891 7072])
            ("align-text-modes" variable (:default-value (quote (text-mode outline-mode))) nil [7074 7218])
            ("align-dq-string-modes" variable (:default-value (append align-lisp-modes align-c++-modes align-perl-modes (quote (python-mode)))) nil [7220 7441])
            ("align-sq-string-modes" variable (:default-value (append align-perl-modes (quote (python-mode)))) nil [7443 7628])
            ("align-open-comment-modes" variable (:default-value (append align-lisp-modes align-c++-modes align-perl-modes (quote (python-mode makefile-mode)))) nil [7630 7974])
            ("align-region-separate" variable (:default-value "^\\s-*[{}]?\\s-*$") nil [7976 11436])
            ("put" code nil nil [11438 11490])
            ("align-rules-list-type" variable (:default-value (quote (repeat (cons :tag "Alignment rule" (symbol :tag "Title") (cons :tag "Required attributes" (cons :tag "Regexp" (const :tag "(Regular expression to match)" regexp) (choice :value "\\(\\s-+\\)" regexp function)) (repeat :tag "Optional attributes" (choice (cons :tag "Repeat" (const :tag "(Repeat this rule throughout line)" repeat) (boolean :value t)) (cons :tag "Paren group" (const :tag "(Parenthesis group to use)" group) (choice :value 2 integer (repeat integer))) (cons :tag "Modes" (const :tag "(Modes where this rule applies)" modes) (sexp :value (text-mode))) (cons :tag "Case-fold" (const :tag "(Should case be ignored for this rule)" case-fold) (boolean :value t)) (cons :tag "To Tab Stop" (const :tag "(Should rule align to tab stops)" tab-stop) (boolean :value nil)) (cons :tag "Valid" (const :tag "(Return non-nil if rule is valid)" valid) (function :value t)) (cons :tag "Run If" (const :tag "(Return non-nil if rule should run)" run-if) (function :value t)) (cons :tag "Column" (const :tag "(Column to fix alignment at)" column) (choice :value comment-column integer symbol)) (cons :tag "Spacing" (const :tag "(Amount of spacing to use)" spacing) (integer :value 1)) (cons :tag "Justify" (const :tag "(Should text be right justified)" justify) (boolean :value t)) (cons :tag "Separate" (const :tag "(Separation to use for this rule)" separate) (choice :value "^\\s-*$" (const entire) (const group) regexp function))))))))) nil [11492 13437])
            ("align-rules-list" variable (:default-value (\` ((lisp-second-arg (regexp . "\\(^\\s-+[^( 	
]\\|(\\(\\S-+\\)\\s-+\\)\\S-+\\(\\s-+\\)") (group . 3) (modes . align-lisp-modes) (run-if \, (function (lambda nil current-prefix-arg)))) (lisp-alist-dot (regexp . "\\(\\s-*\\)\\.\\(\\s-*\\)") (group 1 2) (modes . align-lisp-modes)) (open-comment (regexp \, (function (lambda (end reverse) (funcall (if reverse (quote re-search-backward) (quote re-search-forward)) (concat "[^ 	
\\\\]" (regexp-quote comment-start) "\\(.+\\)$") end t)))) (modes . align-open-comment-modes)) (c-macro-definition (regexp . "^\\s-*#\\s-*define\\s-+\\S-+\\(\\s-+\\)") (modes . align-c++-modes)) (c-variable-declaration (regexp \, (concat "[*&0-9A-Za-z_]>?[&*]*\\(\\s-+[*&]*\\)" "[A-Za-z_][0-9A-Za-z:_]*\\s-*\\(\\()\\|" "=[^=
].*\\|(.*)\\|\\(\\[.*\\]\\)*\\)?" "\\s-*[;,]\\|)\\s-*$\\)")) (group . 1) (modes . align-c++-modes) (justify . t) (valid \, (function (lambda nil (not (or (save-excursion (goto-char (match-beginning 1)) (backward-word 1) (looking-at "\\(goto\\|return\\|new\\|delete\\|throw\\)")) (if (and (boundp (quote font-lock-mode)) font-lock-mode) (eq (get-text-property (point) (quote face)) (quote font-lock-comment-face)) (eq (caar (c-guess-basic-syntax)) (quote c))))))))) (c-assignment (regexp \, (concat "[^-=!^&*+<>/| 	
]\\(\\s-*[-=!^&*+<>/|]*\\)" "=\\(\\s-*\\)\\([^= 	
]\\|$\\)")) (group 1 2) (modes . align-c++-modes) (justify . t) (tab-stop)) (perl-assignment (regexp \, (concat "[^=!^&*-+<>/| 	
]\\(\\s-*\\)=[~>]?" "\\(\\s-*\\)\\([^>= 	
]\\|$\\)")) (group 1 2) (modes . align-perl-modes) (tab-stop)) (python-assignment (regexp \, (concat "[^=!<> 	
]\\(\\s-*\\)=" "\\(\\s-*\\)\\([^>= 	
]\\|$\\)")) (group 1 2) (modes quote (python-mode)) (tab-stop)) (make-assignment (regexp . "^\\s-*\\w+\\(\\s-*\\):?=\\(\\s-*\\)\\([^	
 \\\\]\\|$\\)") (group 1 2) (modes quote (makefile-mode)) (tab-stop)) (c-comma-delimiter (regexp . ",\\(\\s-*\\)[^/ 	
]") (repeat . t) (modes . align-c++-modes) (run-if \, (function (lambda nil current-prefix-arg)))) (basic-comma-delimiter (regexp . ",\\(\\s-*\\)[^# 	
]") (repeat . t) (modes append align-perl-modes (quote (python-mode))) (run-if \, (function (lambda nil current-prefix-arg)))) (c++-comment (regexp . "\\(\\s-*\\)\\(//.*\\|/\\*.*\\*/\\s-*\\)$") (modes . align-c++-modes) (column . comment-column) (valid \, (function (lambda nil (save-excursion (goto-char (match-beginning 1)) (not (bolp))))))) (c-chain-logic (regexp . "\\(\\s-*\\)\\(&&\\|||\\|\\<and\\>\\|\\<or\\>\\)") (modes . align-c++-modes) (valid \, (function (lambda nil (save-excursion (goto-char (match-end 2)) (looking-at "\\s-*\\(/[*/]\\|$\\)")))))) (perl-chain-logic (regexp . "\\(\\s-*\\)\\(&&\\|||\\|\\<and\\>\\|\\<or\\>\\)") (modes . align-perl-modes) (valid \, (function (lambda nil (save-excursion (goto-char (match-end 2)) (looking-at "\\s-*\\(#\\|$\\)")))))) (python-chain-logic (regexp . "\\(\\s-*\\)\\(\\<and\\>\\|\\<or\\>\\)") (modes quote (python-mode)) (valid \, (function (lambda nil (save-excursion (goto-char (match-end 2)) (looking-at "\\s-*\\(#\\|$\\|\\\\\\)")))))) (c-macro-line-continuation (regexp . "\\(\\s-*\\)\\\\$") (modes . align-c++-modes) (column . c-backslash-column)) (basic-line-continuation (regexp . "\\(\\s-*\\)\\\\$") (modes quote (python-mode makefile-mode))) (tex-record-separator (regexp \, (function (lambda (end reverse) (align-match-tex-pattern "&" end reverse)))) (group 1 2) (modes . align-tex-modes) (repeat . t)) (tex-tabbing-separator (regexp \, (function (lambda (end reverse) (align-match-tex-pattern "\\\\[=>]" end reverse)))) (group 1 2) (modes . align-tex-modes) (repeat . t) (run-if \, (function (lambda nil (eq major-mode (quote latex-mode)))))) (tex-record-break (regexp . "\\(\\s-*\\)\\\\\\\\") (modes . align-tex-modes)) (text-column (regexp . "\\(^\\|\\S-\\)\\([ 	]+\\)\\(\\S-\\|$\\)") (group . 2) (modes . align-text-modes) (repeat . t) (run-if \, (function (lambda nil (and current-prefix-arg (not (eq (quote -) current-prefix-arg))))))) (text-dollar-figure (regexp . "\\$?\\(\\s-+[0-9]+\\)\\.") (modes . align-text-modes) (justify . t) (run-if \, (function (lambda nil (eq (quote -) current-prefix-arg))))) (css-declaration (regexp . "^\\s-*\\w+:\\(\\s-*\\).*;") (group 1) (modes quote (css-mode html-mode)))))) nil [13439 25871])
            ("put" code nil nil [25873 25920])
            ("align-exclude-rules-list-type" variable (:default-value (quote (repeat (cons :tag "Exclusion rule" (symbol :tag "Title") (cons :tag "Required attributes" (cons :tag "Regexp" (const :tag "(Regular expression to match)" regexp) (choice :value "\\(\\s-+\\)" regexp function)) (repeat :tag "Optional attributes" (choice (cons :tag "Repeat" (const :tag "(Repeat this rule throughout line)" repeat) (boolean :value t)) (cons :tag "Paren group" (const :tag "(Parenthesis group to use)" group) (choice :value 2 integer (repeat integer))) (cons :tag "Modes" (const :tag "(Modes where this rule applies)" modes) (sexp :value (text-mode))) (cons :tag "Case-fold" (const :tag "(Should case be ignored for this rule)" case-fold) (boolean :value t))))))))) nil [25922 26829])
            ("align-exclude-rules-list" variable (:default-value (\` ((exc-dq-string (regexp . "\"\\([^\"
]+\\)\"") (repeat . t) (modes . align-dq-string-modes)) (exc-sq-string (regexp . "'\\([^'
]+\\)'") (repeat . t) (modes . align-sq-string-modes)) (exc-open-comment (regexp \, (function (lambda (end reverse) (funcall (if reverse (quote re-search-backward) (quote re-search-forward)) (concat "[^ 	
\\\\]" (regexp-quote comment-start) "\\(.+\\)$") end t)))) (modes . align-open-comment-modes)) (exc-c-comment (regexp . "/\\*\\(.+\\)\\*/") (repeat . t) (modes . align-c++-modes)) (exc-c-func-params (regexp . "(\\([^)
]+\\))") (repeat . t) (modes . align-c++-modes)) (exc-c-macro (regexp . "^\\s-*#\\s-*\\(if\\w*\\|endif\\)\\(.*\\)$") (group . 2) (modes . align-c++-modes))))) nil [26831 27912])
            ("put" code nil nil [27914 27969])
            ("align-mode-rules-list" variable nil nil [27996 28140])
            ("make-variable-buffer-local" code nil nil [28142 28193])
            ("align-mode-exclude-rules-list" variable nil nil [28195 28365])
            ("make-variable-buffer-local" code nil nil [28367 28426])
            ("align-highlight-overlays" variable nil nil [28428 28531])
            ("align-vhdl-rules-list" variable (:default-value (\` ((vhdl-declaration (regexp . "\\(signal\\|variable\\|constant\\)\\(\\s-+\\)\\S-") (group . 2)) (vhdl-case (regexp . "\\(others\\|[^ 	
=<]\\)\\(\\s-*\\)=>\\(\\s-*\\)\\S-") (group 2 3) (valid \, (function (lambda nil (not (string= (downcase (match-string 1)) "others")))))) (vhdl-colon (regexp . "[^ 	
:]\\(\\s-*\\):\\(\\s-*\\)[^=
]") (group 1 2)) (direction (regexp . ":\\s-*\\(in\\|out\\|inout\\|buffer\\)\\(\\s-*\\)") (group . 2)) (sig-assign (regexp . "[^ 	
=<]\\(\\s-*\\)<=\\(\\s-*\\)\\S-") (group 1 2)) (var-assign (regexp . "[^ 	
:]\\(\\s-*\\):=")) (use-entity (regexp . "\\(\\s-+\\)use\\s-+entity"))))) nil [28631 29559])
            ("put" code nil nil [29561 29613])
            ("align-set-vhdl-rules" function nil nil [29615 29763])
            ("add-hook" code nil nil [29765 29813])
            ("add-to-list" code nil nil [29815 29862])
            ("add-to-list" code nil nil [29863 29913])
            ("align" function
               (:user-visible-flag t
                :arguments ("beg" "end" "separate" "rules" "exclude-rules"))
                nil [29951 31840])
            ("align-regexp" function
               (:user-visible-flag t
                :arguments ("beg" "end" "regexp" "group" "spacing" "repeat"))
                nil [31857 34630])
            ("align-entire" function
               (:user-visible-flag t
                :arguments ("beg" "end" "rules" "exclude-rules"))
                nil [34647 35066])
            ("align-current" function
               (:user-visible-flag t
                :arguments ("rules" "exclude-rules"))
                nil [35083 35546])
            ("align-highlight-rule" function
               (:user-visible-flag t
                :arguments ("beg" "end" "title" "rules" "exclude-rules"))
                nil [35563 37253])
            ("align-unhighlight-rule" function (:user-visible-flag t) nil [37270 37546])
            ("align-newline-and-indent" function (:user-visible-flag t) nil [37563 38114])
            ("align-match-tex-pattern" function (:arguments ("regexp" "end" "reverse")) nil [38141 38874])
            ("align-new-section-p" function (:arguments ("beg" "end" "separator")) nil [38876 39684])
            ("align-adjust-col-for-rule" function (:arguments ("column" "_rule" "spacing" "tab-stop")) nil [39686 40132])
            ("align-column" function (:arguments ("pos")) nil [40134 40371])
            ("align-regions" function (:arguments ("regions" "props" "rule" "func")) nil [40373 40878])
            ("align-areas" function (:arguments ("areas" "props" "rule" "func")) nil [40880 44315])
            ("align--set-marker" function (:arguments ("marker-var" "pos" "type")) nil [44317 44614])
            ("align-region" function (:arguments ("beg" "end" "separate" "rules" "exclude-rules" "func")) nil [44616 59279])
            ("align" package nil nil [59294 59310])
            ("run-hooks" code nil nil [59312 59340]))          
      :file "align.el"
      :pointmax 59365
      :fsize 59364
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "composite.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1166 3374])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3392 4587])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4794 5460])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5795 6267])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6724 7034])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7036 9255])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9257 9629])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9631 10595])
            ("decompose-string" function (:arguments ("string")) nil [10597 10769])
            ("compose-chars" function (:arguments ("args")) nil [10771 11647])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11649 13597])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13601 15045])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15047 15958])
            ("global-set-key" code nil nil [15960 16017])
            ("lgstring-header" function (:arguments ("gstring")) nil [16138 16191])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16192 16263])
            ("lgstring-font" function (:arguments ("gstring")) nil [16264 16333])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16334 16410])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16411 16489])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16490 16545])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16546 16605])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16606 16666])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16667 16729])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16730 16806])
            ("lglyph-from" function (:arguments ("glyph")) nil [16808 16853])
            ("lglyph-to" function (:arguments ("glyph")) nil [16854 16897])
            ("lglyph-char" function (:arguments ("glyph")) nil [16898 16943])
            ("lglyph-code" function (:arguments ("glyph")) nil [16944 16989])
            ("lglyph-width" function (:arguments ("glyph")) nil [16990 17036])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17037 17086])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17087 17136])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17137 17184])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17185 17233])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17234 17285])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17287 17380])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17381 17440])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17441 17500])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17501 17563])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17564 17697])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17699 17751])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17753 18252])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18254 18827])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [18829 20043])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20045 25966])
            ("when" code nil nil [26013 26330])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [26332 28275])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [28278 29217])
            ("put" code nil nil [29219 29266])
            ("make-variable-buffer-local" code nil nil [29268 29323])
            ("setq-default" code nil nil [29324 29384])
            ("define-minor-mode" code nil nil [29401 30002])
            ("make-variable-buffer-local" code nil nil [30054 30105])
            ("define-minor-mode" code nil nil [30122 30490])
            ("defalias" code nil nil [30492 30550]))          
      :file "composite.el"
      :pointmax 30582
      :fsize 30581
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "autoarg.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("autoarg-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (dotimes (i 10) (define-key map (\` [(\, (+ 48 i))]) (quote digit-argument)) (define-key map (\` [(control (\, (+ 48 i)))]) (quote self-insert-command))) (define-key map " " (quote autoarg-terminate)) map)) nil [1725 2060])
            ("autoarg-kp-digits" variable (:default-value (let (alist) (dotimes (i 10 alist) (push (cons (intern (format "kp-%d" i)) i) alist)))) nil [2293 2418])
            ("autoarg-kp-digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2420 2949])
            ("autoarg-kp-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (dotimes (i 10) (let ((sym (intern (format "kp-%d" i)))) (define-key map (vector sym) (quote autoarg-kp-digit-argument)))) (define-key map [kp-subtract] (quote negative-argument)) map)) nil [2951 3289])
            ("define-minor-mode" code nil nil [3306 4418])
            ("define-minor-mode" code nil nil [4435 5188])
            ("autoarg-terminate" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [5190 5694])
            ("autoarg" package nil nil [5696 5714]))          
      :file "autoarg.el"
      :pointmax 5741
      :fsize 5740
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "indent.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [1004 1069])
            ("standard-indent" variable (:default-value 4) nil [1071 1205])
            ("indent-line-function" variable (:default-value (quote indent-relative)) nil [1207 1593])
            ("tab-always-indent" variable (:default-value t) nil [1595 2350])
            ("indent-according-to-mode" function (:user-visible-flag t) nil [2353 3439])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3441 5866])
            ("insert-tab" function (:arguments ("arg")) nil [5868 6160])
            ("indent-rigidly--current-indentation" function (:arguments ("beg" "end")) nil [6162 6647])
            ("indent-rigidly-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [left] (quote indent-rigidly-left)) (define-key map [right] (quote indent-rigidly-right)) (define-key map [S-left] (quote indent-rigidly-left-to-tab-stop)) (define-key map [S-right] (quote indent-rigidly-right-to-tab-stop)) map)) nil [6649 7072])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [7074 8937])
            ("indent-rigidly--pop-undo" function nil nil [8939 9226])
            ("indent-rigidly-left" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9228 9476])
            ("indent-rigidly-right" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9478 9728])
            ("indent-rigidly-left-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9730 10128])
            ("indent-rigidly-right-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10130 10526])
            ("indent-line-to" function (:arguments ("column")) nil [10528 11160])
            ("current-left-margin" function nil nil [11162 11566])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [11568 12483])
            ("indent-to-left-margin" function nil nil [12583 12894])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [12896 13460])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [13462 14337])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [14339 14898])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [14900 15568])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [15570 16404])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16406 16887])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16889 17542])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17544 18075])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18077 19091])
            ("indent-region-function" variable nil nil [19093 19275])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [19277 21679])
            ("indent-relative-maybe" function (:user-visible-flag t) nil [21681 21944])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("unindented-ok"))
                nil [21946 23309])
            ("tab-stop-list" variable nil nil [23311 23871])
            ("edit-tab-stops-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edit-tab-stops-note-changes)) (define-key map "" (quote edit-tab-stops-note-changes)) map)) nil [23873 24104])
            ("edit-tab-stops-buffer" variable nil nil [24106 24255])
            ("edit-tab-stops" function (:user-visible-flag t) nil [24257 25280])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [25282 25682])
            ("indent-next-tab-stop" function (:arguments ("column" "prev")) nil [25684 26683])
            ("indent-accumulate-tab-stops" function (:arguments ("limit")) nil [26685 26925])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [26927 27356])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [27358 28218])
            ("define-key" code nil nil [28220 28272])
            ("define-key" code nil nil [28273 28316])
            ("define-key" code nil nil [28317 28360])
            ("define-key" code nil nil [28361 28402]))          
      :file "indent.el"
      :pointmax 28428
      :fsize 28427
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "userlock.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("define-error" code nil nil [1175 1231])
            ("ask-user-about-lock" function (:arguments ("file" "opponent")) nil [1248 2857])
            ("ask-user-about-lock-help" function nil nil [2859 3353])
            ("define-error" code nil nil [3355 3404])
            ("ask-user-about-supersession-threat" function (:arguments ("fn")) nil [3421 4730])
            ("ask-user-about-supersession-help" function nil nil [4732 5389]))          
      :file "userlock.el"
      :pointmax 5417
      :fsize 5416
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "array.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("array-max-column" variable nil nil [1472 1535])
            ("array-columns-per-line" variable nil nil [1536 1607])
            ("array-buffer-column" variable nil nil [1608 1688])
            ("array-line-length" variable nil nil [1689 1752])
            ("array-buffer-line" variable nil nil [1753 1829])
            ("array-lines-per-row" variable nil nil [1830 1895])
            ("array-max-row" variable nil nil [1896 1953])
            ("array-field-width" variable nil nil [1954 2017])
            ("array-row" variable nil nil [2018 2079])
            ("array-column" variable nil nil [2080 2147])
            ("array-rows-numbered" variable nil nil [2148 2215])
            ("array-copy-string" variable nil nil [2216 2283])
            ("array-respect-tabs" variable nil nil [2284 2353])
            ("array-cursor-in-array-range" function nil nil [2392 3208])
            ("array-current-row" function nil nil [3210 3475])
            ("array-current-column" function nil nil [3477 4139])
            ("array-update-array-position" function (:arguments ("a-row" "a-column")) nil [4141 4518])
            ("array-update-buffer-position" function nil nil [4520 4718])
            ("array-what-position" function (:user-visible-flag t) nil [4750 5086])
            ("array-display-local-variables" function (:user-visible-flag t) nil [5088 6094])
            ("array-beginning-of-field" function (:arguments ("go-there")) nil [6133 6529])
            ("array-end-of-field" function (:arguments ("go-there")) nil [6531 6936])
            ("array-move-to-cell" function (:arguments ("a-row" "a-column")) nil [6938 7440])
            ("array-move-to-row" function (:arguments ("a-row")) nil [7442 7980])
            ("array-move-to-column" function (:arguments ("a-column")) nil [7982 8601])
            ("array-move-one-row" function (:arguments ("sign")) nil [8603 9335])
            ("array-move-one-column" function (:arguments ("sign")) nil [9337 10491])
            ("array-normalize-cursor" function nil nil [10493 10887])
            ("array-maybe-scroll-horizontally" function nil nil [10889 11640])
            ("array-next-row" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11669 12164])
            ("array-previous-row" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12166 12369])
            ("array-forward-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12371 12958])
            ("array-backward-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12960 13252])
            ("array-goto-cell" function
               (:user-visible-flag t
                :arguments ("a-row" "a-column"))
                nil [13254 13525])
            ("array-field-string" function nil nil [13563 13832])
            ("array-copy-once-vertically" function (:arguments ("sign")) nil [13834 14413])
            ("array-copy-once-horizontally" function (:arguments ("sign")) nil [14415 15046])
            ("array-copy-to-row" function (:arguments ("a-row")) nil [15048 15715])
            ("array-copy-to-column" function (:arguments ("a-column")) nil [15717 16403])
            ("array-copy-to-cell" function (:arguments ("a-row" "a-column")) nil [16405 16814])
            ("array-copy-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16846 17398])
            ("array-copy-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17400 17588])
            ("array-copy-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17590 18184])
            ("array-copy-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18186 18407])
            ("array-copy-column-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18409 19254])
            ("array-copy-column-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19256 19487])
            ("array-copy-row-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19489 20781])
            ("array-copy-row-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20783 20986])
            ("array-fill-rectangle" function (:user-visible-flag t) nil [20988 23016])
            ("array-make-template" function (:user-visible-flag t) nil [23056 24269])
            ("array-reconfigure-rows" function
               (:user-visible-flag t
                :arguments ("new-columns-per-line" "new-rows-numbered"))
                nil [24271 27921])
            ("array-expand-rows" function (:user-visible-flag t) nil [27923 28083])
            ("limit-index" function (:arguments ("index" "limit")) nil [28104 28198])
            ("xor" function (:arguments ("pred1" "pred2")) nil [28200 28348])
            ("current-line" function nil nil [28350 28494])
            ("move-to-column-untabify" function (:arguments ("column")) nil [28496 28850])
            ("untabify-backward" function nil nil [28852 29014])
            ("array-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map "\341d" (quote array-display-local-variables)) (define-key map "\341m" (quote array-make-template)) (define-key map "\341e" (quote array-expand-rows)) (define-key map "\341r" (quote array-reconfigure-rows)) (define-key map "\341=" (quote array-what-position)) (define-key map "\341g" (quote array-goto-cell)) (define-key map "\341f" (quote array-fill-rectangle)) (define-key map "" (quote array-next-row)) (define-key map "" (quote array-previous-row)) (define-key map "" (quote array-forward-column)) (define-key map "" (quote array-backward-column)) (define-key map "\356" (quote array-copy-down)) (define-key map "\360" (quote array-copy-up)) (define-key map "\346" (quote array-copy-forward)) (define-key map "\342" (quote array-copy-backward)) (define-key map "\216" (quote array-copy-row-down)) (define-key map "\220" (quote array-copy-row-up)) (define-key map "\206" (quote array-copy-column-forward)) (define-key map "\202" (quote array-copy-column-backward)) map)) nil [29036 30121])
            ("put" code nil nil [30124 30162])
            ("define-derived-mode" code nil nil [30179 34392])
            ("array" package nil nil [34397 34413]))          
      :file "array.el"
      :pointmax 34438
      :fsize 34437
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "window.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8089])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8091 8856])
            ("window-right" function (:arguments ("window")) nil [9163 9375])
            ("window-left" function (:arguments ("window")) nil [9377 9587])
            ("window-child" function (:arguments ("window")) nil [9589 9744])
            ("window-child-count" function (:arguments ("window")) nil [9746 10042])
            ("window-last-child" function (:arguments ("window")) nil [10044 10311])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [10313 10807])
            ("window-normalize-frame" function (:arguments ("frame")) nil [10809 11062])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [11064 11619])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [11658 12430])
            ("ignore-window-parameters" variable nil nil [12432 12776])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [12826 12950])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [12952 13148])
            ("window-min-height" variable (:default-value 4) nil [13150 13830])
            ("window-min-pixel-height" function (:arguments ("window")) nil [13832 14019])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [14069 14192])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [14194 14389])
            ("window-min-width" variable (:default-value 10) nil [14391 15090])
            ("window-min-pixel-width" function (:arguments ("window")) nil [15092 15277])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [15279 15596])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [15598 16230])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [16232 16658])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [16660 17767])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [17769 18481])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [18483 19706])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [19708 20359])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [20361 21319])
            ("window-atom-root" function (:arguments ("window")) nil [21341 21761])
            ("window-make-atom" function (:arguments ("window")) nil [21763 22151])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [22153 24598])
            ("window--atom-check-1" function (:arguments ("window")) nil [24600 25488])
            ("window--atom-check" function (:arguments ("frame")) nil [25490 25878])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [25897 25961])
            ("window-sides-vertical" variable nil nil [25963 26169])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [26171 27592])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [27594 28650])
            ("window--major-side-window" function (:arguments ("side")) nil [28652 30322])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [30324 32376])
            ("delete-side-window" function (:arguments ("window")) nil [32378 32596])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [32598 37601])
            ("window--side-check" function (:arguments ("frame")) nil [37603 40107])
            ("window--check" function (:arguments ("frame")) nil [40109 40288])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [40324 42168])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [42170 43775])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [43795 44743])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [44745 45549])
            ("window-size-fixed" variable nil nil [45551 45988])
            ("make-variable-buffer-local" code nil nil [45989 46036])
            ("window--size-ignore-p" function (:arguments ("window" "ignore")) nil [46038 46214])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [46216 46921])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [46923 47839])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [47841 50693])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [50695 52454])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [52456 52961])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal")) nil [52963 54103])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal")) nil [54105 54595])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [54597 55991])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [55993 58118])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [58120 59463])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [59465 61294])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61342 63494])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [63496 64154])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [64156 65578])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [65580 66136])
            ("defalias" code nil nil [66183 66229])
            ("defalias" code nil nil [66230 66273])
            ("window-full-height-p" function (:arguments ("window")) nil [66362 66800])
            ("window-full-width-p" function (:arguments ("window")) nil [66802 67234])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [67236 67767])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [67769 68689])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [68691 70573])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [70575 71152])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [71154 71672])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [71674 72064])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [72355 77850])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [77852 79473])
            ("defalias" code nil nil [79475 79525])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [79527 81178])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [81180 82450])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [82452 83745])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [83747 85278])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [85280 85430])
            ("count-windows" function (:arguments ("minibuf")) nil [85432 85725])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [85750 86700])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [86702 88326])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [88328 90243])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [90245 90681])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [90683 91205])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [91334 92558])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [92560 92966])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [92968 96645])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [96647 97194])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [97196 97373])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [97375 100893])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [100895 107843])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [107845 112023])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [112025 114271])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [114273 115106])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [115108 117029])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [117031 122497])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [122499 123786])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [123788 125131])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125133 125729])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125731 126341])
            ("frame-root-window-p" function (:arguments ("window")) nil [126344 126483])
            ("window--subtree" function (:arguments ("window" "next")) nil [126485 127208])
            ("window-tree" function (:arguments ("frame")) nil [127210 128105])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [128108 130739])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [130875 132148])
            ("window-deletable-p" function (:arguments ("window")) nil [132173 133562])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [133564 133867])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [133869 137265])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [137267 139718])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [139720 140346])
            ("record-window-buffer" function (:arguments ("window")) nil [142082 143501])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [143503 144002])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [144004 144931])
            ("switch-to-visible-buffer" variable (:default-value t) nil [144933 145481])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [145483 150792])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150794 154151])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [154153 155149])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [155151 155878])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [155880 156398])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [156400 157240])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [157242 158375])
            ("unbury-buffer" function (:user-visible-flag t) nil [158377 158502])
            ("next-buffer" function (:user-visible-flag t) nil [158504 158806])
            ("previous-buffer" function (:user-visible-flag t) nil [158808 159118])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [159120 160874])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [160876 161908])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [161910 166445])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [166447 167047])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [167049 168013])
            ("window-split-min-size" function (:arguments ("horizontal" "pixelwise")) nil [168039 168455])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [168457 180056])
            ("split-window-keep-point" variable (:default-value t) nil [180133 180507])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [180509 182764])
            ("defalias" code nil nil [182766 182821])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [182823 184032])
            ("defalias" code nil nil [184034 184091])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [184594 187362])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [187364 187790])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [187792 189049])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [189051 189481])
            ("window-area-factor" variable (:default-value 1) nil [189528 189697])
            ("make-variable-buffer-local" code nil nil [189698 189746])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [189748 190402])
            ("balance-windows-area" function (:user-visible-flag t) nil [190404 194760])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [194830 197625])
            ("window-state-get" function (:arguments ("window" "writable")) nil [197627 199716])
            ("window-state-put-list" variable nil nil [199718 199796])
            ("window-state-put-stale-windows" variable nil nil [199798 199885])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [199887 202589])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [202591 206347])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [206349 210426])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [210429 212584])
            ("display-buffer-function" variable nil nil [212586 213142])
            ("make-obsolete-variable" code nil nil [213144 213225])
            ("pop-up-frame-alist" variable nil nil [213406 214022])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [214024 214353])
            ("special-display-buffer-names" variable nil nil [214355 216945])
            ("make-obsolete-variable" code nil nil [216946 217029])
            ("put" code nil nil [217030 217089])
            ("special-display-regexps" variable nil nil [217091 219733])
            ("make-obsolete-variable" code nil nil [219734 219812])
            ("put" code nil nil [219813 219867])
            ("special-display-p" function (:arguments ("buffer-name")) nil [219869 220764])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [220766 221381])
            ("make-obsolete-variable" code nil nil [221382 221464])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [221466 223486])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [223488 224286])
            ("make-obsolete-variable" code nil nil [224287 224366])
            ("same-window-buffer-names" variable nil nil [224368 224940])
            ("same-window-regexps" variable nil nil [224942 225530])
            ("same-window-p" function (:arguments ("buffer-name")) nil [225532 226503])
            ("pop-up-frames" variable nil nil [226505 226917])
            ("display-buffer-reuse-frames" variable nil nil [226919 227148])
            ("make-obsolete-variable" code nil nil [227150 227278])
            ("pop-up-windows" variable (:default-value t) nil [227280 227404])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [227406 228789])
            ("split-height-threshold" variable (:default-value 80) nil [228791 229317])
            ("split-width-threshold" variable (:default-value 160) nil [229319 229707])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [229709 231986])
            ("split-window-sensibly" function (:arguments ("window")) nil [231988 234373])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [234375 235485])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [235487 236429])
            ("even-window-heights" variable (:default-value t) nil [236431 236747])
            ("window--even-window-heights" function (:arguments ("window")) nil [236749 237613])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [237615 240290])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [240292 240716])
            ("display-buffer-mark-dedicated" variable nil nil [241055 241264])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (function :tag "Other function"))))
                nil [241266 241742])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [241744 242119])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [242121 242456])
            ("put" code nil nil [242457 242520])
            ("display-buffer-alist" variable nil nil [242522 243533])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [243535 243959])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [243961 244545])
            ("put" code nil nil [244546 244607])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [244609 245032])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [245034 245206])
            ("put" code nil nil [245207 245272])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [245274 245504])
            ("put" code nil nil [245505 245570])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [245572 251325])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [251327 251660])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [251702 252187])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [252189 252530])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [252532 254178])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [254180 254931])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [254933 255953])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [255955 257269])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [257271 257857])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [257859 258708])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [258710 259801])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [259803 262090])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [262092 263835])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [263837 264292])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [264328 265860])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [265862 266496])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [266498 267642])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [267644 268200])
            ("switch-to-buffer-preserve-window-point" variable nil nil [268202 269091])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [269093 271844])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [271846 272878])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [272880 273892])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [273895 274868])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [274870 275085])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [275087 275306])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [275308 276709])
            ("window-buffer-height" function (:arguments ("window")) nil [276711 277189])
            ("fit-window-to-buffer-horizontally" variable nil nil [277254 277648])
            ("fit-frame-to-buffer" variable nil nil [277762 278211])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [278213 279427])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [279429 280718])
            ("declare-function" code nil nil [280720 280791])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [280793 280997])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [280999 289619])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width"))
                nil [289621 295683])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [295685 296066])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [296068 297176])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [297179 298001])
            ("recenter-last-op" variable nil nil [298005 298157])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [298159 299019])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299021 300168])
            ("define-key" code nil nil [300170 300222])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300224 301358])
            ("define-key" code nil nil [301360 301423])
            ("scroll-error-top-bottom" variable nil nil [301593 302037])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302039 303102])
            ("put" code nil nil [303104 303146])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [303148 304215])
            ("put" code nil nil [304217 304261])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304331 304614])
            ("put" code nil nil [304616 304655])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304657 304942])
            ("put" code nil nil [304944 304985])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [304989 305384])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [305386 306070])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [306072 306575])
            ("mouse-autoselect-window-timer" variable nil nil [306578 306668])
            ("mouse-autoselect-window-position" variable nil nil [306670 306781])
            ("mouse-autoselect-window-window" variable nil nil [306783 306884])
            ("mouse-autoselect-window-state" variable nil nil [306886 307183])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [307185 307906])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [307908 308736])
            ("mouse-autoselect-window-select" function nil nil [308738 311939])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [311941 313445])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [313447 314125])
            ("define-key" code nil nil [314215 314256])
            ("define-key" code nil nil [314257 314305])
            ("define-key" code nil nil [314306 314352])
            ("define-key" code nil nil [314353 314399])
            ("define-key" code nil nil [314400 314440])
            ("define-key" code nil nil [314441 314483])
            ("define-key" code nil nil [314484 314539])
            ("define-key" code nil nil [314540 314594])
            ("define-key" code nil nil [314595 314658])
            ("define-key" code nil nil [314659 314702])
            ("define-key" code nil nil [314703 314755]))          
      :file "window.el"
      :pointmax 314781
      :fsize 314780
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "macros.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("name-last-kbd-macro" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [1198 1895])
            ("insert-kbd-macro" function
               (:user-visible-flag t
                :arguments ("macroname" "keys"))
                nil [1912 5332])
            ("kbd-macro-query" function
               (:user-visible-flag t
                :arguments ("flag"))
                nil [5349 7615])
            ("apply-macro-to-region-lines" function
               (:user-visible-flag t
                :arguments ("top" "bottom" "macro"))
                nil [7632 9732])
            ("macros" package nil nil [9794 9811]))          
      :file "macros.el"
      :pointmax 9837
      :fsize 9836
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "autorevert.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4450 4467])
            ("timer" include nil nil [4469 4485])
            ("filenotify" include nil nil [4486 4507])
            ("auto-revert" customgroup (:user-visible-flag t) nil [4623 4852])
            ("auto-revert-mode" variable nil nil [4986 5138])
            ("put" code nil nil [5139 5181])
            ("auto-revert-tail-mode" variable nil nil [5183 5350])
            ("put" code nil nil [5351 5398])
            ("auto-revert-timer" variable nil nil [5400 5466])
            ("auto-revert-interval" variable (:default-value 5) nil [5468 6203])
            ("auto-revert-stop-on-user-input" variable (:default-value t) nil [6205 6737])
            ("auto-revert-verbose" variable (:default-value t) nil [6739 6940])
            ("auto-revert-mode-text" variable (:default-value " ARev") nil [6942 7233])
            ("auto-revert-tail-mode-text" variable (:default-value " Tail") nil [7235 7487])
            ("auto-revert-mode-hook" variable nil nil [7489 7686])
            ("global-auto-revert-mode-text" variable nil nil [7688 7995])
            ("global-auto-revert-mode-hook" variable nil nil [7997 8136])
            ("global-auto-revert-non-file-buffers" variable nil nil [8138 9067])
            ("global-auto-revert-ignore-modes" variable nil nil [9069 9226])
            ("auto-revert-load-hook" variable nil nil [9228 9380])
            ("auto-revert-check-vc-info" variable nil nil [9382 10428])
            ("global-auto-revert-ignore-buffer" variable nil nil [10430 10606])
            ("make-variable-buffer-local" code nil nil [10607 10669])
            ("auto-revert-remote-files" variable nil nil [10671 10815])
            ("auto-revert-use-notify" variable (:default-value t) nil [10817 11326])
            ("auto-revert-notify-exclude-dir-regexp" variable (:default-value (concat "^" (regexp-opt (quote ("/afs/" "/media/" "/mnt" "/net/" "/tmp_mnt/"))) (unless auto-revert-remote-files "\\|^/[^/|:][^/|]+:"))) nil [11328 11702])
            ("auto-revert-buffer-list" variable nil nil [11728 11990])
            ("auto-revert-remaining-buffers" variable nil nil [11992 12092])
            ("auto-revert-tail-pos" variable nil nil [12094 12165])
            ("add-hook" code nil nil [12167 12312])
            ("auto-revert-notify-watch-descriptor-hash-list" variable (:default-value (make-hash-table :test (quote equal))) nil [12314 12603])
            ("auto-revert-notify-watch-descriptor" variable nil nil [12605 12714])
            ("make-variable-buffer-local" code nil nil [12715 12780])
            ("put" code nil nil [12781 12842])
            ("auto-revert-notify-modified-p" variable nil nil [12844 12999])
            ("make-variable-buffer-local" code nil nil [13000 13059])
            ("define-minor-mode" code nil nil [13091 14198])
            ("turn-on-auto-revert-mode" function nil nil [14216 14418])
            ("define-minor-mode" code nil nil [14436 17160])
            ("turn-on-auto-revert-tail-mode" function nil nil [17178 17409])
            ("define-minor-mode" code nil nil [17427 18620])
            ("auto-revert-set-timer" function (:user-visible-flag t) nil [18622 19236])
            ("auto-revert-notify-rm-watch" function nil nil [19238 19972])
            ("auto-revert-notify-add-watch" function nil nil [19974 21148])
            ("auto-revert-notify-handler" function (:arguments ("event")) nil [21150 22942])
            ("auto-revert-active-p" function nil nil [22944 23251])
            ("auto-revert-handler" function nil nil [23253 25614])
            ("auto-revert-tail-handler" function (:arguments ("size")) nil [25616 26277])
            ("auto-revert-buffers" function nil nil [26279 28977])
            ("autorevert" package nil nil [28992 29013])
            ("run-hooks" code nil nil [29015 29049]))          
      :file "autorevert.el"
      :pointmax 29079
      :fsize 29078
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 4467 . 4468) (symbol 4432 . 4449) (open-paren 4431 . 4432)))
    (semanticdb-table "filenotify.el"
      :file "filenotify.el"
      :fsize 12999
      :lastmodtime '(21710 25077 0 0)))
  :file "!usr!share!emacs!24.5!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
