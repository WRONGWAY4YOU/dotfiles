;; Object progmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "progmodes/"
  :tables
  (list
    (semanticdb-table "ada-stmt.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("skeleton" include nil nil [2857 2882])
            ("easymenu" include nil nil [2883 2902])
            ("ada-mode" include nil nil [2903 2922])
            ("ada-func-or-proc-name" function nil nil [2924 3160])
            ("define-skeleton" code nil nil [3235 3409])
            ("define-skeleton" code nil nil [3412 3679])
            ("define-skeleton" code nil nil [3682 3832])
            ("define-skeleton" code nil nil [3835 4053])
            ("define-skeleton" code nil nil [4056 4282])
            ("define-skeleton" code nil nil [4285 4396])
            ("define-skeleton" code nil nil [4399 4548])
            ("define-skeleton" code nil nil [4551 4716])
            ("ada-header" function (:user-visible-flag t) nil [4733 4975])
            ("define-skeleton" code nil nil [4978 5663])
            ("define-skeleton" code nil nil [5666 5809])
            ("define-skeleton" code nil nil [5812 5970])
            ("define-skeleton" code nil nil [5973 6132])
            ("define-skeleton" code nil nil [6135 6240])
            ("define-skeleton" code nil nil [6243 6433])
            ("define-skeleton" code nil nil [6436 6544])
            ("define-skeleton" code nil nil [6547 6646])
            ("define-skeleton" code nil nil [6649 6925])
            ("define-skeleton" code nil nil [6928 7054])
            ("define-skeleton" code nil nil [7057 7275])
            ("define-skeleton" code nil nil [7278 7433])
            ("define-skeleton" code nil nil [7436 7632])
            ("define-skeleton" code nil nil [7635 7759])
            ("define-skeleton" code nil nil [7762 7875])
            ("define-skeleton" code nil nil [7878 8138])
            ("define-skeleton" code nil nil [8141 8361])
            ("define-skeleton" code nil nil [8364 8960])
            ("define-skeleton" code nil nil [8963 9061])
            ("define-skeleton" code nil nil [9370 9491])
            ("define-skeleton" code nil nil [9494 9699])
            ("define-skeleton" code nil nil [9702 9961])
            ("define-skeleton" code nil nil [9964 10134])
            ("define-skeleton" code nil nil [10137 10345])
            ("define-skeleton" code nil nil [10348 10502])
            ("define-skeleton" code nil nil [10505 10634])
            ("define-skeleton" code nil nil [10637 10780])
            ("define-skeleton" code nil nil [10783 10933])
            ("define-skeleton" code nil nil [10936 11145])
            ("define-skeleton" code nil nil [11148 11248])
            ("define-skeleton" code nil nil [11251 11387])
            ("define-skeleton" code nil nil [11390 11586])
            ("define-skeleton" code nil nil [11589 11743])
            ("define-skeleton" code nil nil [11746 11876])
            ("define-skeleton" code nil nil [11879 12024])
            ("define-skeleton" code nil nil [12027 12130])
            ("ada-stmt" package nil nil [12133 12152]))          
      :file "ada-stmt.el"
      :pointmax 12180
      :fsize 12179
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ada-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("find-file" include nil nil [5674 5700])
            ("align" include nil nil [5701 5723])
            ("which-func" include nil nil [5724 5751])
            ("compile" include nil nil [5752 5776])
            ("ispell-check-comments" variable nil nil [5778 5808])
            ("skeleton-further-elements" variable nil nil [5809 5843])
            ("define-error" code nil nil [5845 5880])
            ("ada-mode-version" function (:user-visible-flag t) nil [5882 6082])
            ("ada-mode-hook" variable nil nil [6084 6303])
            ("ada" customgroup (:user-visible-flag t) nil [6305 6586])
            ("ada-auto-case" variable (:default-value t) nil [6588 6816])
            ("ada-broken-decl-indent" variable nil nil [6818 6995])
            ("ada-broken-indent" variable (:default-value 2) nil [6997 7195])
            ("ada-continuation-indent" variable (:default-value ada-broken-indent) nil [7197 7410])
            ("ada-case-attribute" variable (:default-value (quote ada-capitalize-word)) nil [7412 7799])
            ("ada-case-exception-file" variable (:default-value (list (convert-standard-filename (quote "~/.emacs_case_exceptions")))) nil [7801 8489])
            ("ada-case-keyword" variable (:default-value (quote downcase-word)) nil [8491 8851])
            ("ada-case-identifier" variable (:default-value (quote ada-loose-case-word)) nil [8853 9224])
            ("ada-clean-buffer-before-saving" variable (:default-value t) nil [9226 9379])
            ("make-obsolete-variable" code nil nil [9380 9488])
            ("ada-indent" variable (:default-value 3) nil [9491 9630])
            ("ada-indent-after-return" variable (:default-value t) nil [9632 9755])
            ("ada-indent-align-comments" variable (:default-value t) nil [9757 10125])
            ("ada-indent-comment-as-code" variable (:default-value t) nil [10127 10291])
            ("ada-indent-handle-comment-special" variable nil nil [10293 10983])
            ("ada-indent-is-separate" variable (:default-value t) nil [10985 11127])
            ("ada-indent-record-rel-type" variable (:default-value 3) nil [11129 11306])
            ("ada-indent-renames" variable (:default-value ada-broken-indent) nil [11308 11698])
            ("ada-indent-return" variable nil nil [11700 12058])
            ("ada-indent-to-open-paren" variable (:default-value t) nil [12060 12197])
            ("ada-fill-comment-prefix" variable (:default-value "--  ") nil [12199 12452])
            ("ada-fill-comment-postfix" variable (:default-value " --") nil [12454 12646])
            ("ada-label-indent" variable (:default-value -4) nil [12648 12836])
            ("ada-language-version" variable (:default-value (quote ada95)) nil [12838 13013])
            ("ada-move-to-declaration" variable nil nil [13015 13174])
            ("ada-popup-key" variable (:default-value (quote [down-mouse-3])) nil [13176 13383])
            ("ada-search-directories" variable (:default-value (append (quote (".")) (split-string (or (getenv "ADA_INCLUDE_PATH") "") ":") (quote ("/usr/adainclude" "/usr/local/adainclude" "/opt/gnu/adainclude")))) nil [13385 13881])
            ("ada-search-directories-internal" variable (:default-value ada-search-directories) nil [13883 14169])
            ("ada-stmt-end-indent" variable nil nil [14171 14348])
            ("ada-tab-policy" variable (:default-value (quote indent-auto)) nil [14350 14728])
            ("ada-use-indent" variable (:default-value ada-broken-indent) nil [14730 14912])
            ("ada-when-indent" variable (:default-value 3) nil [14914 15080])
            ("ada-with-indent" variable (:default-value ada-broken-indent) nil [15082 15267])
            ("ada-which-compiler" variable (:default-value (quote gnat)) nil [15269 15630])
            ("ada-body-suffixes" variable (:default-value (quote (".adb"))) nil [15680 15813])
            ("ada-spec-suffixes" variable (:default-value (quote (".ads"))) nil [15815 15948])
            ("ada-mode-menu" variable (:default-value (make-sparse-keymap "Ada")) nil [15950 16022])
            ("ada-mode-map" variable (:default-value (make-sparse-keymap)) nil [16024 16102])
            ("ada-mode-extra-map" variable (:default-value (make-sparse-keymap)) nil [16104 16198])
            ("ada-mode-extra-prefix" variable (:default-value "") nil [16256 16354])
            ("define-abbrev-table" code nil nil [16356 16440])
            ("ada-2005-string-keywords" variable
               (:constant-flag t
                :default-value (quote ("interface" "overriding" "synchronized")))
                nil [17341 17496])
            ("ada-95-string-keywords" variable
               (:constant-flag t
                :default-value (quote ("abstract" "aliased" "protected" "requeue" "tagged" "until")))
                nil [17166 17337])
            ("ada-83-string-keywords" variable
               (:constant-flag t
                :default-value (quote ("abort" "abs" "accept" "access" "all" "and" "array" "at" "begin" "body" "case" "constant" "declare" "delay" "delta" "digits" "do" "else" "elsif" "end" "entry" "exception" "exit" "for" "function" "generic" "goto" "if" "in" "is" "limited" "loop" "mod" "new" "not" "null" "of" "or" "others" "out" "package" "pragma" "private" "procedure" "raise" "range" "record" "rem" "renames" "return" "reverse" "select" "separate" "subtype" "task" "terminate" "then" "type" "use" "when" "while" "with" "xor")))
                nil [16524 17162])
            ("ada-ret-binding" variable nil nil [17499 17593])
            ("ada-case-exception" variable (:default-value (quote nil)) nil [17595 17682])
            ("ada-case-exception-substring" variable (:default-value (quote nil)) nil [17684 17985])
            ("ada-lfd-binding" variable nil nil [17987 18081])
            ("ada-other-file-alist" variable nil nil [18083 18215])
            ("ada-align-list" variable (:default-value (quote (("[^:]\\(\\s-*\\):[^:]" 1 t) ("[^=]\\(\\s-+\\)=[^=]" 1 t) ("\\(\\s-*\\)use\\s-" 1) ("\\(\\s-*\\)--" 1)))) nil [18217 18530])
            ("ada-align-modes" variable (:default-value (quote ((ada-declaration (regexp . "[^:]\\(\\s-*\\):[^:]") (valid lambda nil (not (ada-in-comment-p))) (modes quote (ada-mode))) (ada-assignment (regexp . "[^=]\\(\\s-+\\)=[^=]") (valid lambda nil (not (ada-in-comment-p))) (modes quote (ada-mode))) (ada-comment (regexp . "\\(\\s-*\\)--") (modes quote (ada-mode))) (ada-use (regexp . "\\(\\s-*\\)use\\s-") (valid lambda nil (not (ada-in-comment-p))) (modes quote (ada-mode)))))) nil [18532 19169])
            ("ada-align-region-separate" variable
               (:constant-flag t
                :default-value (eval-when-compile (concat "^\\s-*\\($\\|\\(" "begin\\|" "declare\\|" "else\\|" "end\\|" "exception\\|" "for\\|" "function\\|" "generic\\|" "if\\|" "is\\|" "procedure\\|" "record\\|" "return\\|" "type\\|" "when" "\\)\\>\\)")))
                nil [19171 19591])
            ("ada-83-keywords" variable
               (:constant-flag t
                :default-value (eval-when-compile (concat "\\<" (regexp-opt ada-83-string-keywords t) "\\>")))
                nil [19657 19816])
            ("ada-95-keywords" variable
               (:constant-flag t
                :default-value (eval-when-compile (concat "\\<" (regexp-opt (append ada-95-string-keywords ada-83-string-keywords) t) "\\>")))
                nil [19818 20026])
            ("ada-2005-keywords" variable
               (:constant-flag t
                :default-value (eval-when-compile (concat "\\<" (regexp-opt (append ada-2005-string-keywords ada-83-string-keywords ada-95-string-keywords) t) "\\>")))
                nil [20028 20271])
            ("ada-keywords" variable (:default-value ada-2005-keywords) nil [20273 20358])
            ("ada-ident-re" variable
               (:constant-flag t
                :default-value "[[:alpha:]]\\(?:[_[:alnum:]]\\)*")
                nil [20393 20765])
            ("ada-goto-label-re" variable
               (:constant-flag t
                :default-value (concat "<<" ada-ident-re ">>"))
                nil [20767 20863])
            ("ada-block-label-re" variable
               (:constant-flag t
                :default-value (concat ada-ident-re "[ 	
]*:[^=]"))
                nil [20865 21021])
            ("ada-label-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:" ada-block-label-re "\\)\\|\\(?:" ada-goto-label-re "\\)"))
                nil [21023 21165])
            ("ada-procedure-start-regexp" variable (:default-value (concat "^[ 	]*\\(with[ 	]+\\)?\\(\\(not[ 	]+\\)?overriding[ 	]+\\)?\\(procedure\\|function\\|task\\)[ 	
]+" "\\(" "\\(\"[^\"]+\"\\)" "\\|" "\\(\\(\\sw\\|[_.]\\)+\\)" "\\)")) nil [21333 21763])
            ("ada-name-regexp" variable
               (:constant-flag t
                :default-value "\\([a-zA-Z][a-zA-Z0-9_.']*[a-zA-Z0-9]\\)")
                nil [21765 21902])
            ("ada-package-start-regexp" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*\\(private[ 	]+\\)?\\(package\\)[ 	
]+\\(body[ 	]*\\)?" ada-name-regexp))
                nil [21904 22113])
            ("ada-compile-goto-error-file-linenr-re" variable
               (:constant-flag t
                :default-value "\\([-_.a-zA-Z0-9]+\\):\\([0-9]+\\)\\(:\\([0-9]+\\)\\)?")
                nil [22115 22268])
            ("ada-block-start-re" variable (:default-value (eval-when-compile (concat "\\<\\(" (regexp-opt (quote ("begin" "declare" "else" "exception" "generic" "loop" "or" "private" "select"))) "\\|\\(\\(limited\\|abstract\\|tagged\\)[ 	
]+\\)*record\\)\\>"))) nil [22315 22611])
            ("ada-end-stmt-re" variable (:default-value (eval-when-compile (concat "\\(" ";" "\\|" "=>[ 	]*$" "\\|" "=>[ 	]*--.*$" "\\|" "^[ 	]*separate[ 	]*(\\(\\sw\\|[_.]\\)+)" "\\|" "\\<" (regexp-opt (quote ("begin" "declare" "is" "do" "else" "generic" "loop" "private" "record" "select" "then abort" "then")) t) "\\>" "\\|" "^[ 	]*" (regexp-opt (quote ("function" "package" "procedure")) t) "\\>\\(\\sw\\|[ 	_.]\\)+\\<is\\>" "\\|" "^[ 	]*exception\\>" "\\)"))) nil [22613 23318])
            ("ada-matching-start-re" variable (:default-value (eval-when-compile (concat "\\<" (regexp-opt (quote ("end" "loop" "select" "begin" "case" "do" "declare" "if" "task" "package" "procedure" "function" "record" "protected")) t) "\\>"))) nil [23320 23603])
            ("ada-loop-start-re" variable (:default-value "\\<\\(for\\|while\\|loop\\)\\>") nil [23605 23702])
            ("ada-subprog-start-re" variable (:default-value (eval-when-compile (concat "\\<" (regexp-opt (quote ("accept" "entry" "function" "overriding" "package" "procedure" "protected" "task")) t) "\\>"))) nil [23704 23926])
            ("ada-contextual-menu-on-identifier" variable nil nil [23928 24048])
            ("ada-contextual-menu-last-point" variable nil nil [24050 24560])
            ("easy-menu-define" code nil nil [24562 25372])
            ("ada-imenu-comment-re" variable
               (:constant-flag t
                :default-value "\\([ 	]*--.*\\)?")
                nil [25552 25603])
            ("ada-imenu-subprogram-menu-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*\\(overriding[ 	]*\\)?\\(procedure\\|function\\)[ 	
]+" "\\(\\(\\sw\\|_\\)+\\)[ 	
]*\\([ 	
]\\|([^)]+)" ada-imenu-comment-re "\\)[ 	
]*" "\\(return[ 	
]+\\(\\sw\\|[_.]\\)+[ 	
]*\\)?is[ 	
]"))
                nil [25605 25880])
            ("ada-imenu-generic-expression" variable (:default-value (list (list nil ada-imenu-subprogram-menu-re 3) (list "*Specs*" (concat "^[ 	]*\\(procedure\\|function\\)[ 	
]+\\(\\(\\sw\\|_\\)+\\)" "\\(" "\\(" ada-imenu-comment-re "[ 	
]+\\|[ 	
]*([^)]+)" ada-imenu-comment-re "\\)" "\\([ 	
]*return[ 	
]+\\(\\sw\\|[_.]\\)+[ 	
]*\\)?" "\\)?;") 2) (quote ("*Tasks*" "^[ 	]*task[ 	]+\\(type[ 	]+\\)?\\(\\(body[ 	]+\\)?\\(\\sw\\|_\\)+\\)" 2)) (quote ("*Type Defs*" "^[ 	]*\\(sub\\)?type[ 	]+\\(\\(\\sw\\|_\\)+\\)" 2)) (quote ("*Protected*" "^[ 	]*protected[ 	]+\\(type[ 	]+\\)?\\(\\(body[ 	]+\\)?\\(\\sw\\|_\\)+\\)" 2)) (quote ("*Packages*" "^[ 	]*package[ 	]+\\(\\(body[ 	]+\\)?\\(\\sw\\|[_.]\\)+\\)" 1)))) nil [25882 26812])
            ("ada-compile-mouse-goto-error" function (:user-visible-flag t) nil [26970 27150])
            ("ada-compile-goto-error" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [27152 28811])
            ("ada-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "$" st) (modify-syntax-entry 34 "\"" st) (modify-syntax-entry 58 "." st) (modify-syntax-entry 59 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 124 "." st) (modify-syntax-entry 43 "." st) (modify-syntax-entry 42 "." st) (modify-syntax-entry 47 "." st) (modify-syntax-entry 61 "." st) (modify-syntax-entry 60 "." st) (modify-syntax-entry 62 "." st) (modify-syntax-entry 36 "." st) (modify-syntax-entry 91 "." st) (modify-syntax-entry 93 "." st) (modify-syntax-entry 123 "." st) (modify-syntax-entry 125 "." st) (modify-syntax-entry 46 "." st) (modify-syntax-entry 92 "." st) (modify-syntax-entry 39 "." st) (modify-syntax-entry 45 ". 12" st) (modify-syntax-entry 35 (if (featurep (quote xemacs)) "<" "$") st) (modify-syntax-entry 12 ">   " st) (modify-syntax-entry 10 ">   " st) (modify-syntax-entry 95 "_" st) (modify-syntax-entry 40 "()" st) (modify-syntax-entry 41 ")(" st) st)) nil [30295 31918])
            ("ada-mode-symbol-syntax-table" variable (:default-value (let ((st (make-syntax-table ada-mode-syntax-table))) (modify-syntax-entry 95 "w" st) st)) nil [31920 32116])
            ("if" code nil nil [32248 33187])
            ("unless" code nil nil [33189 35652])
            ("ada-in-comment-p" function (:arguments ("parse-result")) nil [35866 36124])
            ("ada-in-string-p" function (:arguments ("parse-result")) nil [36126 36391])
            ("ada-in-string-or-comment-p" function (:arguments ("parse-result")) nil [36393 36749])
            ("ada-in-numeric-literal-p" function nil nil [36751 36897])
            ("ada-call-from-contextual-menu" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [37353 37617])
            ("ada-popup-menu" function
               (:user-visible-flag t
                :arguments ("position"))
                nil [37619 38922])
            ("ada-add-extensions" function (:arguments ("spec" "body")) nil [39097 40345])
            ("ada-font-lock-syntactic-keywords" variable nil nil [40347 40388])
            ("define-derived-mode" code nil nil [40421 48612])
            ("ada-adjust-case-skeleton" function nil nil [48614 48883])
            ("ada-region-selected" function nil nil [48885 49032])
            ("ada-save-exceptions-to-file" function (:arguments ("file-name")) nil [49843 50414])
            ("ada-create-case-exception" function
               (:user-visible-flag t
                :arguments ("word"))
                nil [50416 51863])
            ("ada-create-case-exception-substring" function
               (:user-visible-flag t
                :arguments ("word"))
                nil [51865 53884])
            ("ada-case-read-exceptions-from-file" function (:arguments ("file-name")) nil [53886 54975])
            ("ada-case-read-exceptions" function (:user-visible-flag t) nil [54977 55431])
            ("ada-adjust-case-substring" function (:user-visible-flag t) nil [55433 56180])
            ("ada-adjust-case-identifier" function (:user-visible-flag t) nil [56182 57023])
            ("ada-after-keyword-p" function nil nil [57025 57331])
            ("ada-adjust-case" function (:arguments ("force-identifier")) nil [57333 58312])
            ("ada-adjust-case-interactive" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58314 59711])
            ("ada-activate-keys-for-case" function (:user-visible-flag t) nil [59713 60542])
            ("ada-loose-case-word" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [60544 61093])
            ("ada-no-auto-case" function (:arguments ("_arg")) nil [61095 61523])
            ("ada-capitalize-word" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [61525 61903])
            ("ada-adjust-case-region" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [61905 63378])
            ("ada-adjust-case-buffer" function (:user-visible-flag t) nil [63380 63601])
            ("ada-format-paramlist" function (:user-visible-flag t) nil [64377 65466])
            ("ada-scan-paramlist" function (:arguments ("begin" "end")) nil [65468 68054])
            ("ada-insert-paramlist" function (:arguments ("paramlist")) nil [68056 70942])
            ("ada-indent-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [72436 73115])
            ("ada-indent-newline-indent" function (:user-visible-flag t) nil [73117 73307])
            ("ada-indent-newline-indent-conditional" function (:user-visible-flag t) nil [73309 73892])
            ("ada-justified-indent-current" function (:user-visible-flag t) nil [73894 74613])
            ("ada-batch-reformat" function nil nil [74615 75203])
            ("ada-goto-previous-word" function nil nil [75205 75386])
            ("ada-indent-current" function (:user-visible-flag t) nil [75388 77315])
            ("ada-get-current-indent" function nil nil [77317 90606])
            ("ada-indent-on-previous-lines" function (:arguments ("nomove" "orgpoint" "initial-pos")) nil [90608 93013])
            ("ada-get-indent-open-paren" function nil nil [93015 93160])
            ("ada-get-indent-nochange" function nil nil [93162 93341])
            ("ada-get-indent-paramlist" function nil nil [93343 94266])
            ("ada-get-indent-end" function (:arguments ("orgpoint")) nil [94268 96328])
            ("ada-get-indent-case" function (:arguments ("orgpoint")) nil [96330 97735])
            ("ada-get-indent-when" function (:arguments ("orgpoint")) nil [97737 98119])
            ("ada-get-indent-if" function (:arguments ("orgpoint")) nil [98121 99094])
            ("ada-get-indent-block-start" function (:arguments ("orgpoint")) nil [99096 100389])
            ("ada-get-indent-subprog" function (:arguments ("orgpoint")) nil [100391 102193])
            ("ada-get-indent-noindent" function (:arguments ("orgpoint")) nil [102195 104246])
            ("ada-get-indent-block-label" function (:arguments ("orgpoint")) nil [104248 105310])
            ("ada-get-indent-goto-label" function (:arguments ("orgpoint")) nil [105312 105686])
            ("ada-get-indent-loop" function (:arguments ("orgpoint")) nil [105688 108640])
            ("ada-get-indent-type" function (:arguments ("orgpoint")) nil [108642 110177])
            ("ada-goto-stmt-start" function (:arguments ("ignore-goto-label")) nil [110337 111646])
            ("ada-search-prev-end-stmt" function nil nil [111649 112964])
            ("ada-goto-next-non-ws" function (:arguments ("limit" "skip-goto-label")) nil [112966 113864])
            ("ada-goto-stmt-end" function (:arguments ("limit")) nil [113867 114151])
            ("ada-goto-next-word" function (:arguments ("backward")) nil [114154 114836])
            ("ada-check-matching-start" function (:arguments ("keyword")) nil [114839 115114])
            ("ada-check-defun-name" function (:arguments ("defun-name")) nil [115117 116519])
            ("ada-goto-decl-start" function (:arguments ("noerror")) nil [116521 122069])
            ("ada-goto-matching-start" function (:arguments ("nest-level" "noerror" "gotothen")) nil [122071 128386])
            ("ada-goto-matching-end" function (:arguments ("nest-level" "noerror")) nil [128389 131696])
            ("ada-search-ignore-string-comment" function (:arguments ("search-re" "backward" "limit" "paramlists" "search-func")) nil [131699 134729])
            ("ada-in-decl-p" function nil nil [134892 135091])
            ("ada-looking-at-semi-or" function nil nil [135094 135323])
            ("ada-looking-at-semi-private" function nil nil [135326 136203])
            ("ada-in-paramlist-p" function nil nil [136206 137495])
            ("ada-search-ignore-complex-boolean" function (:arguments ("regexp" "backwardp")) nil [137497 137892])
            ("ada-in-open-paren-p" function nil nil [137894 138680])
            ("ada-tab" function (:user-visible-flag t) nil [138838 139336])
            ("ada-untab" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [139338 139658])
            ("ada-indent-current-function" function (:user-visible-flag t) nil [139660 139955])
            ("ada-tab-hard" function (:user-visible-flag t) nil [139957 140153])
            ("ada-untab-hard" function (:user-visible-flag t) nil [140155 140308])
            ("ada-remove-trailing-spaces" function (:user-visible-flag t) nil [140550 140834])
            ("ada-gnat-style" function (:user-visible-flag t) nil [140836 143032])
            ("ada-move-to-start" function (:user-visible-flag t) nil [143216 144386])
            ("ada-move-to-end" function (:user-visible-flag t) nil [144388 146824])
            ("ada-next-procedure" function (:user-visible-flag t) nil [146826 147068])
            ("ada-previous-procedure" function (:user-visible-flag t) nil [147070 147327])
            ("ada-next-package" function (:user-visible-flag t) nil [147329 147547])
            ("ada-previous-package" function (:user-visible-flag t) nil [147549 147782])
            ("ada-create-keymap" function nil nil [147955 152672])
            ("ada-create-menu" function nil nil [152675 160922])
            ("comment-region" function (:arguments ("before" "ada-uncomment-anywhere" "disable")) nil [161473 161888])
            ("ada-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [161890 162440])
            ("ada-fill-comment-paragraph-justify" function (:user-visible-flag t) nil [162442 162606])
            ("ada-fill-comment-paragraph-postfix" function (:user-visible-flag t) nil [162608 162831])
            ("ada-fill-comment-paragraph" function
               (:user-visible-flag t
                :arguments ("justify" "postfix"))
                nil [162833 165624])
            ("ada-make-filename-from-adaname" function (:arguments ("adaname")) nil [166340 166635])
            ("ada-other-file-name" function nil nil [166637 168336])
            ("ada-which-function-are-we-in" function nil nil [168338 168811])
            ("ada-last-which-function-line" variable (:default-value -1) nil [168814 168910])
            ("ada-last-which-function-subprog" variable nil nil [168911 169012])
            ("make-variable-buffer-local" code nil nil [169013 169074])
            ("make-variable-buffer-local" code nil nil [169075 169133])
            ("ada-which-function" function nil nil [169136 171289])
            ("ada-ff-other-window" function (:user-visible-flag t) nil [171291 171469])
            ("ada-set-point-accordingly" function nil nil [171471 171765])
            ("ada-get-body-name" function
               (:user-visible-flag t
                :arguments ("spec-name"))
                nil [171767 172950])
            ("ada-font-lock-syntactic-keywords" variable
               (:constant-flag t
                :default-value (quote (("[^a-zA-Z0-9)]\\('\\)[^
]\\('\\)" (1 (7 . 39)) (2 (7 . 39))) ("^[ 	]*\\(#\\(if\\|else\\|elsif\\|end\\)\\)" (1 (11 . 10))))))
                nil [173598 174105])
            ("ada-font-lock-keywords" variable (:default-value (eval-when-compile (list (list "\\<\\(function[ 	]+return\\)\\>" (quote (1 font-lock-keyword-face))) (list "^[ 	]*\\(#.*
\\)" (quote (1 font-lock-type-face t))) (list (concat "\\<\\(" "accept\\|" "entry\\|" "function\\|" "package[ 	]+body\\|" "package\\|" "pragma\\|" "procedure\\|" "protected[ 	]+body\\|" "protected[ 	]+type\\|" "protected\\|" "task[ 	]+body\\|" "task[ 	]+type\\|" "task" "\\)\\>[ 	]*" "\\(\\sw+\\(\\.\\sw*\\)*\\)?") (quote (1 font-lock-keyword-face)) (quote (2 font-lock-function-name-face nil t))) (list (concat "\\<\\(access[ 	]+all\\|access[ 	]+constant\\|access\\|constant\\|in[ 	]+reverse\\|\\|in[ 	]+out\\|in\\|out\\)\\>" "[ 	]*" "\\(\\sw+\\(\\.\\sw*\\)*\\)?") (quote (1 font-lock-keyword-face nil t)) (quote (2 font-lock-type-face nil t))) (concat "\\<" (regexp-opt (quote ("abort" "abs" "abstract" "accept" "access" "aliased" "all" "and" "array" "at" "begin" "case" "declare" "delay" "delta" "digits" "do" "else" "elsif" "entry" "exception" "exit" "for" "generic" "if" "in" "interface" "is" "limited" "loop" "mod" "not" "null" "or" "others" "overriding" "private" "protected" "raise" "range" "record" "rem" "renames" "requeue" "return" "reverse" "select" "separate" "synchronized" "tagged" "task" "terminate" "then" "until" "when" "while" "with" "xor")) t) "\\>") (quote ("\\<\\(end\\)\\>\\([ 	]+\\)?\\(\\(\\sw\\|[_.]\\)+\\)?" (1 font-lock-keyword-face) (3 font-lock-function-name-face nil t))) (list (concat "\\<\\(" "new\\|of\\|subtype\\|type" "\\)\\>[ 	]*\\(\\sw+\\(\\.\\sw*\\)*\\)?[ 	]*\\((\\)?") (quote (1 font-lock-keyword-face)) (quote (2 (if (match-beginning 4) font-lock-function-name-face font-lock-type-face) nil t))) (list (concat "\\<\\(goto\\|raise\\|use\\|with\\)" "[ 	]+\\([a-zA-Z0-9_., 	]+\\)\\W") (quote (1 font-lock-keyword-face)) (quote (2 font-lock-constant-face nil t))) (quote ("<<\\(\\sw+\\)>>" 1 font-lock-constant-face)) (list "\\([0-9]+#[0-9a-fA-F_]+#\\)" (quote (1 font-lock-constant-face t))) (list "\\W\\([-+]?[0-9._]+\\)\\>" (quote (1 font-lock-constant-face)))))) nil [174107 177255])
            ("ada-outline-level" function nil nil [177408 177650])
            ("ada-narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [177808 178375])
            ("ada-gen-treat-proc" function (:arguments ("match")) nil [178833 180719])
            ("ada-make-body" function nil nil [180721 181697])
            ("ada-make-subprogram-body" function (:user-visible-flag t) nil [181700 182899])
            ("ada-create-keymap" code nil nil [183192 183211])
            ("ada-create-menu" code nil nil [183212 183229])
            ("ada-add-extensions" code nil nil [183284 183318])
            ("if" code nil nil [183384 183466])
            ("ada-case-read-exceptions" code nil nil [183510 183536])
            ("ada-change-prj" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183590 183651])
            ("ada-check-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183652 183713])
            ("ada-compile-application" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183714 183775])
            ("ada-compile-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183776 183837])
            ("ada-complete-identifier" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183838 183899])
            ("ada-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183900 183961])
            ("ada-find-any-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183962 184023])
            ("ada-find-src-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184024 184085])
            ("ada-find-local-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184086 184147])
            ("ada-find-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184148 184209])
            ("ada-gdb-application" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184210 184271])
            ("ada-goto-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184272 184333])
            ("ada-goto-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184334 184395])
            ("ada-goto-parent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184396 184457])
            ("ada-make-body-gnatstub" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184458 184519])
            ("ada-point-and-xref" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184520 184581])
            ("ada-reread-prj-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184582 184643])
            ("ada-run-application" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184644 184705])
            ("ada-set-default-project-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184706 184767])
            ("ada-xref-goto-previous-reference" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184768 184829])
            ("ada-set-main-compile-application" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184830 184891])
            ("ada-show-current-main" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184892 184953])
            ("ada-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184955 185016])
            ("ada-prj-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185017 185078])
            ("ada-prj-new" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185079 185140])
            ("ada-prj-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185141 185202])
            ("ada-array" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185204 185252])
            ("ada-case" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185253 185301])
            ("ada-declare-block" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185302 185350])
            ("ada-else" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185351 185399])
            ("ada-elsif" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185400 185448])
            ("ada-exception" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185449 185497])
            ("ada-exception-block" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185498 185546])
            ("ada-exit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185547 185595])
            ("ada-for-loop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185596 185644])
            ("ada-function-spec" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185645 185693])
            ("ada-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185694 185742])
            ("ada-if" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185743 185791])
            ("ada-loop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185792 185840])
            ("ada-package-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185841 185889])
            ("ada-package-spec" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185890 185938])
            ("ada-private" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185939 185987])
            ("ada-procedure-spec" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185988 186036])
            ("ada-record" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186037 186085])
            ("ada-subprogram-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186086 186134])
            ("ada-subtype" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186135 186183])
            ("ada-tabsize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186184 186232])
            ("ada-task-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186233 186281])
            ("ada-task-spec" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186282 186330])
            ("ada-type" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186331 186379])
            ("ada-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186380 186428])
            ("ada-when" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186429 186477])
            ("ada-while-loop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186478 186526])
            ("ada-with" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186527 186575])
            ("ada-mode" package nil nil [186599 186618]))          
      :file "ada-mode.el"
      :pointmax 186646
      :fsize 186645
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 17496 . 17497) (symbol 16443 . 16460) (open-paren 16442 . 16443)))
    (semanticdb-table "cc-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [3171 3246])
            ("let" code nil nil [3270 3485])
            ("cc-require" code nil nil [3488 3509])
            ("cc-require" code nil nil [3510 3531])
            ("cc-require-when-compile" code nil nil [3532 3567])
            ("cc-require" code nil nil [3568 3591])
            ("cc-require" code nil nil [3592 3615])
            ("cc-require" code nil nil [3616 3637])
            ("cc-require" code nil nil [3638 3660])
            ("cc-require" code nil nil [3661 3683])
            ("cc-require" code nil nil [3684 3706])
            ("cc-bytecomp-defvar" code nil nil [3733 3785])
            ("cc-bytecomp-defun" code nil nil [3794 3828])
            ("cc-bytecomp-defvar" code nil nil [3922 3961])
            ("cc-bytecomp-defvar" code nil nil [3962 4011])
            ("cc-external-require" code nil nil [4137 4168])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4263 4352])
            ("cc-fonts" include nil nil [4544 4563])
            ("c-leave-cc-mode-mode" function nil nil [5577 5641])
            ("c-init-language-vars-for" function (:arguments ("mode")) nil [5643 6432])
            ("c-initialize-cc-mode" function (:arguments ("new-style-init")) nil [6449 7937])
            ("c-mode-base-map" variable nil nil [7963 8038])
            ("c-make-inherited-keymap" function nil nil [8040 8623])
            ("c-define-abbrev-table" function (:arguments ("name" "defs" "doc")) nil [8625 9431])
            ("put" code nil nil [9432 9484])
            ("c-bind-special-erase-keys" function nil nil [9486 10050])
            ("if" code nil nil [10052 16617])
            ("cc-bytecomp-defvar" code nil nil [16694 16728])
            ("c-mode-menu" function (:arguments ("modestr")) nil [16730 17094])
            ("defalias" code nil nil [17353 17527])
            ("c-unfind-enclosing-token" function (:arguments ("pos")) nil [18037 18523])
            ("c-unfind-coalesced-tokens" function (:arguments ("beg" "end")) nil [18525 19330])
            ("c-maybe-stale-found-type" variable nil nil [20104 20141])
            ("make-variable-buffer-local" code nil nil [20142 20196])
            ("c-basic-common-init" function (:arguments ("mode" "default-style")) nil [20198 26297])
            ("c-setup-doc-comment-style" function nil nil [26390 26678])
            ("c-new-BEG" variable nil nil [26929 26949])
            ("make-variable-buffer-local" code nil nil [26950 26989])
            ("c-new-END" variable nil nil [26990 27010])
            ("make-variable-buffer-local" code nil nil [27011 27050])
            ("c-common-init" function (:arguments ("mode")) nil [27052 28739])
            ("c-count-cfss" function (:arguments ("lv-alist")) nil [28741 29106])
            ("c-before-hack-hook" function nil nil [29108 30508])
            ("c-remove-any-local-eval-or-mode-variables" function nil nil [30510 32202])
            ("c-postprocess-file-styles" function nil nil [32204 34096])
            ("if" code nil nil [34098 34281])
            ("c-run-mode-hooks" function (:arguments ("hooks")) nil [34283 34595])
            ("c-old-BOM" variable nil nil [34885 34905])
            ("make-variable-buffer-local" code nil nil [34906 34945])
            ("c-old-EOM" variable nil nil [34946 34966])
            ("make-variable-buffer-local" code nil nil [34967 35006])
            ("c-extend-region-for-CPP" function (:arguments ("beg" "end")) nil [35008 35820])
            ("c-extend-font-lock-region-for-macros" function (:arguments ("begg" "endd" "old-len")) nil [35822 36948])
            ("c-neutralize-CPP-line" function (:arguments ("beg" "end")) nil [36950 37832])
            ("c-neutralize-syntax-in-and-mark-CPP" function (:arguments ("begg" "endd" "old-len")) nil [37834 41026])
            ("c-before-change" function (:arguments ("beg" "end")) nil [41028 44534])
            ("c-in-after-change-fontification" variable nil nil [44536 44580])
            ("make-variable-buffer-local" code nil nil [44581 44642])
            ("c-after-change" function (:arguments ("beg" "end" "old-len")) nil [44740 47069])
            ("c-set-fl-decl-start" function (:arguments ("pos")) nil [47071 48666])
            ("c-change-set-fl-decl-start" function (:arguments ("_beg" "_end" "_old-len")) nil [48692 49087])
            ("c-context-set-fl-decl-start" function (:arguments ("beg" "end")) nil [49089 49365])
            ("c-font-lock-fontify-region" function (:arguments ("beg" "end" "verbose")) nil [49367 50493])
            ("c-after-font-lock-init" function nil nil [50495 50778])
            ("c-font-lock-init" function nil nil [50780 51791])
            ("c-extend-after-change-region" function (:arguments ("_beg" "_end" "_old-len")) nil [51793 52368])
            ("c-electric-indent-mode-hook" function nil nil [52434 52865])
            ("c-electric-indent-local-mode-hook" function nil nil [52867 53157])
            ("c-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c))) nil [53179 53302])
            ("c-define-abbrev-table" code nil nil [53304 53504])
            ("c-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [53506 53708])
            ("easy-menu-define" code nil nil [53711 53811])
            ("define-derived-mode" code nil nil [55399 56414])
            ("c++-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c++))) nil [56438 56567])
            ("c-define-abbrev-table" code nil nil [56569 56828])
            ("c++-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) (define-key map ":" (quote c-scope-operator)) (define-key map "<" (quote c-electric-lt-gt)) (define-key map ">" (quote c-electric-lt-gt)) map)) nil [56830 57187])
            ("easy-menu-define" code nil nil [57189 57299])
            ("define-derived-mode" code nil nil [57316 58346])
            ("objc-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table objc))) nil [58378 58510])
            ("c-define-abbrev-table" code nil nil [58512 58718])
            ("objc-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [58720 58937])
            ("easy-menu-define" code nil nil [58939 59054])
            ("define-derived-mode" code nil nil [59143 60190])
            ("java-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table java))) nil [60215 60347])
            ("c-define-abbrev-table" code nil nil [60349 60669])
            ("java-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [60671 60833])
            ("c-Java-defun-prompt-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(\\(\\(public\\|protected\\|private\\|const\\|abstract\\|synchronized\\|final\\|static\\|threadsafe\\|transient\\|native\\|volatile\\)\\s-+\\)*\\(\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*[][_$.a-zA-Z0-9]+\\|[[a-zA-Z]\\)\\s-*\\)\\s-+\\)\\)?\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*\\s-+\\)\\s-*\\)?\\([_a-zA-Z][^][ 	:;.,{}()=]*\\|\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)\\)\\s-*\\(([^);{}]*)\\)?\\([] 	]*\\)\\(\\s-*\\<throws\\>\\s-*\\(\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)[, 	
]*\\)+\\)?\\s-*")
                nil [61090 61610])
            ("easy-menu-define" code nil nil [61612 61727])
            ("define-derived-mode" code nil nil [61819 62783])
            ("idl-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table idl))) nil [62824 62953])
            ("c-define-abbrev-table" code nil nil [62955 63054])
            ("idl-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [63056 63215])
            ("easy-menu-define" code nil nil [63217 63327])
            ("define-derived-mode" code nil nil [63417 64384])
            ("pike-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table pike))) nil [64409 64541])
            ("c-define-abbrev-table" code nil nil [64543 64749])
            ("pike-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [64751 64937])
            ("easy-menu-define" code nil nil [64939 65054])
            ("define-derived-mode" code nil nil [65254 66226])
            ("c-define-abbrev-table" code nil nil [66618 66822])
            ("awk-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "#" (quote self-insert-command)) (define-key map "/" (quote self-insert-command)) (define-key map "*" (quote self-insert-command)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "\341" (quote c-beginning-of-statement)) (define-key map "\345" (quote c-end-of-statement)) (define-key map "\201" (quote c-awk-beginning-of-defun)) (define-key map "\205" (quote c-awk-end-of-defun)) map)) nil [66824 67518])
            ("easy-menu-define" code nil nil [67520 67630])
            ("awk-mode-syntax-table" variable nil nil [67670 67700])
            ("declare-function" code nil nil [67701 67753])
            ("define-derived-mode" code nil nil [67770 68910])
            ("c-mode-help-address" variable
               (:constant-flag t
                :default-value "bug-cc-mode@gnu.org")
                nil [68932 69027])
            ("c-version" function (:user-visible-flag t) nil [69029 69198])
            ("define-obsolete-variable-alias" code nil nil [69200 69296])
            ("c-prepare-bug-report-hook" variable nil nil [69297 69335])
            ("reporter-prompt-for-summary-p" variable nil nil [69376 69414])
            ("reporter-dont-compact-list" variable nil nil [69415 69450])
            ("c-submit-bug-report" function (:user-visible-flag t) nil [69452 71449])
            ("cc-provide" code nil nil [71453 71474]))          
      :file "cc-mode.el"
      :pointmax 71501
      :fsize 71500
      :lastmodtime '(21793 5616 0 0)
      :unmatched-syntax '((close-paren 3485 . 3486) (symbol 3250 . 3267) (open-paren 3249 . 3250) (close-paren 3246 . 3247) (symbol 3152 . 3168) (open-paren 3151 . 3152)))
    (semanticdb-table "cc-fonts.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [2619 2834])
            ("cc-require" code nil nil [2837 2858])
            ("cc-require-when-compile" code nil nil [2859 2894])
            ("cc-require" code nil nil [2895 2916])
            ("cc-require" code nil nil [2917 2940])
            ("cc-require-when-compile" code nil nil [2941 2974])
            ("cc-fonts" package nil nil [3211 3230])
            ("cc-external-require" code nil nil [3232 3264])
            ("cc-bytecomp-defvar" code nil nil [3266 3315])
            ("cc-bytecomp-defvar" code nil nil [3619 3664])
            ("cc-bytecomp-defvar" code nil nil [3665 3707])
            ("cc-bytecomp-defun" code nil nil [3708 3761])
            ("cc-bytecomp-defun" code nil nil [3762 3805])
            ("cc-bytecomp-defun" code nil nil [3806 3849])
            ("cc-bytecomp-defun" code nil nil [3850 3896])
            ("c-preprocessor-face-name" variable
               (:constant-flag t
                :default-value (cond ((c-face-name-p (quote font-lock-preprocessor-face)) (quote font-lock-preprocessor-face)) ((c-face-name-p (quote font-lock-builtin-face)) (quote font-lock-builtin-face)) (t (quote font-lock-reference-face))))
                nil [4081 4451])
            ("cc-bytecomp-defvar" code nil nil [4453 4497])
            ("c-label-face-name" variable
               (:constant-flag t
                :default-value (cond ((c-face-name-p (quote font-lock-label-face)) (quote font-lock-label-face)) ((and (c-face-name-p (quote font-lock-constant-face)) (eq font-lock-constant-face (quote font-lock-constant-face))) (quote font-lock-constant-face)) (t (quote font-lock-reference-face))))
                nil [4499 5081])
            ("c-constant-face-name" variable
               (:constant-flag t
                :default-value (if (and (c-face-name-p (quote font-lock-constant-face)) (eq font-lock-constant-face (quote font-lock-constant-face))) (quote font-lock-constant-face) c-label-face-name))
                nil [5083 5346])
            ("c-reference-face-name" variable
               (:constant-flag t
                :default-value (with-no-warnings (if (and (c-face-name-p (quote font-lock-reference-face)) (eq font-lock-reference-face (quote font-lock-reference-face))) (quote font-lock-reference-face) c-label-face-name)))
                nil [5348 5750])
            ("c-doc-face-name" variable
               (:constant-flag t
                :default-value (cond ((c-face-name-p (quote font-lock-doc-string-face)) (quote font-lock-doc-string-face)) ((c-face-name-p (quote font-lock-doc-face)) (quote font-lock-doc-face)) (t (quote font-lock-comment-face))))
                nil [5868 6107])
            ("c-doc-markup-face-name" variable
               (:constant-flag t
                :default-value (if (c-face-name-p (quote font-lock-doc-markup-face)) (quote font-lock-doc-markup-face) c-label-face-name))
                nil [6109 6374])
            ("c-negation-char-face-name" variable
               (:constant-flag t
                :default-value (if (c-face-name-p (quote font-lock-negation-char-face)) (quote font-lock-negation-char-face)))
                nil [6376 6558])
            ("cc-bytecomp-defun" code nil nil [6560 6600])
            ("c-make-inverse-face" function (:arguments ("oldface" "newface")) nil [6619 7281])
            ("c-annotation-face" variable (:default-value (quote c-annotation-face)) nil [7283 7328])
            ("c-annotation-face" variable
               (:default-value (quote ((default :inherit font-lock-constant-face)))
                :type "face")
                nil [7330 7505])
            ("def-edebug-spec" code nil nil [20774 20892])
            ("def-edebug-spec" code nil nil [20563 20607])
            ("def-edebug-spec" code nil nil [20513 20560])
            ("c-make-font-lock-context-search-function" function (:arguments ("normal" "state-stanzas")) nil [17938 20418])
            ("c-make-font-lock-BO-decl-search-function" function (:arguments ("regexp" "highlights")) nil [15434 17934])
            ("c-make-font-lock-search-function" function (:arguments ("regexp" "highlights")) nil [12523 15430])
            ("c-make-font-lock-search-form" function (:arguments ("regexp" "highlights")) nil [11134 12519])
            ("c-make-syntactic-matcher" function (:arguments ("regexp")) nil [10418 11130])
            ("c-skip-comments-and-strings" function (:arguments ("limit")) nil [9842 10414])
            ("put" code nil nil [9783 9838])
            ("c-fontify-types-and-refs" function (:arguments ("varlist" "body")) nil [9339 9780])
            ("c-put-font-lock-string-face" function (:arguments ("from" "to")) nil [8904 9335])
            ("c-remove-font-lock-face" function (:arguments ("from" "to")) nil [8613 8900])
            ("c-put-font-lock-face" function (:arguments ("from" "to" "face")) nil [8004 8609])
            ("make-variable-buffer-local" code nil nil [7951 8000])
            ("c-font-lock-context" variable nil nil [7916 7948])
            ("c-fontify-recorded-types-and-refs" function nil nil [20898 21705])
            ("c-lang-defconst" code nil nil [21707 27389])
            ("c-font-lock-invalid-string" function nil nil [27391 28391])
            ("c-lang-defconst" code nil nil [28393 33868])
            ("c-font-lock-complex-decl-prepare" function (:arguments ("limit")) nil [33870 36113])
            ("c-font-lock-<>-arglists" function (:arguments ("limit")) nil [36115 38935])
            ("c-font-lock-declarators" function (:arguments ("limit" "list" "types")) nil [38937 45334])
            ("c-font-lock-maybe-decl-faces" variable
               (:constant-flag t
                :default-value (list nil font-lock-type-face c-reference-face-name font-lock-keyword-face))
                nil [45336 45648])
            ("c-font-lock-declarations" function (:arguments ("limit")) nil [45650 59458])
            ("c-font-lock-enum-tail" function (:arguments ("limit")) nil [59460 60459])
            ("c-font-lock-enclosing-decls" function (:arguments ("limit")) nil [60461 61745])
            ("c-lang-defconst" code nil nil [61747 64329])
            ("c-lang-defconst" code nil nil [64331 69838])
            ("c-font-lock-labels" function (:arguments ("limit")) nil [69840 71568])
            ("c-lang-defconst" code nil nil [71570 74481])
            ("c-lang-defconst" code nil nil [74483 74547])
            ("c-lang-defconst" code nil nil [74549 74750])
            ("c-lang-defconst" code nil nil [74752 74954])
            ("c-compose-keywords-list" function (:arguments ("base-list")) nil [74956 76396])
            ("c-override-default-keywords" function (:arguments ("def-var")) nil [76398 77298])
            ("c-override-default-keywords" code nil nil [77310 77361])
            ("c-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 c))
                nil [77363 77572])
            ("c-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 c))
                nil [77574 77927])
            ("c-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 c))
                nil [77929 78221])
            ("c-font-lock-keywords" variable (:default-value c-font-lock-keywords-3) nil [78223 78323])
            ("c-font-lock-keywords-2" function nil nil [78325 78409])
            ("c-font-lock-keywords-3" function nil nil [78410 78494])
            ("c-font-lock-keywords" function nil nil [78495 78575])
            ("c-font-lock-c++-new" function (:arguments ("limit")) nil [78589 83177])
            ("c-override-default-keywords" code nil nil [83179 83232])
            ("c++-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 c++))
                nil [83234 83449])
            ("c++-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 c++))
                nil [83451 83814])
            ("c++-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 c++))
                nil [83816 84118])
            ("c++-font-lock-keywords" variable (:default-value c++-font-lock-keywords-3) nil [84120 84226])
            ("c++-font-lock-keywords-2" function nil nil [84228 84316])
            ("c++-font-lock-keywords-3" function nil nil [84317 84405])
            ("c++-font-lock-keywords" function nil nil [84406 84490])
            ("c-font-lock-objc-method" function nil nil [84512 86015])
            ("c-font-lock-objc-methods" function (:arguments ("limit")) nil [86017 86567])
            ("c-override-default-keywords" code nil nil [86569 86623])
            ("objc-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 objc))
                nil [86625 86846])
            ("objc-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 objc))
                nil [86848 87223])
            ("objc-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 objc))
                nil [87225 87539])
            ("objc-font-lock-keywords" variable (:default-value objc-font-lock-keywords-3) nil [87541 87657])
            ("objc-font-lock-keywords-2" function nil nil [87659 87749])
            ("objc-font-lock-keywords-3" function nil nil [87750 87840])
            ("objc-font-lock-keywords" function nil nil [87841 87927])
            ("when" code nil nil [88200 88408])
            ("c-override-default-keywords" code nil nil [88423 88477])
            ("java-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 java))
                nil [88479 88666])
            ("java-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 java))
                nil [88668 89036])
            ("java-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 java))
                nil [89038 89341])
            ("java-font-lock-keywords" variable (:default-value java-font-lock-keywords-3) nil [89343 89452])
            ("java-font-lock-keywords-2" function nil nil [89454 89544])
            ("java-font-lock-keywords-3" function nil nil [89545 89635])
            ("java-font-lock-keywords" function nil nil [89636 89722])
            ("c-override-default-keywords" code nil nil [89742 89795])
            ("idl-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 idl))
                nil [89797 89987])
            ("idl-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 idl))
                nil [89989 90358])
            ("idl-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 idl))
                nil [90360 90668])
            ("idl-font-lock-keywords" variable (:default-value idl-font-lock-keywords-3) nil [90670 90782])
            ("idl-font-lock-keywords-2" function nil nil [90784 90872])
            ("idl-font-lock-keywords-3" function nil nil [90873 90961])
            ("idl-font-lock-keywords" function nil nil [90962 91046])
            ("c-override-default-keywords" code nil nil [91061 91115])
            ("pike-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 pike))
                nil [91117 91335])
            ("pike-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 pike))
                nil [91337 91705])
            ("pike-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 pike))
                nil [91707 92014])
            ("pike-font-lock-keywords" variable (:default-value pike-font-lock-keywords-3) nil [92016 92125])
            ("pike-font-lock-keywords-2" function nil nil [92127 92217])
            ("pike-font-lock-keywords-3" function nil nil [92218 92308])
            ("pike-font-lock-keywords" function nil nil [92309 92395])
            ("c-font-lock-doc-comments" function (:arguments ("prefix" "limit" "keywords")) nil [92418 95742])
            ("put" code nil nil [95743 95798])
            ("c-find-invalid-doc-markup" function (:arguments ("regexp" "limit")) nil [95800 96542])
            ("gtkdoc-font-lock-doc-comments" variable
               (:constant-flag t
                :default-value (let ((symbol "[a-zA-Z0-9_]+") (header "^ \\* ")) (\` (((\, (concat header "\\(" symbol "\\):[ 	]*$")) 1 (\, c-doc-markup-face-name) prepend nil) ((\, (concat symbol "()")) 0 (\, c-doc-markup-face-name) prepend nil) ((\, (concat header "\\(" "@" symbol "\\):")) 1 (\, c-doc-markup-face-name) prepend nil) ((\, (concat "[#%@]" symbol)) 0 (\, c-doc-markup-face-name) prepend nil)))))
                nil [96611 97080])
            ("gtkdoc-font-lock-doc-protection" variable
               (:constant-flag t
                :default-value (\` (("< \\(public\\|private\\|protected\\) >" 1 (\, c-doc-markup-face-name) prepend nil))))
                nil [97082 97215])
            ("gtkdoc-font-lock-keywords" variable
               (:constant-flag t
                :default-value (\` (((\, (lambda (limit) (c-font-lock-doc-comments "/\\*\\*$" limit gtkdoc-font-lock-doc-comments) (c-font-lock-doc-comments "/\\*< " limit gtkdoc-font-lock-doc-protection)))))))
                nil [97217 97436])
            ("javadoc-font-lock-doc-comments" variable
               (:constant-flag t
                :default-value (\` (("{@[a-z]+[^}
]*}" 0 (\, c-doc-markup-face-name) prepend nil) ("^\\(/\\*\\)?\\(\\s \\|\\*\\)*\\(@[a-z]+\\)" 3 (\, c-doc-markup-face-name) prepend nil) ((\, (concat "</?\\sw" "\\(" (concat "\\sw\\|\\s \\|[=
*.:]\\|" "\"[^\"]*\"\\|'[^']*'") "\\)*>")) 0 (\, c-doc-markup-face-name) prepend nil) ("&\\(\\sw\\|[.:]\\)+;" 0 (\, c-doc-markup-face-name) prepend nil) ((\, (lambda (limit) (c-find-invalid-doc-markup "[<>&]\\|{@" limit))) 0 (quote font-lock-warning-face) prepend nil))))
                nil [97451 98246])
            ("javadoc-font-lock-keywords" variable
               (:constant-flag t
                :default-value (\` (((\, (lambda (limit) (c-font-lock-doc-comments "/\\*\\*" limit javadoc-font-lock-doc-comments)))))))
                nil [98248 98388])
            ("autodoc-decl-keywords" variable
               (:constant-flag t
                :default-value (cc-eval-when-compile (c-make-keywords-re t (quote ("@decl" "@elem" "@index" "@member")) (quote pike-mode))))
                nil [98408 98633])
            ("autodoc-decl-type-keywords" variable
               (:constant-flag t
                :default-value (cc-eval-when-compile (c-make-keywords-re t (quote ("@elem" "@member")) (quote pike-mode))))
                nil [98635 98827])
            ("autodoc-font-lock-line-markup" function (:arguments ("limit")) nil [98829 101411])
            ("autodoc-font-lock-doc-comments" variable
               (:constant-flag t
                :default-value (\` (("@\\(\\w+{\\|\\[\\([^]@
]\\|@@\\)*\\]\\|[@}]\\|$\\)" 0 (\, c-doc-markup-face-name) prepend nil) (autodoc-font-lock-line-markup) ((\, (lambda (limit) (c-find-invalid-doc-markup "@" limit))) 0 (quote font-lock-warning-face) prepend nil))))
                nil [101413 101787])
            ("autodoc-font-lock-keywords" function nil nil [101789 102280])
            ("cc-provide" code nil nil [102357 102379]))          
      :file "cc-fonts.el"
      :pointmax 102407
      :fsize 102406
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 20892 . 20893) (symbol 7508 . 7524) (open-paren 7507 . 7508) (close-paren 2834 . 2835) (symbol 2599 . 2616) (open-paren 2598 . 2599)))
    (semanticdb-table "ada-xref.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("compile" include nil nil [1597 1615])
            ("comint" include nil nil [1616 1633])
            ("find-file" include nil nil [1634 1654])
            ("ada-mode" include nil nil [1655 1674])
            ("ada-xref-other-buffer" variable (:default-value t) nil [1701 1886])
            ("ada-xref-create-ali" variable nil nil [1888 2075])
            ("ada-xref-confirm-compile" variable nil nil [2077 2228])
            ("ada-krunch-args" variable (:default-value "0") nil [2230 2430])
            ("ada-gnat-cmd" variable (:default-value "gnat") nil [2432 2682])
            ("ada-gnatls-args" variable (:default-value (quote ("-v"))) nil [2684 3167])
            ("ada-prj-default-comp-opt" variable (:default-value "-gnatq -gnatQ") nil [3169 3282])
            ("ada-prj-default-bind-opt" variable nil nil [3284 3379])
            ("ada-prj-default-link-opt" variable nil nil [3381 3476])
            ("ada-prj-default-gnatmake-opt" variable (:default-value "-g") nil [3478 3587])
            ("ada-prj-default-gpr-file" variable nil nil [3589 3788])
            ("ada-prj-ada-project-path-sep" variable (:default-value (cond ((boundp (quote path-separator)) path-separator) ((memq system-type (quote (windows-nt ms-dos))) ";") (t ":"))) nil [3790 4034])
            ("ada-prj-gnatfind-switches" variable (:default-value "-rf") nil [4036 4376])
            ("ada-prj-default-check-cmd" variable (:default-value (concat "${cross_prefix}gnatmake -u -c -gnatc ${gnatmake_opt} ${full_current}" " -cargs ${comp_opt}")) nil [4378 4752])
            ("ada-prj-default-comp-cmd" variable (:default-value (concat "${cross_prefix}gnatmake -u -c ${gnatmake_opt} ${full_current} -cargs" " ${comp_opt}")) nil [4754 5120])
            ("ada-prj-default-debugger" variable (:default-value "${cross_prefix}gdb") nil [5122 5241])
            ("ada-prj-default-make-cmd" variable (:default-value (concat "${cross_prefix}gnatmake -o ${main} ${main} ${gnatmake_opt} " "-cargs ${comp_opt} -bargs ${bind_opt} -largs ${link_opt}")) nil [5243 5549])
            ("ada-prj-default-project-file" variable nil nil [5551 5820])
            ("ada-gnatstub-opts" variable (:default-value "-q -I${src_dir}") nil [5822 6043])
            ("ada-always-ask-project" variable nil nil [6045 6240])
            ("ada-on-ms-windows" variable
               (:constant-flag t
                :default-value (memq system-type (quote (windows-nt))))
                nil [6242 6342])
            ("ada-tight-gvd-integration" variable nil nil [6344 6539])
            ("ada-xref-search-with-egrep" variable (:default-value t) nil [6541 6907])
            ("ada-load-project-hook" variable nil nil [6909 7484])
            ("ada-last-prj-file" variable nil nil [7544 7628])
            ("ada-prj-file-extension" variable
               (:constant-flag t
                :default-value ".adp")
                nil [7630 7712])
            ("ada-xref-runtime-library-specs-path" variable (:default-value (quote nil)) nil [7714 7864])
            ("ada-xref-runtime-library-ali-path" variable (:default-value (quote nil)) nil [7866 8012])
            ("ada-xref-pos-ring" variable (:default-value (quote nil)) nil [8014 8146])
            ("ada-cd-command" variable (:default-value (if (string-match "cmdproxy.exe" shell-file-name) "cd /d" "cd")) nil [8148 8406])
            ("ada-command-separator" variable (:default-value (if ada-on-ms-windows " && " "
")) nil [8408 8644])
            ("ada-xref-pos-ring-max" variable
               (:constant-flag t
                :default-value 16)
                nil [8646 8743])
            ("ada-operator-re" variable (:default-value "\\+\\|-\\|/\\|\\*\\*\\|\\*\\|=\\|&\\|abs\\|mod\\|rem\\|and\\|not\\|or\\|xor\\|<=\\|<\\|>=\\|>") nil [8745 8902])
            ("ada-xref-project-files" variable (:default-value (quote nil)) nil [8904 9486])
            ("ada-make-identlist" function nil nil [9703 9755])
            ("ada-name-of" function (:arguments ("identlist")) nil [9756 9820])
            ("ada-line-of" function (:arguments ("identlist")) nil [9821 9885])
            ("ada-column-of" function (:arguments ("identlist")) nil [9886 9950])
            ("ada-file-of" function (:arguments ("identlist")) nil [9951 10015])
            ("ada-ali-index-of" function (:arguments ("identlist")) nil [10016 10083])
            ("ada-declare-file-of" function (:arguments ("identlist")) nil [10084 10151])
            ("ada-references-of" function (:arguments ("identlist")) nil [10152 10219])
            ("ada-on-declaration" function (:arguments ("identlist")) nil [10220 10287])
            ("ada-set-name" function (:arguments ("identlist" "name")) nil [10289 10367])
            ("ada-set-line" function (:arguments ("identlist" "line")) nil [10368 10446])
            ("ada-set-column" function (:arguments ("identlist" "col")) nil [10447 10524])
            ("ada-set-file" function (:arguments ("identlist" "file")) nil [10525 10603])
            ("ada-set-ali-index" function (:arguments ("identlist" "index")) nil [10604 10683])
            ("ada-set-declare-file" function (:arguments ("identlist" "file")) nil [10684 10762])
            ("ada-set-references" function (:arguments ("identlist" "ref")) nil [10763 10840])
            ("ada-set-on-declaration" function (:arguments ("ident" "value")) nil [10841 10915])
            ("ada-get-ali-buffer" function (:arguments ("file")) nil [10917 11081])
            ("ada-quote-cmd" function (:arguments ("cmd")) nil [11160 11324])
            ("ada-find-executable" function (:arguments ("exec-name")) nil [11326 11727])
            ("ada-initialize-runtime-library" function (:arguments ("cross-prefix")) nil [11729 13661])
            ("ada-gnat-parse-gpr" function (:arguments ("plist" "gpr-file")) nil [13663 15821])
            ("ada-treat-cmd-string" function (:arguments ("cmd-string")) nil [15823 17223])
            ("ada-xref-get-project-field" function (:arguments ("field")) nil [17226 18242])
            ("ada-xref-get-src-dir-field" function nil nil [18244 18729])
            ("ada-xref-get-obj-dir-field" function nil nil [18731 19214])
            ("ada-xref-set-project-field" function (:arguments ("field" "value")) nil [19216 19654])
            ("ada-xref-update-project-menu" function nil nil [19656 20452])
            ("ada-do-file-completion" function (:arguments ("string" "predicate" "flag")) nil [20897 21711])
            ("ada-find-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [21728 22049])
            ("ada-require-project-file" function nil nil [22122 22383])
            ("ada-xref-current-project-file" function nil nil [22385 22661])
            ("ada-xref-current-project" function nil nil [22663 22895])
            ("ada-show-current-project" function (:user-visible-flag t) nil [22897 23049])
            ("ada-show-current-main" function (:user-visible-flag t) nil [23051 23220])
            ("ada-xref-push-pos" function (:arguments ("filename" "position")) nil [23222 23550])
            ("ada-xref-goto-previous-reference" function (:user-visible-flag t) nil [23552 23833])
            ("ada-convert-file-name" function (:arguments ("name")) nil [23835 24031])
            ("ada-set-default-project-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [24081 24256])
            ("ada-prj-find-prj-file" function (:arguments ("no-user-question")) nil [24325 27057])
            ("ada-default-prj-properties" function nil nil [27059 28689])
            ("ada-parse-prj-file" function (:arguments ("prj-file")) nil [28691 29329])
            ("ada-parse-prj-file-1" function (:arguments ("prj-file" "project")) nil [29331 34270])
            ("ada-select-prj-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [34272 35157])
            ("ada-find-references" function
               (:user-visible-flag t
                :arguments ("pos" "arg" "local-only"))
                nil [35159 36181])
            ("ada-find-local-references" function
               (:user-visible-flag t
                :arguments ("pos" "arg"))
                nil [36183 36458])
            ("ada-gnatfind-buffer-name" variable
               (:constant-flag t
                :default-value "*gnatfind*")
                nil [36460 36508])
            ("ada-find-any-references" function
               (:user-visible-flag t
                :arguments ("entity" "file" "line" "column" "local-only" "append"))
                nil [36510 38784])
            ("defalias" code nil nil [38786 38860])
            ("ada-complete-identifier" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [38938 40038])
            ("ada-point-and-xref" function (:user-visible-flag t) nil [40109 40284])
            ("ada-point-and-xref-body" function (:user-visible-flag t) nil [40286 40452])
            ("ada-goto-body" function
               (:user-visible-flag t
                :arguments ("pos" "other-frame"))
                nil [40454 40962])
            ("ada-goto-declaration" function
               (:user-visible-flag t
                :arguments ("pos" "other-frame"))
                nil [40964 42458])
            ("ada-goto-declaration-other-frame" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [42460 42696])
            ("ada-remote" function (:arguments ("command")) nil [42698 43016])
            ("ada-get-absolute-dir-list" function (:arguments ("dir-list" "root-dir")) nil [43018 43334])
            ("ada-set-environment" function nil nil [43336 44263])
            ("ada-compile-application" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [44265 45407])
            ("ada-set-main-compile-application" function (:user-visible-flag t) nil [45409 45861])
            ("ada-compile-current" function
               (:user-visible-flag t
                :arguments ("arg" "prj-field"))
                nil [45863 46814])
            ("ada-check-current" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46816 47023])
            ("ada-run-application" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [47025 48574])
            ("ada-gdb-application" function
               (:user-visible-flag t
                :arguments ("arg" "executable-name"))
                nil [48576 52672])
            ("ada-reread-prj-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [52674 52992])
            ("ada-xref-current" function (:arguments ("file" "ali-file-name")) nil [53022 54442])
            ("ada-find-file-in-dir" function (:arguments ("file" "dir-list")) nil [54444 54784])
            ("ada-find-ali-file-in-dir" function (:arguments ("file")) nil [54786 55079])
            ("ada-find-src-file-in-dir" function (:arguments ("file")) nil [55081 55353])
            ("ada-get-ali-file-name" function (:arguments ("file")) nil [55355 59107])
            ("ada-get-ada-file-name" function (:arguments ("file" "original-file")) nil [59109 59869])
            ("ada-find-file-number-in-ali" function (:arguments ("file")) nil [59871 60213])
            ("ada-read-identifier" function (:arguments ("pos")) nil [60215 62322])
            ("ada-get-all-references" function (:arguments ("identlist")) nil [62324 66565])
            ("ada-xref-find-in-modified-ali" function (:arguments ("identlist")) nil [66567 69413])
            ("ada-find-in-ali" function (:arguments ("identlist" "other-frame")) nil [69416 72386])
            ("ada-find-in-src-path" function (:arguments ("identlist" "other-frame")) nil [72388 76262])
            ("ada-xref-change-buffer" function (:arguments ("file" "line" "column" "identlist" "other-frame")) nil [76264 77359])
            ("ada-xref-search-nearest" function (:arguments ("name")) nil [77362 78746])
            ("ada-goto-parent" function (:user-visible-flag t) nil [78801 80123])
            ("ada-make-filename-from-adaname" function (:arguments ("adaname")) nil [80125 81173])
            ("ada-make-body-gnatstub" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [81175 83128])
            ("ada-xref-initialize" function nil nil [83130 83698])
            ("add-hook" code nil nil [83833 83879])
            ("define-error" code nil nil [83909 84019])
            ("ada-xref" package nil nil [84021 84040]))          
      :file "ada-xref.el"
      :pointmax 84068
      :fsize 84067
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "compile.el"
      :file "compile.el"
      :fsize 122788
      :lastmodtime '(21788 61018 0 0))
    (semanticdb-table "asm-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("asm" customgroup (:user-visible-flag t) nil [1765 1914])
            ("asm-comment-char" variable (:default-value 59) nil [1916 2034])
            ("asm-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 10 "> b" st) (modify-syntax-entry 47 ". 124b" st) (modify-syntax-entry 42 ". 23" st) st)) nil [2036 2270])
            ("asm-mode-abbrev-table" variable nil nil [2272 2347])
            ("define-abbrev-table" code nil nil [2348 2395])
            ("asm-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map ":" (quote asm-colon)) (define-key map ";" (quote comment-region)) (define-key map "
" (quote newline-and-indent)) (define-key map "" (quote newline-and-indent)) (define-key map [menu-bar asm-mode] (cons "Asm" (make-sparse-keymap))) (define-key map [menu-bar asm-mode comment-region] (quote (menu-item "Comment Region" comment-region :help "Comment or uncomment each line in the region"))) (define-key map [menu-bar asm-mode newline-and-indent] (quote (menu-item "Insert Newline and Indent" newline-and-indent :help "Insert a newline, then indent according to major mode"))) (define-key map [menu-bar asm-mode asm-colon] (quote (menu-item "Insert Colon" asm-colon :help "Insert a colon; if it follows a label, delete the label's indentation"))) map)) nil [2397 3352])
            ("asm-font-lock-keywords" variable
               (:constant-flag t
                :default-value (append (quote (("^\\(\\(\\sw\\|\\s_\\)+\\)\\>:?[ 	]*\\(\\sw+\\(\\.\\sw+\\)*\\)?" (1 font-lock-function-name-face) (3 font-lock-keyword-face nil t)) ("^\\(\\.\\(\\sw\\|\\s_\\)+\\)\\>:" 1 font-lock-function-name-face) ("^\\((\\sw+)\\)?\\s +\\(\\(\\.?\\sw\\|\\s_\\)+\\(\\.\\sw+\\)*\\)" 2 font-lock-keyword-face) ("^\\(\\.\\(\\sw\\|\\s_\\)+\\)\\>[^:]?" 1 font-lock-keyword-face) ("%\\sw+" . font-lock-variable-name-face))) cpp-font-lock-keywords))
                nil [3354 4022])
            ("define-derived-mode" code nil nil [4039 5807])
            ("asm-indent-line" function (:user-visible-flag t) nil [5809 6227])
            ("asm-calculate-indentation" function nil nil [6229 6621])
            ("asm-colon" function (:user-visible-flag t) nil [6623 7023])
            ("defalias" code nil nil [7055 7098])
            ("asm-comment" function (:user-visible-flag t) nil [7100 8886])
            ("asm-mode" package nil nil [8888 8907]))          
      :file "asm-mode.el"
      :pointmax 8935
      :fsize 8934
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "which-func.el"
      :file "which-func.el"
      :fsize 13707
      :lastmodtime '(21788 61018 0 0))
    (semanticdb-table "autoconf.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("autoconf-mode-map" variable (:default-value (make-sparse-keymap)) nil [1356 1403])
            ("autoconf-mode-hook" variable nil nil [1405 1469])
            ("autoconf-definition-regexp" variable
               (:constant-flag t
                :default-value "A\\(?:H_TEMPLATE\\|C_\\(?:SUBST\\|DEFINE\\(?:_UNQUOTED\\)?\\)\\)(\\[*\\(\\(?:\\sw\\|\\s_\\)+\\)\\]*")
                nil [1471 1612])
            ("autoconf-font-lock-keywords" variable (:default-value (\` (("\\_<A[CHMS]_\\(?:\\sw\\|\\s_\\)+" . font-lock-keyword-face) ((\, autoconf-definition-regexp) 1 font-lock-function-name-face) ("changequote" . font-lock-keyword-face)))) nil [1614 1933])
            ("autoconf-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 34 "." table) (modify-syntax-entry 10 ">" table) (modify-syntax-entry 35 "<" table) table)) nil [1935 2137])
            ("autoconf-imenu-generic-expression" variable (:default-value (list (list nil autoconf-definition-regexp 1))) nil [2139 2230])
            ("autoconf-current-defun-function" function nil nil [2278 2780])
            ("define-derived-mode" code nil nil [2797 3585])
            ("autoconf-mode" package nil nil [3587 3611])
            ("autoconf" package nil nil [3612 3631]))          
      :file "autoconf.el"
      :pointmax 3659
      :fsize 3658
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "antlr-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [3947 3960])
            ("easymenu" include nil nil [3963 3982])
            ("cc-mode" include nil nil [3983 4001])
            ("declare-function" code nil nil [4139 4215])
            ("ignore-errors-x" function (:arguments ("body")) nil [6718 7090])
            ("defunx" function (:arguments ("name" "arglist" "definition")) nil [5405 6715])
            ("cond-emacs-xemacs-macfn" function (:arguments ("args" "msg")) nil [4434 5175])
            ("cond-emacs-xemacs" function (:arguments ("args")) nil [4296 4431])
            ("save-buffer-state-x" function (:arguments ("body")) nil [7142 7703])
            ("put" code nil nil [7705 7755])
            ("outline-level" variable nil nil [7757 7779])
            ("imenu-use-markers" variable nil nil [7780 7806])
            ("imenu-create-index-function" variable nil nil [7807 7843])
            ("defalias" code nil nil [8323 8369])
            ("antlr" customgroup (:user-visible-flag t) nil [8548 8753])
            ("antlr-version" variable
               (:constant-flag t
                :default-value "2.2c")
                nil [8755 8882])
            ("antlr-language" variable nil nil [9102 9405])
            ("antlr-language-alist" variable (:default-value (quote ((java-mode "Java" nil "\"Java\"" "Java") (c++-mode "C++" "\"Cpp\"" "Cpp")))) nil [9407 10222])
            ("antlr-language-limit-n-regexp" variable (:default-value (quote (8192 . "language[ 	]*=[ 	]*\\(\"?[A-Z][A-Za-z_]*\"?\\)"))) nil [10224 10690])
            ("antlr-action-visibility" variable (:default-value 3) nil [10882 11276])
            ("antlr-indent-comment" variable (:default-value (quote tab)) nil [11278 11710])
            ("antlr-tab-offset-alist" variable (:default-value (quote ((antlr-mode nil 4 nil) (java-mode "antlr" 4 nil)))) nil [11712 12472])
            ("antlr-indent-style" variable (:default-value "java") nil [12474 12749])
            ("antlr-indent-item-regexp" variable (:default-value "[]}):;|&]") nil [12751 13015])
            ("antlr-indent-at-bol-alist" variable (:default-value (quote ((java-mode . "\\(package\\|import\\)\\>") (c++-mode . "#\\(assert\\|cpu\\|define\\|endif\\|el\\(if\\|se\\)\\|i\\(dent\\|f\\(def\\|ndef\\)?\\|mport\\|nclude\\(_next\\)?\\)\\|line\\|machine\\|pragma\\|system\\|un\\(assert\\|def\\)\\|warning\\)\\>")))) nil [13017 13871])
            ("antlr-disabling-cc-syntactic-symbols" variable (:default-value (quote (statement-block-intro defun-block-intro topmost-intro statement-case-intro member-init-intro arglist-intro brace-list-intro knr-argdecl-intro inher-intro objc-method-intro block-close defun-close class-close brace-list-close arglist-close inline-close extern-lang-close namespace-close))) nil [13907 14263])
            ("antlr-options-use-submenus" variable (:default-value t) nil [14453 14737])
            ("antlr-tool-version" variable (:default-value 20701) nil [14739 15232])
            ("antlr-options-auto-colon" variable (:default-value t) nil [15234 15658])
            ("antlr-options-style" variable nil nil [15660 16109])
            ("antlr-options-push-mark" variable (:default-value t) nil [16111 16756])
            ("antlr-options-assign-string" variable (:default-value " = ") nil [16758 17102])
            ("antlr-options-headings" variable (:default-value (quote ("file" "grammar" "rule" "subrule"))) nil [17290 17503])
            ("antlr-options-alists" variable (:default-value (quote ((("language" antlr-language-option-extra (20600 antlr-read-value "Generated language: " language-as-string (("Java") ("Cpp") ("HTML") ("Diagnostic"))) (20700 antlr-read-value "Generated language: " language-as-string (("Java") ("Cpp") ("HTML") ("Diagnostic") ("Sather")))) ("mangleLiteralPrefix" nil (20600 antlr-read-value "Prefix for literals (default LITERAL_): " t)) ("namespace" antlr-c++-mode-extra (20700 antlr-read-value "Wrap generated C++ code in namespace: " t)) ("namespaceStd" antlr-c++-mode-extra (20701 antlr-read-value "Replace ANTLR_USE_NAMESPACE(std) by: " t)) ("namespaceAntlr" antlr-c++-mode-extra (20701 antlr-read-value "Replace ANTLR_USE_NAMESPACE(antlr) by: " t)) ("genHashLines" antlr-c++-mode-extra (20701 antlr-read-boolean "Include #line in generated C++ code? "))) (("k" nil (20600 antlr-read-value "Lookahead depth: ")) ("importVocab" nil (20600 antlr-read-value "Import vocabulary: ")) ("exportVocab" nil (20600 antlr-read-value "Export vocabulary: ")) ("testLiterals" nil (20600 antlr-read-boolean "Test each token against literals table? ")) ("defaultErrorHandler" nil (20600 antlr-read-boolean "Generate default exception handler for each rule? ")) ("codeGenMakeSwitchThreshold" nil (20600 antlr-read-value "Min number of alternatives for 'switch': ")) ("codeGenBitsetTestThreshold" nil (20600 antlr-read-value "Min size of lookahead set for bitset test: ")) ("analyzerDebug" nil (20600 antlr-read-boolean "Display debugging info during grammar analysis? ")) ("codeGenDebug" nil (20600 antlr-read-boolean "Display debugging info during code generation? ")) ("buildAST" nil (20600 antlr-read-boolean "Use automatic AST construction/transformation? ")) ("ASTLabelType" nil (20600 antlr-read-value "Class of user-defined AST node: " t)) ("charVocabulary" nil (20600 nil "Insert character vocabulary")) ("interactive" nil (20600 antlr-read-boolean "Generate interactive lexer/parser? ")) ("caseSensitive" nil (20600 antlr-read-boolean "Case significant when matching characters? ")) ("caseSensitiveLiterals" nil (20600 antlr-read-boolean "Case significant when testing literals table? ")) ("classHeaderSuffix" nil (20600 nil "Additional string for grammar class definition")) ("filter" nil (20600 antlr-read-boolean "Skip rule (the name, true or false): " antlr-grammar-tokens)) ("namespace" antlr-c++-mode-extra (20700 antlr-read-value "Wrap generated C++ code for grammar in namespace: " t)) ("namespaceStd" antlr-c++-mode-extra (20701 antlr-read-value "Replace ANTLR_USE_NAMESPACE(std) by: " t)) ("namespaceAntlr" antlr-c++-mode-extra (20701 antlr-read-value "Replace ANTLR_USE_NAMESPACE(antlr) by: " t)) ("genHashLines" antlr-c++-mode-extra (20701 antlr-read-boolean "Include #line in generated C++ code? "))) (("testLiterals" nil (20600 antlr-read-boolean "Test this token against literals table? ")) ("defaultErrorHandler" nil (20600 antlr-read-boolean "Generate default exception handler for this rule? ")) ("ignore" nil (20600 antlr-read-value "In this rule, ignore tokens of type: " nil antlr-grammar-tokens)) ("paraphrase" nil (20600 antlr-read-value "In messages, replace name of this token by: " t))) (("warnWhenFollowAmbig" nil (20600 antlr-read-boolean "Display warnings for ambiguities with FOLLOW? ")) ("generateAmbigWarnings" nil (20600 antlr-read-boolean "Display warnings for ambiguities? ")) ("greedy" nil (20700 antlr-read-boolean "Make this optional/loop subrule greedy? ")))))) nil [17505 24483])
            ("antlr-tool-command" variable (:default-value "java antlr.Tool") nil [24689 24963])
            ("antlr-ask-about-save" variable (:default-value t) nil [24965 25167])
            ("antlr-makefile-specification" variable (:default-value (quote ("
" ("GENS" "GENS%d" " \\
	") "$(ANTLR)"))) nil [25169 26495])
            ("antlr-file-formats-alist" variable (:default-value (quote ((java-mode ("%sTokenTypes.java") ("%s.java")) (c++-mode ("%sTokenTypes.hpp") ("%s.cpp" "%s.hpp"))))) nil [26497 27267])
            ("antlr-special-file-formats" variable (:default-value (quote ("%sTokenTypes.txt" "expanded%s.g"))) nil [27269 27947])
            ("antlr-unknown-file-formats" variable (:default-value (quote ("?%s?.g" "?%s?"))) nil [27949 28518])
            ("antlr-help-unknown-file-text" variable (:default-value "## The following rules contain filenames of the form
##  \"?SUPERCLASS?.g\" (and \"?SUPERCLASS?TokenTypes.txt\")
## where SUPERCLASS is not found to be defined in any grammar file of
## the current directory or is defined more than once.  Please replace
## these filenames by the grammar files (and their exportVocab).

") nil [28520 29022])
            ("antlr-help-rules-intro" variable (:default-value "The following Makefile rules define the dependencies for all (non-
expanded) grammars in directory \"%s\".

They are stored in the kill-ring, i.e., you can insert them with C-y
into your Makefile.  You can also invoke M-x antlr-show-makefile-rules
from within a Makefile to insert them directly.


") nil [29024 29538])
            ("antlr-imenu-name" variable (:default-value t) nil [29710 30049])
            ("antlr-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote antlr-indent-command)) (define-key map "" (quote antlr-beginning-of-rule)) (define-key map "" (quote antlr-end-of-rule)) (define-key map "" (quote antlr-beginning-of-body)) (define-key map "" (quote antlr-end-of-body)) (define-key map "" (quote c-forward-into-nomenclature)) (define-key map "" (quote c-backward-into-nomenclature)) (define-key map "" (quote comment-region)) (define-key map "" (quote antlr-hide-actions)) (define-key map "" (quote antlr-run-tool)) (define-key map "" (quote antlr-insert-option)) (define-key map "a" (quote c-beginning-of-statement)) (define-key map "e" (quote c-end-of-statement)) (define-key map ":" (quote antlr-electric-character)) (define-key map ";" (quote antlr-electric-character)) (define-key map "|" (quote antlr-electric-character)) (define-key map "&" (quote antlr-electric-character)) (define-key map "(" (quote antlr-electric-character)) (define-key map ")" (quote antlr-electric-character)) (define-key map "{" (quote antlr-electric-character)) (define-key map "}" (quote antlr-electric-character)) map)) nil [30051 31312])
            ("easy-menu-define" code nil nil [31314 33222])
            ("antlr-font-lock-maximum-decoration" variable (:default-value (quote inherit)) nil [33399 34601])
            ("antlr-no-action-keywords" variable (:constant-flag t) nil [34603 34896])
            ("antlr-font-lock-keywords-alist" variable (:default-value (quote ((java-mode antlr-no-action-keywords java-font-lock-keywords-1 java-font-lock-keywords-2 java-font-lock-keywords-3) (c++-mode antlr-no-action-keywords c++-font-lock-keywords-1 c++-font-lock-keywords-2 c++-font-lock-keywords-3)))) nil [34898 35554])
            ("antlr-default-face" variable (:default-value (quote antlr-default)) nil [35556 35598])
            ("antlr-default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [35599 35730])
            ("put" code nil nil [35763 35825])
            ("put" code nil nil [35826 35883])
            ("antlr-keyword-face" variable (:default-value (quote antlr-keyword)) nil [35885 35927])
            ("antlr-keyword" variable
               (:default-value (cond-emacs-xemacs (quote ((((class color) (background light)) (:foreground "black" :EMACS :weight bold :XEMACS :bold t)) (t :inherit font-lock-keyword-face))))
                :type "face")
                nil [35928 36157])
            ("put" code nil nil [36190 36252])
            ("put" code nil nil [36253 36310])
            ("antlr-syntax-face" variable (:default-value (quote antlr-keyword)) nil [36312 36353])
            ("antlr-syntax" variable
               (:default-value (cond-emacs-xemacs (quote ((((class color) (background light)) (:foreground "black" :EMACS :weight bold :XEMACS :bold t)) (t :inherit font-lock-constant-face))))
                :type "face")
                nil [36354 36610])
            ("put" code nil nil [36643 36703])
            ("put" code nil nil [36704 36760])
            ("antlr-ruledef-face" variable (:default-value (quote antlr-ruledef)) nil [36762 36804])
            ("antlr-ruledef" variable
               (:default-value (cond-emacs-xemacs (quote ((((class color) (background light)) (:foreground "blue" :EMACS :weight bold :XEMACS :bold t)) (t :inherit font-lock-function-name-face))))
                :type "face")
                nil [36805 37059])
            ("put" code nil nil [37092 37154])
            ("put" code nil nil [37155 37212])
            ("antlr-tokendef-face" variable (:default-value (quote antlr-tokendef)) nil [37214 37258])
            ("antlr-tokendef" variable
               (:default-value (cond-emacs-xemacs (quote ((((class color) (background light)) (:foreground "blue" :EMACS :weight bold :XEMACS :bold t)) (t :inherit font-lock-function-name-face))))
                :type "face")
                nil [37259 37515])
            ("put" code nil nil [37548 37612])
            ("put" code nil nil [37613 37671])
            ("antlr-ruleref-face" variable (:default-value (quote antlr-ruleref)) nil [37673 37715])
            ("antlr-ruleref" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "blue4")) (t :inherit font-lock-type-face)))
                :type "face")
                nil [37716 37891])
            ("put" code nil nil [37924 37986])
            ("put" code nil nil [37987 38044])
            ("antlr-tokenref-face" variable (:default-value (quote antlr-tokenref)) nil [38046 38090])
            ("antlr-tokenref" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "orange4")) (t :inherit font-lock-type-face)))
                :type "face")
                nil [38091 38270])
            ("put" code nil nil [38303 38367])
            ("put" code nil nil [38368 38426])
            ("antlr-literal-face" variable (:default-value (quote antlr-literal)) nil [38428 38470])
            ("antlr-literal" variable
               (:default-value (cond-emacs-xemacs (quote ((((class color) (background light)) (:foreground "brown4" :EMACS :weight bold :XEMACS :bold t)) (t :inherit font-lock-string-face))))
                :type "face")
                nil [38471 38817])
            ("put" code nil nil [38850 38912])
            ("put" code nil nil [38913 38970])
            ("antlr-font-lock-literal-regexp" variable (:default-value "\"\\(\\sw\\(\\sw\\|-\\)*\\)\"") nil [38972 39420])
            ("antlr-class-header-regexp" variable (:default-value "\\(class\\)[ 	]+\\([A-Za-z\300-\326\330-\337]\\sw*\\)[ 	]+\\(extends\\)[ 	]+\\([A-Za-z\300-\326\330-\337]\\sw*\\)[ 	]*;") nil [39422 39619])
            ("antlr-font-lock-additional-keywords" variable (:default-value (cond-emacs-xemacs (\` ((antlr-invalidate-context-cache) ("\\$setType[ 	]*(\\([A-Za-z\300-\326\330-\337]\\sw*\\))" (1 antlr-tokendef-face)) ("\\$\\sw+" (0 antlr-keyword-face)) ((\, (lambda (limit) (if antlr-font-lock-literal-regexp (antlr-re-search-forward antlr-font-lock-literal-regexp limit)))) (1 antlr-literal-face t) :XEMACS (0 nil)) ((\, (lambda (limit) (antlr-re-search-forward antlr-class-header-regexp limit))) (1 antlr-keyword-face) (2 antlr-ruledef-face) (3 antlr-keyword-face) (4 (if (member (match-string 4) (quote ("Lexer" "Parser" "TreeParser"))) antlr-keyword-face font-lock-type-face))) ((\, (lambda (limit) (antlr-re-search-forward "\\<\\(header\\|options\\|tokens\\|exception\\|catch\\|returns\\)\\>" limit))) (1 antlr-keyword-face)) ((\, (lambda (limit) (antlr-re-search-forward "^\\(private\\|public\\|protected\\)\\>[ 	]*\\(\\(\\sw+[ 	]*\\(:\\)?\\)\\)?" limit))) (1 font-lock-type-face) (3 (if (antlr-upcase-p (char-after (match-beginning 3))) antlr-tokendef-face antlr-ruledef-face) nil t) (4 antlr-syntax-face nil t)) ((\, (lambda (limit) (antlr-re-search-forward "^\\(\\sw+\\)[ 	]*\\(:\\)?" limit))) (1 (if (antlr-upcase-p (char-after (match-beginning 0))) antlr-tokendef-face antlr-ruledef-face) nil t) (2 antlr-syntax-face nil t)) ((\, (lambda (limit) (antlr-re-search-forward "\\(\\sw+\\)[ 	]*\\([=:]\\)?" limit))) (1 (if (match-beginning 2) (if (eq (char-after (match-beginning 2)) 61) antlr-default-face font-lock-variable-name-face) (if (antlr-upcase-p (char-after (match-beginning 1))) antlr-tokenref-face antlr-ruleref-face))) (2 antlr-default-face nil t)) ((\, (lambda (limit) (antlr-re-search-forward "[|&:;(~]\\|)\\([*+?]\\|=>\\)?" limit))) (0 antlr-syntax-face)))))) nil [39621 41856])
            ("antlr-font-lock-defaults" variable (:default-value (quote (antlr-font-lock-keywords nil nil ((95 . "w") (40 . ".") (41 . ".")) beginning-of-defun))) nil [41858 42129])
            ("antlr-mode-hook" variable nil nil [42315 42376])
            ("antlr-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (c-populate-syntax-table st) st)) nil [42378 42584])
            ("antlr-action-syntax-table" variable (:default-value (let ((st (copy-syntax-table antlr-mode-syntax-table)) (slist (nth 3 antlr-font-lock-defaults))) (while slist (modify-syntax-entry (caar slist) (cdar slist) st) (setq slist (cdr slist))) st)) nil [42637 43188])
            ("antlr-mode-abbrev-table" variable nil nil [43190 43279])
            ("define-abbrev-table" code nil nil [43280 43329])
            ("antlr-slow-cache-enabling-symbol" variable (:default-value (quote loudly)) nil [43331 43730])
            ("antlr-slow-cache-diff-threshold" variable (:default-value 5000) nil [43732 43889])
            ("antlr-with-syntax-table" function (:arguments ("syntab" "body")) nil [44345 44577])
            ("put" code nil nil [44578 44632])
            ("put" code nil nil [44633 44694])
            ("defunx" code nil nil [44696 44819])
            ("defunx" code nil nil [44869 45143])
            ("defunx" code nil nil [45145 45381])
            ("antlr-slow-context-cache" variable nil nil [45562 45611])
            ("defunx" code nil nil [45811 46202])
            ("defunx" code nil nil [46204 48021])
            ("antlr-upcase-p" function (:arguments ("char")) nil [50035 50260])
            ("antlr-re-search-forward" function (:arguments ("regexp" "bound")) nil [50283 50971])
            ("antlr-search-forward" function (:arguments ("string")) nil [50973 51465])
            ("antlr-search-backward" function (:arguments ("string")) nil [51467 51967])
            ("antlr-skip-sexps" function (:arguments ("count")) nil [51969 52259])
            ("antlr-font-lock-keywords" function nil nil [52436 53063])
            ("antlr-grammar-tokens" function nil nil [53244 53387])
            ("antlr-imenu-create-index-function" function (:arguments ("tokenrefs-only")) nil [53389 54868])
            ("antlr-skip-exception-part" function (:arguments ("skip-comment")) nil [55076 56019])
            ("antlr-skip-file-prelude" function (:arguments ("skip-comment")) nil [56021 56754])
            ("antlr-next-rule" function (:arguments ("arg" "skip-comment")) nil [56756 58399])
            ("antlr-outside-rule-p" function nil nil [58401 58800])
            ("antlr-inside-rule-p" function nil nil [59060 59322])
            ("defunx" code nil nil [59324 59782])
            ("defunx" code nil nil [59784 60265])
            ("defunx" code nil nil [60267 61024])
            ("defunx" code nil nil [61026 61221])
            ("antlr-downcase-literals" function
               (:user-visible-flag t
                :arguments ("transform"))
                nil [61424 62028])
            ("antlr-upcase-literals" function (:user-visible-flag t) nil [62030 62171])
            ("antlr-hide-actions" function
               (:user-visible-flag t
                :arguments ("arg" "silent"))
                nil [62173 63884])
            ("antlr-insert-option" function
               (:user-visible-flag t
                :arguments ("level" "option" "location"))
                nil [64074 68619])
            ("antlr-insert-option-interactive" function (:arguments ("arg")) nil [68621 69338])
            ("antlr-options-menu-filter" function (:arguments ("level" "_menu-items")) nil [69340 69795])
            ("antlr-option-kind" function (:arguments ("requested")) nil [70000 71678])
            ("antlr-option-level" function (:arguments ("requested")) nil [71680 73907])
            ("antlr-option-location" function (:arguments ("orig" "min-vis" "max-vis" "min-area" "max-area" "withp")) nil [73909 75473])
            ("antlr-syntactic-grammar-depth" function (:arguments ("pos" "beg")) nil [75475 76261])
            ("antlr-insert-option-do" function (:arguments ("level" "option" "old" "area" "pos")) nil [76461 79094])
            ("antlr-option-spec" function (:arguments ("level" "option" "specs" "existsp")) nil [79096 80083])
            ("antlr-version-string" function (:arguments ("version")) nil [80085 80320])
            ("antlr-insert-option-existing" function (:arguments ("old" "value")) nil [80550 81247])
            ("antlr-insert-option-space" function (:arguments ("area" "old")) nil [81249 82826])
            ("antlr-insert-option-area" function (:arguments ("level")) nil [82828 83364])
            ("antlr-read-value" function (:arguments ("initial-contents" "prompt" "as-string" "table" "table-x")) nil [83573 84718])
            ("antlr-read-boolean" function (:arguments ("initial-contents" "prompt" "table")) nil [84720 85334])
            ("antlr-language-option-extra" function (:arguments ("phase" "_dummies")) nil [85336 86049])
            ("antlr-c++-mode-extra" function (:arguments ("phase" "option" "_dummies")) nil [86051 86650])
            ("antlr-file-dependencies" function nil nil [86838 89746])
            ("antlr-directory-dependencies" function (:arguments ("dirname")) nil [89748 91637])
            ("antlr-superclasses-glibs" function (:arguments ("supers" "classes")) nil [91832 93361])
            ("antlr-run-tool" function
               (:user-visible-flag t
                :arguments ("command" "file" "saved"))
                nil [93363 94057])
            ("antlr-run-tool-interactive" function nil nil [94059 94739])
            ("antlr-makefile-insert-variable" function (:arguments ("number" "pre" "post")) nil [94924 95275])
            ("antlr-insert-makefile-rules" function (:arguments ("in-makefile")) nil [95277 97724])
            ("antlr-show-makefile-rules" function (:user-visible-flag t) nil [97741 98753])
            ("antlr-indent-line" function nil nil [98932 102945])
            ("antlr-indent-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [102947 103441])
            ("antlr-electric-character" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [103443 104554])
            ("antlr-c-init-language-vars" function nil nil [104732 105911])
            ("antlr-language-option" function (:arguments ("search")) nil [105913 106731])
            ("define-derived-mode" code nil nil [106748 109215])
            ("put" code nil nil [109437 109473])
            ("antlr-set-tabs" function nil nil [109490 110006])
            ("antlr-mode" package nil nil [110008 110029]))          
      :file "antlr-mode.el"
      :pointmax 110100
      :fsize 110099
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 7703 . 7704) (symbol 7122 . 7139) (open-paren 7121 . 7122) (close-paren 7090 . 7091) (symbol 4276 . 4293) (open-paren 4275 . 4276) (close-paren 3960 . 3961) (symbol 3927 . 3944) (open-paren 3926 . 3927))))
  :file "!usr!share!emacs!24.5!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
