;; Object textmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "textmodes/"
  :tables
  (list
    (semanticdb-table "fill.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("fill" customgroup (:user-visible-flag t) nil [1014 1125])
            ("fill-individual-varying-indent" variable nil nil [1127 1538])
            ("colon-double-space" variable nil nil [1540 1667])
            ("put" code nil nil [1668 1724])
            ("fill-paragraph-function" variable nil nil [1726 2136])
            ("fill-paragraph-handle-comment" variable (:default-value t) nil [2138 2253])
            ("enable-kinsoku" variable (:default-value t) nil [2255 2568])
            ("set-fill-prefix" function (:user-visible-flag t) nil [2570 3157])
            ("adaptive-fill-mode" variable (:default-value t) nil [3159 3292])
            ("adaptive-fill-regexp" variable (:default-value (purecopy "[ 	]*\\([-–!|#%;>*·•‣⁃◦]+[ 	]*\\)*")) nil [3294 4014])
            ("adaptive-fill-first-line-regexp" variable (:default-value (purecopy "\\`[ 	]*\\'")) nil [4016 4559])
            ("adaptive-fill-function" variable nil nil [4561 4790])
            ("fill-indent-according-to-mode" variable nil nil [4792 4946])
            ("current-fill-column" function nil nil [4948 5984])
            ("canonically-space-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [5986 8237])
            ("fill-common-string-prefix" function (:arguments ("s1" "s2")) nil [8239 8516])
            ("fill-match-adaptive-prefix" function nil nil [8518 8904])
            ("fill-context-prefix" function (:arguments ("from" "to" "first-line-regexp")) nil [8906 12223])
            ("fill-single-word-nobreak-p" function nil nil [12225 12752])
            ("fill-french-nobreak-p" function nil nil [12754 13451])
            ("fill-single-char-nobreak-p" function nil nil [13453 13864])
            ("fill-nobreak-predicate" variable nil nil [13866 14247])
            ("fill-nobreak-invisible" variable nil nil [14249 14394])
            ("fill-nobreak-p" function nil nil [14396 15794])
            ("fill-find-break-point-function-table" variable (:default-value (make-char-table nil)) nil [15796 15928])
            ("fill-nospace-between-words-table" variable (:default-value (make-char-table nil)) nil [15930 16058])
            ("progn" code nil nil [16060 16743])
            ("fill-find-break-point" function (:arguments ("limit")) nil [16745 17432])
            ("fill-delete-prefix" function (:arguments ("from" "to" "prefix")) nil [17434 18355])
            ("add-to-list" code nil nil [18625 18689])
            ("fill-delete-newlines" function (:arguments ("from" "to" "justify" "nosqueeze" "squeeze-after")) nil [18691 21004])
            ("fill-move-to-break-point" function (:arguments ("linebeg")) nil [21006 23371])
            ("fill-text-properties-at" function (:arguments ("pos")) nil [23442 23688])
            ("fill-newline" function nil nil [23690 25006])
            ("fill-indent-to-left-margin" function nil nil [25008 25233])
            ("fill-region-as-paragraph" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "squeeze-after"))
                nil [25235 30406])
            ("skip-line-prefix" function (:arguments ("prefix")) nil [30408 30735])
            ("fill-minibuffer-function" function (:arguments ("arg")) nil [30737 30941])
            ("fill-forward-paragraph-function" variable (:default-value (quote forward-paragraph)) nil [30943 31233])
            ("fill-forward-paragraph" function (:arguments ("arg")) nil [31235 31319])
            ("fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify" "region"))
                nil [31321 35111])
            ("declare-function" code nil nil [35113 35193])
            ("declare-function" code nil nil [35194 35267])
            ("fill-comment-paragraph" function (:arguments ("justify")) nil [35270 40697])
            ("fill-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "to-eop"))
                nil [40699 42875])
            ("default-justification" variable (:default-value (quote left)) nil [42879 43310])
            ("make-variable-buffer-local" code nil nil [43311 43362])
            ("current-justification" function nil nil [43364 43913])
            ("set-justification" function
               (:user-visible-flag t
                :arguments ("begin" "end" "style" "whole-par"))
                nil [43915 45690])
            ("set-justification-none" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [45692 46000])
            ("set-justification-left" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46002 46445])
            ("set-justification-right" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46447 46818])
            ("set-justification-full" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46820 47193])
            ("set-justification-center" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [47195 47491])
            ("justify-current-line" function
               (:user-visible-flag t
                :arguments ("how" "eop" "nosqueeze"))
                nil [48306 53116])
            ("unjustify-current-line" function nil nil [53118 54152])
            ("unjustify-region" function (:arguments ("begin" "end")) nil [54154 54749])
            ("fill-nonuniform-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justifyp" "citation-regexp"))
                nil [54753 55774])
            ("fill-individual-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justify" "citation-regexp"))
                nil [55776 59844])
            ("fill-individual-paragraphs-prefix" function (:arguments ("citation-regexp")) nil [59846 61235])
            ("fill-individual-paragraphs-citation" function (:arguments ("string" "citation-regexp")) nil [61237 61419]))          
      :file "fill.el"
      :pointmax 61443
      :fsize 61455
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "artist.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("artist-version" variable
               (:constant-flag t
                :default-value "1.2.6")
                nil [7212 7245])
            ("artist-maintainer-address" variable
               (:constant-flag t
                :default-value "tab@lysator.liu.se, bug-gnu-emacs@gnu.org")
                nil [7246 7326])
            ("x-pointer-crosshair" variable nil nil [7328 7356])
            ("artist" customgroup (:user-visible-flag t) nil [7450 7525])
            ("artist-text" customgroup (:user-visible-flag t) nil [7527 7611])
            ("artist-rubber-banding" variable (:default-value t) nil [7613 7732])
            ("artist-first-char" variable (:default-value 49) nil [7734 7863])
            ("artist-second-char" variable (:default-value 50) nil [7865 7996])
            ("artist-interface-with-rect" variable (:default-value t) nil [7998 8558])
            ("artist-arrows" variable (:default-value [62 nil 118 76 60 nil 94 nil]) nil [8560 9057])
            ("artist-aspect-ratio" variable (:default-value 1) nil [9059 9228])
            ("artist-trim-line-endings" variable (:default-value t) nil [9230 9491])
            ("artist-flood-fill-right-border" variable (:default-value (quote window-width)) nil [9494 9934])
            ("artist-flood-fill-show-incrementally" variable (:default-value t) nil [9936 10246])
            ("artist-ellipse-right-char" variable (:default-value 41) nil [10249 10529])
            ("artist-ellipse-left-char" variable (:default-value 40) nil [10532 10809])
            ("artist-picture-compatibility" variable (:default-value t) nil [10811 10940])
            ("artist-vaporize-fuzziness" variable (:default-value 1) nil [10945 11719])
            ("artist-pointer-shape" variable (:default-value (if (eq window-system (quote x)) x-pointer-crosshair nil)) nil [11722 11876])
            ("artist-text-renderer-function" variable (:default-value (quote artist-figlet)) nil [11879 12012])
            ("defvaralias" code nil nil [12013 12079])
            ("artist-figlet-program" variable (:default-value "figlet") nil [12082 12195])
            ("artist-figlet-default-font" variable (:default-value "standard") nil [12198 12316])
            ("artist-figlet-list-fonts-command" variable (:default-value "for dir in `figlet -I2`; do cd $dir; ls *.flf; done") nil [12319 12708])
            ("artist-spray-interval" variable (:default-value 0.2) nil [12711 12830])
            ("artist-spray-radius" variable (:default-value 4) nil [12833 12935])
            ("artist-spray-chars" variable (:default-value (quote (32 46 45 43 109 37 42 35))) nil [12938 13320])
            ("artist-spray-new-char" variable (:default-value 46) nil [13323 13599])
            ("artist-mode" variable nil nil [13727 13807])
            ("make-variable-buffer-local" code nil nil [13808 13849])
            ("artist-mode-name" variable (:default-value " Artist") nil [13851 13961])
            ("artist-curr-go" variable (:default-value (quote pen-line)) nil [13963 14037])
            ("make-variable-buffer-local" code nil nil [14038 14082])
            ("artist-line-char-set" variable nil nil [14084 14195])
            ("make-variable-buffer-local" code nil nil [14196 14246])
            ("artist-line-char" variable nil nil [14248 14313])
            ("make-variable-buffer-local" code nil nil [14314 14360])
            ("artist-fill-char-set" variable nil nil [14362 14467])
            ("make-variable-buffer-local" code nil nil [14468 14518])
            ("artist-fill-char" variable nil nil [14520 14579])
            ("make-variable-buffer-local" code nil nil [14580 14626])
            ("artist-erase-char" variable (:default-value 32) nil [14628 14688])
            ("make-variable-buffer-local" code nil nil [14689 14736])
            ("artist-default-fill-char" variable (:default-value 46) nil [14738 14836])
            ("make-variable-buffer-local" code nil nil [14837 14891])
            ("artist-copy-buffer" variable nil nil [14929 14977])
            ("artist-draw-region-min-y" variable nil nil [14979 15076])
            ("make-variable-buffer-local" code nil nil [15077 15131])
            ("artist-draw-region-max-y" variable nil nil [15133 15233])
            ("make-variable-buffer-local" code nil nil [15234 15288])
            ("artist-borderless-shapes" variable nil nil [15290 15418])
            ("make-variable-buffer-local" code nil nil [15419 15473])
            ("artist-prev-next-op-alist" variable nil nil [15475 15889])
            ("picture" include nil nil [16050 16068])
            ("reporter" include nil nil [16001 16020])
            ("rect" include nil nil [15953 15968])
            ("if" code nil nil [16102 16153])
            ("reporter" include nil nil [16155 16174])
            ("if" code nil nil [16176 16232])
            ("artist-key-is-drawing" variable nil nil [16287 16321])
            ("artist-key-endpoint1" variable nil nil [16322 16355])
            ("artist-key-poly-point-list" variable nil nil [16356 16395])
            ("artist-key-shape" variable nil nil [16396 16425])
            ("artist-key-draw-how" variable nil nil [16426 16458])
            ("artist-popup-menu-table" variable nil nil [16459 16495])
            ("artist-key-compl-table" variable nil nil [16496 16531])
            ("artist-rb-save-data" variable nil nil [16532 16564])
            ("artist-arrow-point-1" variable nil nil [16565 16598])
            ("artist-arrow-point-2" variable nil nil [16599 16632])
            ("artist-menu-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [spray-chars] (quote (menu-item "Characters for Spray" artist-select-spray-chars :help "Choose characters for sprayed by the spray-can"))) (define-key map [borders] (quote (menu-item "Draw Shape Borders" artist-toggle-borderless-shapes :help "Toggle whether shapes are drawn with borders" :button (:toggle not artist-borderless-shapes)))) (define-key map [trimming] (quote (menu-item "Trim Line Endings" artist-toggle-trim-line-endings :help "Toggle trimming of line-endings" :button (:toggle . artist-trim-line-endings)))) (define-key map [rubber-band] (quote (menu-item "Rubber-banding" artist-toggle-rubber-banding :help "Toggle rubber-banding" :button (:toggle . artist-rubber-banding)))) (define-key map [set-erase] (quote (menu-item "Character to Erase..." artist-select-erase-char :help "Choose a specific character to erase"))) (define-key map [set-line] (quote (menu-item "Character for Line..." artist-select-line-char :help "Choose the character to insert when drawing lines"))) (define-key map [set-fill] (quote (menu-item "Character for Fill..." artist-select-fill-char :help "Choose the character to insert when filling in shapes"))) (define-key map [artist-separator] (quote (menu-item "--"))) (dolist (op (quote (("Vaporize" artist-select-op-vaporize-lines vaporize-lines) ("Erase" artist-select-op-erase-rectangle erase-rect) ("Spray-can" artist-select-op-spray-set-size spray-get-size) ("Text" artist-select-op-text-overwrite text-ovwrt) ("Ellipse" artist-select-op-circle circle) ("Poly-line" artist-select-op-straight-poly-line spolyline) ("Square" artist-select-op-square square) ("Rectangle" artist-select-op-rectangle rectangle) ("Line" artist-select-op-straight-line s-line) ("Pen" artist-select-op-pen-line pen-line)))) (define-key map (vector (nth 2 op)) (\` (menu-item (\, (nth 0 op)) (\, (nth 1 op)) :help (\, (format "Draw using the %s style" (nth 0 op))) :button (:radio eq artist-curr-go (quote (\, (nth 2 op)))))))) map)) nil [16635 18789])
            ("artist-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (setq artist-mode-map (make-sparse-keymap)) (define-key map [down-mouse-1] (quote artist-down-mouse-1)) (define-key map [S-down-mouse-1] (quote artist-down-mouse-1)) (define-key map [down-mouse-2] (quote artist-mouse-choose-operation)) (define-key map [S-down-mouse-2] (quote artist-mouse-choose-operation)) (define-key map [down-mouse-3] (quote artist-down-mouse-3)) (define-key map [S-down-mouse-3] (quote artist-down-mouse-3)) (define-key map [C-mouse-4] (quote artist-select-prev-op-in-list)) (define-key map [C-mouse-5] (quote artist-select-next-op-in-list)) (define-key map "" (quote artist-key-set-point)) (define-key map [up] (quote artist-previous-line)) (define-key map "" (quote artist-previous-line)) (define-key map [down] (quote artist-next-line)) (define-key map "" (quote artist-next-line)) (define-key map [left] (quote artist-backward-char)) (define-key map "" (quote artist-backward-char)) (define-key map [right] (quote artist-forward-char)) (define-key map "" (quote artist-forward-char)) (define-key map "<" (quote artist-toggle-first-arrow)) (define-key map ">" (quote artist-toggle-second-arrow)) (define-key map "" (quote artist-select-erase-char)) (define-key map "" (quote artist-select-fill-char)) (define-key map "" (quote artist-select-line-char)) (define-key map "" (quote artist-select-operation)) (define-key map "" (quote artist-toggle-rubber-banding)) (define-key map "" (quote artist-toggle-trim-line-endings)) (define-key map "" (quote artist-toggle-borderless-shapes)) (define-key map "" (quote artist-mode-off)) (define-key map "l" (quote artist-select-op-line)) (define-key map "L" (quote artist-select-op-straight-line)) (define-key map "r" (quote artist-select-op-rectangle)) (define-key map "R" (quote artist-select-op-square)) (define-key map "s" (quote artist-select-op-square)) (define-key map "p" (quote artist-select-op-poly-line)) (define-key map "P" (quote artist-select-op-straight-poly-line)) (define-key map "e" (quote artist-select-op-ellipse)) (define-key map "c" (quote artist-select-op-circle)) (define-key map "t" (quote artist-select-op-text-see-thru)) (define-key map "T" (quote artist-select-op-text-overwrite)) (define-key map "S" (quote artist-select-op-spray-can)) (define-key map "z" (quote artist-select-op-spray-set-size)) (define-key map "" (quote artist-select-op-erase-char)) (define-key map "E" (quote artist-select-op-erase-rectangle)) (define-key map "v" (quote artist-select-op-vaporize-line)) (define-key map "V" (quote artist-select-op-vaporize-lines)) (define-key map "" (quote artist-select-op-cut-rectangle)) (define-key map "\367" (quote artist-select-op-copy-rectangle)) (define-key map "" (quote artist-select-op-paste)) (define-key map "f" (quote artist-select-op-flood-fill)) (define-key map "" (quote artist-submit-bug-report)) (define-key map [menu-bar artist] (cons "Artist" artist-menu-map)) map)) nil [18791 22003])
            ("artist-replacement-table" variable (:default-value (make-vector 256 0)) nil [22005 22107])
            ("artist-mt" variable (:default-value (quote ((menu ("Drawing" ((function-call ("Undo" do-undo undo)) (separator) (graphics-operation ("Pen" (("Pen" pen-char "pen-c" artist-no-arrows nil nil nil nil artist-do-continously artist-pen (nil)) ("Pen Line" pen-line "pen-l" artist-arrows artist-pen-set-arrow-points artist-pen-reset-last-xy nil nil artist-do-continously artist-pen-line (nil))))) (graphics-operation ("Line" (("line" line "line" artist-arrows artist-set-arrow-points-for-2points nil nil nil 2 artist-draw-line (artist-undraw-line artist-nil nil)) ("straight line" s-line "sline" artist-arrows artist-set-arrow-points-for-2points nil nil nil 2 artist-draw-sline (artist-undraw-sline artist-nil nil))))) (graphics-operation ("Rectangle" (("rectangle" rect "rect" artist-no-arrows nil nil nil nil 2 artist-draw-rect (artist-undraw-rect artist-t-if-fill-char-set artist-fill-rect)) ("square" square "square" artist-no-arrows nil nil nil nil 2 artist-draw-square (artist-undraw-square artist-t-if-fill-char-set artist-fill-square))))) (graphics-operation ("Poly-line" (("poly-line" polyline "poly" artist-arrows artist-set-arrow-points-for-poly nil nil nil artist-do-poly artist-draw-line (artist-undraw-line artist-nil nil)) ("straight poly-line" spolyline "s-poly" artist-arrows artist-set-arrow-points-for-poly nil nil nil artist-do-poly artist-draw-sline (artist-undraw-sline artist-nil nil))))) (graphics-operation ("Ellipse" (("ellipse" ellipse "ellipse" artist-no-arrows nil nil nil nil 2 artist-draw-ellipse (artist-undraw-ellipse artist-t-if-fill-char-set artist-fill-ellipse)) ("circle" circle "circle" artist-no-arrows nil nil nil nil 2 artist-draw-circle (artist-undraw-circle artist-t-if-fill-char-set artist-fill-circle))))) (graphics-operation ("Text" (("text see-thru" text-thru "text-thru" artist-no-arrows nil nil nil nil 1 artist-text-see-thru nil) ("text overwrite" text-ovwrt "text-ovwrt" artist-no-arrows nil nil nil nil 1 artist-text-overwrite nil)))) (graphics-operation ("Spray-can" (("spray-can" spray-can "spray-can" artist-no-arrows nil nil nil nil artist-do-continously artist-spray (artist-spray-get-interval)) ("spray set size" spray-get-size "spray-size" artist-no-arrows nil nil artist-spray-clear-circle artist-spray-set-radius 2 artist-draw-circle (artist-undraw-circle artist-nil nil))))) (graphics-operation ("Erase" (("erase char" erase-char "erase-c" artist-no-arrows nil nil nil nil artist-do-continously artist-erase-char (nil)) ("erase rectangle" erase-rect "erase-r" artist-no-arrows nil nil nil nil 2 artist-draw-rect (artist-undraw-rect artist-t artist-erase-rect))))) (graphics-operation ("Vaporize" (("vaporize line" vaporize-line "vaporize-1" artist-no-arrows nil nil nil nil 1 artist-vaporize-line nil) ("vaporize lines" vaporize-lines "vaporize-n" artist-no-arrows nil nil nil nil 1 artist-vaporize-lines nil))))))) (menu ("Edit" ((graphics-operation ("Cut" (("cut rectangle" cut-r "cut-r" artist-no-arrows nil nil nil nil 2 artist-draw-rect (artist-undraw-rect artist-t artist-cut-rect)) ("cut square" cut-s "cut-s" artist-no-arrows nil nil nil nil 2 artist-draw-square (artist-undraw-square artist-t artist-cut-square))))) (graphics-operation ("Copy" (("copy rectangle" copy-r "copy-r" artist-no-arrows nil nil nil nil 2 artist-draw-rect (artist-undraw-rect artist-t artist-copy-rect)) ("copy square" copy-s "copy-s" artist-no-arrows nil nil nil nil 2 artist-draw-square (artist-undraw-square artist-t artist-copy-square))))) (graphics-operation ("Paste" (("paste" paste "paste" artist-no-arrows nil nil nil nil 1 artist-paste nil) ("paste" paste "paste" artist-no-arrows nil nil nil nil 1 artist-paste nil)))) (graphics-operation ("Flood-fill" (("flood-fill" flood-fill "flood" artist-no-arrows nil nil nil nil 1 artist-flood-fill nil) ("flood-fill" flood-fill "flood" artist-no-arrows nil nil nil nil 1 artist-flood-fill nil))))))) (menu ("Settings" ((function-call ("Set Fill" set-fill artist-select-fill-char)) (function-call ("Set Line" set-line artist-select-line-char)) (function-call ("Set Erase" set-erase artist-select-erase-char)) (function-call ("Rubber-banding" rubber-band artist-toggle-rubber-banding)) (function-call ("Trimming" trimming artist-toggle-trim-line-endings)) (function-call ("Borders" borders artist-toggle-borderless-shapes)) (function-call ("Spray-chars" spray-chars artist-select-spray-chars)))))))) nil [22154 33364])
            ("artist-mt-get-tag" function (:arguments ("element")) nil [33408 33523])
            ("artist-mt-get-info-part" function (:arguments ("element")) nil [33525 33652])
            ("artist-go-get-desc" function (:arguments ("info-part")) nil [33699 33836])
            ("artist-go-get-unshifted" function (:arguments ("info-part")) nil [33838 33981])
            ("artist-go-get-shifted" function (:arguments ("info-part")) nil [33983 34122])
            ("artist-go-get-keyword" function (:arguments ("info-variant-part")) nil [34124 34338])
            ("artist-go-get-symbol" function (:arguments ("info-variant-part")) nil [34340 34552])
            ("artist-go-get-mode-line" function (:arguments ("info-variant-part")) nil [34554 34772])
            ("artist-go-get-arrow-pred" function (:arguments ("info-variant-part")) nil [34774 34999])
            ("artist-go-get-arrow-set-fn" function (:arguments ("info-variant-part")) nil [35001 35222])
            ("artist-go-get-init-fn" function (:arguments ("info-variant-part")) nil [35224 35444])
            ("artist-go-get-prep-fill-fn" function (:arguments ("info-variant-part")) nil [35446 35683])
            ("artist-go-get-exit-fn" function (:arguments ("info-variant-part")) nil [35685 35896])
            ("artist-go-get-draw-how" function (:arguments ("info-variant-part")) nil [35898 36114])
            ("artist-go-get-draw-fn" function (:arguments ("info-variant-part")) nil [36116 36336])
            ("artist-go-get-undraw-fn" function (:arguments ("info-variant-part")) nil [36338 36694])
            ("artist-go-get-interval-fn" function (:arguments ("info-variant-part")) nil [36696 37040])
            ("artist-go-get-fill-pred" function (:arguments ("info-variant-part")) nil [37042 37397])
            ("artist-go-get-fill-fn" function (:arguments ("info-variant-part")) nil [37399 37751])
            ("artist-fc-get-keyword" function (:arguments ("info-part")) nil [37793 37929])
            ("artist-fc-get-symbol" function (:arguments ("info-part")) nil [37931 38065])
            ("artist-fc-get-fn" function (:arguments ("info-part")) nil [38067 38199])
            ("artist-mn-get-title" function (:arguments ("info-part")) nil [38232 38364])
            ("artist-mn-get-items" function (:arguments ("info-part")) nil [38366 38498])
            ("artist-get-last-non-nil-op" function (:arguments ("op-list" "last-non-nil")) nil [38614 38917])
            ("artist-get-first-non-nil-op" function (:arguments ("op-list")) nil [38919 39089])
            ("artist-is-in-op-list-p" function (:arguments ("op" "op-list")) nil [39091 39303])
            ("artist-make-prev-next-op-alist" function (:arguments ("op-list" "last-non-nil-arg" "first-non-nil-arg" "prev-entry" "prev-op-arg")) nil [39305 40534])
            ("artist-select-next-op-in-list" function (:user-visible-flag t) nil [40536 40789])
            ("artist-select-prev-op-in-list" function (:user-visible-flag t) nil [40791 41048])
            ("define-minor-mode" code nil nil [41234 49088])
            ("artist-mode-init" function nil nil [49107 50998])
            ("declare-function" code nil nil [51000 51066])
            ("artist-mode-exit" function nil nil [51068 51308])
            ("artist-mode-off" function (:user-visible-flag t) nil [51310 51424])
            ("artist-update-display" function nil nil [51453 51524])
            ("artist-mode-line-show-curr-operation" function (:arguments ("is-drawing")) nil [51526 51884])
            ("artist-t-if-fill-char-set" function nil nil [51887 52007])
            ("artist-t" function nil nil [52009 52053])
            ("artist-nil" function nil nil [52055 52105])
            ("artist-arrows" function nil nil [52107 52158])
            ("artist-no-arrows" function nil nil [52160 52215])
            ("artist-compute-popup-menu-table" function (:arguments ("menu-table")) nil [52321 52550])
            ("artist-compute-popup-menu-table-sub" function (:arguments ("menu-table")) nil [52552 53708])
            ("artist-compute-key-compl-table" function (:arguments ("menu-table")) nil [53770 54651])
            ("artist-mt-get-symbol-from-keyword" function (:arguments ("kwd")) nil [54735 54901])
            ("artist-mt-get-symbol-from-keyword-sub" function (:arguments ("table" "kwd")) nil [54903 56325])
            ("artist-go-retrieve-from-symbol" function (:arguments ("symbol" "retrieve-fn")) nil [56384 56652])
            ("artist-go-retrieve-from-symbol-sub" function (:arguments ("table" "symbol" "retrieve-fn")) nil [56654 57857])
            ("artist-go-get-keyword-from-symbol" function (:arguments ("symbol")) nil [57859 58049])
            ("artist-go-get-mode-line-from-symbol" function (:arguments ("symbol")) nil [58051 58247])
            ("artist-go-get-arrow-pred-from-symbol" function (:arguments ("symbol")) nil [58249 58448])
            ("artist-go-get-arrow-set-fn-from-symbol" function (:arguments ("symbol")) nil [58450 58655])
            ("artist-go-get-init-fn-from-symbol" function (:arguments ("symbol")) nil [58657 58847])
            ("artist-go-get-prep-fill-fn-from-symbol" function (:arguments ("symbol")) nil [58849 59054])
            ("artist-go-get-exit-fn-from-symbol" function (:arguments ("symbol")) nil [59056 59246])
            ("artist-go-get-draw-fn-from-symbol" function (:arguments ("symbol")) nil [59248 59438])
            ("artist-go-get-draw-how-from-symbol" function (:arguments ("symbol")) nil [59440 59633])
            ("artist-go-get-undraw-fn-from-symbol" function (:arguments ("symbol")) nil [59635 59831])
            ("artist-go-get-interval-fn-from-symbol" function (:arguments ("symbol")) nil [59833 60035])
            ("artist-go-get-fill-pred-from-symbol" function (:arguments ("symbol")) nil [60037 60233])
            ("artist-go-get-fill-fn-from-symbol" function (:arguments ("symbol")) nil [60235 60425])
            ("artist-go-get-symbol-shift" function (:arguments ("symbol" "is-shifted")) nil [60427 60694])
            ("artist-go-get-symbol-shift-sub" function (:arguments ("table" "symbol" "is-shifted")) nil [60696 61804])
            ("artist-fc-retrieve-from-symbol" function (:arguments ("symbol" "retrieve-fn")) nil [61857 62120])
            ("artist-fc-retrieve-from-symbol-sub" function (:arguments ("table" "symbol" "retrieve-fn")) nil [62122 62973])
            ("artist-fc-get-fn-from-symbol" function (:arguments ("symbol")) nil [62975 63153])
            ("artist-funcall" function (:arguments ("fn" "args")) nil [63234 63358])
            ("artist-uniq" function (:arguments ("l")) nil [63360 63647])
            ("artist-string-split" function (:arguments ("str" "r")) nil [63673 64165])
            ("artist-string-to-file" function (:arguments ("str" "file-name")) nil [64167 64315])
            ("artist-file-to-string" function (:arguments ("file-name")) nil [64317 64731])
            ("artist-clear-buffer" function (:arguments ("buf")) nil [64733 64906])
            ("artist-system" function (:arguments ("program" "stdin" "program-args")) nil [64909 66593])
            ("artist-current-column" function nil nil [66938 67027])
            ("artist-current-line" function nil nil [67029 67208])
            ("artist-move-to-xy" function (:arguments ("x" "y")) nil [67210 69272])
            ("artist-get-char-at-xy" function (:arguments ("x" "y")) nil [69274 69669])
            ("artist-get-replacement-char" function (:arguments ("c")) nil [69672 70205])
            ("artist-get-char-at-xy-conv" function (:arguments ("x" "y")) nil [70207 70405])
            ("artist-replace-char" function (:arguments ("new-char")) nil [70408 70706])
            ("artist-replace-chars" function (:arguments ("new-char" "count")) nil [70708 71834])
            ("artist-replace-string" function (:arguments ("string" "see-thru")) nil [71836 72490])
            ("artist-no-rb-unset-point1" function nil nil [72575 72915])
            ("artist-no-rb-set-point1" function (:arguments ("x" "y")) nil [72917 73350])
            ("artist-no-rb-unset-point2" function nil nil [73352 73755])
            ("artist-no-rb-set-point2" function (:arguments ("x" "y")) nil [73757 74191])
            ("artist-no-rb-unset-points" function nil nil [74193 74353])
            ("artist-intersection-char" function (:arguments ("new-c" "old-c")) nil [74497 75197])
            ("artist-unintersection-char" function (:arguments ("line-c" "buffer-c")) nil [75301 75862])
            ("artist-compute-line-char" function nil nil [75936 76413])
            ("artist-direction-info" variable (:default-value [[1 0 45] [1 1 92] [0 1 124] [-1 1 47] [-1 0 45] [-1 -1 92] [0 -1 124] [1 -1 47]]) nil [76662 77128])
            ("artist-direction-step-x" function (:arguments ("direction")) nil [77130 77302])
            ("artist-direction-step-y" function (:arguments ("direction")) nil [77304 77476])
            ("artist-direction-char" function (:arguments ("direction")) nil [77478 77648])
            ("artist-find-direction" function (:arguments ("x1" "y1" "x2" "y2")) nil [77684 78313])
            ("artist-straight-calculate-length" function (:arguments ("direction" "x1" "y1" "x2" "y2")) nil [78315 78654])
            ("artist-sline" function (:arguments ("x1" "y1" "x2" "y2")) nil [78656 79071])
            ("artist-save-chars-under-sline" function (:arguments ("line")) nil [79073 79496])
            ("artist-octant-info" variable (:default-value [[2 1 1 0 1 1] [1 2 1 1 0 1] [-1 2 0 1 -1 1] [-2 1 -1 1 -1 0] [-2 -1 -1 0 -1 -1] [-1 -2 -1 -1 0 -1] [1 -2 0 -1 1 -1] [2 -1 1 -1 1 0]]) nil [79666 80180])
            ("artist-get-dfdx-init-coeff" function (:arguments ("octant")) nil [80301 80437])
            ("artist-get-dfdy-init-coeff" function (:arguments ("octant")) nil [80439 80575])
            ("artist-get-x-step-q>=0" function (:arguments ("octant")) nil [80577 80723])
            ("artist-get-y-step-q>=0" function (:arguments ("octant")) nil [80725 80871])
            ("artist-get-x-step-q<0" function (:arguments ("octant")) nil [80873 81016])
            ("artist-get-y-step-q<0" function (:arguments ("octant")) nil [81018 81161])
            ("artist-find-octant" function (:arguments ("x1" "y1" "x2" "y2")) nil [81212 81809])
            ("artist-new-coord" function (:arguments ("x" "y" "new-char")) nil [81901 82190])
            ("artist-coord-get-x" function (:arguments ("coord")) nil [82192 82287])
            ("artist-coord-get-y" function (:arguments ("coord")) nil [82289 82384])
            ("artist-coord-set-x" function (:arguments ("coord" "new-x")) nil [82386 82505])
            ("artist-coord-set-y" function (:arguments ("coord" "new-y")) nil [82507 82626])
            ("artist-coord-get-saved-char" function (:arguments ("coord")) nil [82628 82741])
            ("artist-coord-get-new-char" function (:arguments ("coord")) nil [82743 82852])
            ("artist-coord-add-saved-char" function (:arguments ("coord" "saved-char")) nil [82854 83006])
            ("artist-coord-add-new-char" function (:arguments ("coord" "new-char")) nil [83008 83150])
            ("artist-coord-set-new-char" function (:arguments ("coord" "new-char")) nil [83152 83294])
            ("artist-put-pixel" function (:arguments ("point-list" "x" "y")) nil [83360 83532])
            ("artist-eight-point" function (:arguments ("x1" "y1" "x2" "y2")) nil [83620 84734])
            ("artist-save-chars-under-point-list" function (:arguments ("point-list")) nil [84868 85156])
            ("artist-calculate-new-char" function (:arguments ("last-coord" "new-coord")) nil [85612 86150])
            ("artist-calculate-new-chars" function (:arguments ("point-list")) nil [86152 86772])
            ("artist-modify-new-chars" function (:arguments ("point-list")) nil [86933 87327])
            ("artist-make-endpoint" function (:arguments ("x" "y")) nil [87422 87576])
            ("artist-endpoint-get-x" function (:arguments ("endpoint")) nil [87578 87683])
            ("artist-endpoint-get-y" function (:arguments ("endpoint")) nil [87685 87790])
            ("artist-make-2point-object" function (:arguments ("endpoint1" "endpoint2" "shapeinfo")) nil [87792 87963])
            ("artist-2point-get-endpoint1" function (:arguments ("obj")) nil [87965 88077])
            ("artist-2point-get-endpoint2" function (:arguments ("obj")) nil [88079 88192])
            ("artist-2point-get-shapeinfo" function (:arguments ("obj")) nil [88194 88311])
            ("artist-draw-line" function (:arguments ("x1" "y1" "x2" "y2")) nil [88368 89200])
            ("artist-undraw-line" function (:arguments ("line")) nil [89202 89477])
            ("artist-draw-sline" function (:arguments ("x1" "y1" "x2" "y2")) nil [89526 90901])
            ("artist-undraw-sline" function (:arguments ("line")) nil [90904 91418])
            ("artist-draw-rect" function (:arguments ("x1" "y1" "x2" "y2")) nil [91476 92248])
            ("artist-undraw-rect" function (:arguments ("rectangle")) nil [92250 92562])
            ("artist-rect-corners-squarify" function (:arguments ("x1" "y1" "x2" "y2")) nil [92565 93586])
            ("artist-draw-square" function (:arguments ("x1" "y1" "x2" "y2")) nil [93589 94635])
            ("artist-undraw-square" function (:arguments ("square")) nil [94637 94939])
            ("artist-fill-rect" function (:arguments ("rect" "x1" "y1" "x2" "y2")) nil [94982 95304])
            ("artist-fill-square" function (:arguments ("square" "x1" "y1" "x2" "y2")) nil [95306 95863])
            ("artist-pen" function (:arguments ("x1" "y1")) nil [95888 96201])
            ("artist-pen-line" function (:arguments ("x1" "y1")) nil [96204 97130])
            ("artist-pen-reset-last-xy" function (:arguments ("x1" "y1")) nil [97132 97326])
            ("artist-pen-set-arrow-points" function (:arguments ("x1" "y1")) nil [97329 98514])
            ("artist-figlet-run" function (:arguments ("text" "font" "extra-args")) nil [98541 99233])
            ("artist-figlet-get-font-list" function nil nil [99235 99743])
            ("artist-figlet-choose-font" function (:user-visible-flag t) nil [99745 100124])
            ("artist-figlet-get-extra-args" function nil nil [100126 100323])
            ("artist-figlet" function (:arguments ("text")) nil [100325 100548])
            ("artist-text-insert-common" function (:arguments ("x" "y" "text" "see-thru")) nil [100551 100997])
            ("artist-text-insert-see-thru" function (:arguments ("x" "y" "text")) nil [100999 101183])
            ("artist-text-insert-overwrite" function (:arguments ("x" "y" "text")) nil [101185 101376])
            ("artist-text-see-thru" function (:arguments ("x" "y")) nil [101378 101874])
            ("artist-text-overwrite" function (:arguments ("x" "y")) nil [101877 102365])
            ("artist-spray-get-interval" function nil nil [102386 102492])
            ("artist-spray-random-points" function (:arguments ("n" "radius")) nil [102494 102938])
            ("artist-spray" function (:arguments ("x1" "y1")) nil [102940 103672])
            ("artist-spray-clear-circle" function (:arguments ("circle" "x1" "y1" "x2" "y2")) nil [103674 103810])
            ("artist-spray-set-radius" function (:arguments ("circle" "x1" "y1" "x2" "y2")) nil [103812 104099])
            ("artist-erase-char" function (:arguments ("x1" "y1")) nil [104119 104324])
            ("artist-erase-rect" function (:arguments ("rect" "x1" "y1" "x2" "y2")) nil [104326 104628])
            ("artist-vap-find-endpoint" function (:arguments ("x1" "y1" "step-x" "step-y" "accept-set" "reject-set")) nil [104678 106729])
            ("artist-vap-find-endpoints-horiz" function (:arguments ("x" "y")) nil [106732 107001])
            ("artist-vap-find-endpoints-vert" function (:arguments ("x" "y")) nil [107003 107269])
            ("artist-vap-find-endpoints-swne" function (:arguments ("x" "y")) nil [107271 107553])
            ("artist-vap-find-endpoints-nwse" function (:arguments ("x" "y")) nil [107555 107840])
            ("artist-vap-find-endpoints" function (:arguments ("x" "y")) nil [107843 108640])
            ("artist-vap-group-in-pairs" function (:arguments ("l")) nil [108643 108898])
            ("artist-vaporize-by-endpoints" function (:arguments ("endpoint1" "endpoint2")) nil [108900 109856])
            ("artist-vaporize-line" function (:arguments ("x1" "y1")) nil [109859 110407])
            ("artist-vaporize-lines" function (:arguments ("x1" "y1")) nil [111660 112105])
            ("artist-ellipse-generate-quadrant" function (:arguments ("x-radius" "y-radius")) nil [112138 113169])
            ("artist-new-fill-item" function (:arguments ("x" "y" "width")) nil [113171 113415])
            ("artist-fill-item-get-x" function (:arguments ("fill-item")) nil [113417 113528])
            ("artist-fill-item-set-x" function (:arguments ("fill-item" "new-x")) nil [113530 113669])
            ("artist-fill-item-get-y" function (:arguments ("fill-item")) nil [113671 113782])
            ("artist-fill-item-set-y" function (:arguments ("fill-item" "new-y")) nil [113784 113923])
            ("artist-fill-item-get-width" function (:arguments ("fill-item")) nil [113925 114044])
            ("artist-fill-item-set-width" function (:arguments ("fill-item" "new-width")) nil [114046 114205])
            ("artist-ellipse-point-list-add-center" function (:arguments ("x-center" "y-center" "point-list")) nil [114208 114520])
            ("artist-ellipse-fill-info-add-center" function (:arguments ("x-center" "y-center" "fill-info")) nil [114523 114846])
            ("artist-ellipse-remove-0-fills" function (:arguments ("fill-info")) nil [114848 115193])
            ("artist-ellipse-compute-fill-info" function (:arguments ("point-list")) nil [115196 116499])
            ("artist-ellipse-mirror-quadrant" function (:arguments ("point-list")) nil [116502 118360])
            ("artist-draw-ellipse-general" function (:arguments ("x1" "y1" "x-radius" "y-radius")) nil [118363 119976])
            ("artist-draw-ellipse-with-0-height" function (:arguments ("x1" "y1" "x-radius" "y-radius")) nil [119978 121363])
            ("artist-draw-ellipse" function (:arguments ("x1" "y1" "x2" "y2")) nil [121365 122849])
            ("artist-undraw-ellipse" function (:arguments ("ellipse")) nil [122852 123201])
            ("artist-draw-circle" function (:arguments ("x1" "y1" "x2" "y2")) nil [123204 124517])
            ("defalias" code nil nil [124519 124574])
            ("artist-fill-ellipse" function (:arguments ("ellipse" "x" "y" "x-radius" "y-radius")) nil [124600 125065])
            ("defalias" code nil nil [125067 125118])
            ("artist-cut-rect" function (:arguments ("rect" "x1" "y1" "x2" "y2")) nil [125206 125419])
            ("artist-cut-square" function (:arguments ("square" "x1" "y1" "x2" "y2")) nil [125421 125896])
            ("artist-get-buffer-contents-at-xy" function (:arguments ("x" "y" "width")) nil [125899 126285])
            ("artist-copy-generic" function (:arguments ("x1" "y1" "x2" "y2")) nil [126288 126867])
            ("artist-copy-rect" function (:arguments ("rect" "x1" "y1" "x2" "y2")) nil [126870 127030])
            ("artist-copy-square" function (:arguments ("square" "x1" "y1" "x2" "y2")) nil [127032 127437])
            ("artist-paste" function (:arguments ("x" "y")) nil [127439 127837])
            ("artist-ff-too-far-right" function (:arguments ("x")) nil [127863 128266])
            ("artist-ff-get-rightmost-from-xy" function (:arguments ("x" "y")) nil [128268 128642])
            ("artist-ff-is-topmost-line" function (:arguments ("x" "y")) nil [128644 128763])
            ("artist-ff-is-bottommost-line" function (:arguments ("x" "y")) nil [128765 129169])
            ("artist-flood-fill" function (:arguments ("x1" "y1")) nil [129171 132072])
            ("artist-make-arrow-point" function (:arguments ("x" "y" "direction" "state")) nil [132110 132660])
            ("artist-arrow-point-get-marker" function (:arguments ("arrow-point")) nil [132662 132792])
            ("artist-arrow-point-get-orig-char" function (:arguments ("arrow-point")) nil [132794 132930])
            ("artist-arrow-point-get-direction" function (:arguments ("arrow-point")) nil [132932 133068])
            ("artist-arrow-point-get-state" function (:arguments ("arrow-point")) nil [133070 133198])
            ("artist-arrow-point-set-state" function (:arguments ("arrow-point" "new-state")) nil [133200 133356])
            ("artist-clear-arrow-points" function nil nil [133359 133492])
            ("artist-set-arrow-points-for-poly" function (:arguments ("point-list")) nil [133494 134305])
            ("artist-set-arrow-points-for-2points" function (:arguments ("shape" "x1" "y1" "x2" "y2")) nil [134308 135014])
            ("artist-key-undraw-continously" function (:arguments ("x" "y")) nil [135096 135243])
            ("artist-key-undraw-poly" function (:arguments ("x" "y")) nil [135245 135570])
            ("artist-key-undraw-1point" function (:arguments ("x" "y")) nil [135572 135697])
            ("artist-key-undraw-2points" function (:arguments ("x" "y")) nil [135699 136019])
            ("artist-key-undraw-common" function nil nil [136021 136849])
            ("artist-key-draw-continously" function (:arguments ("x" "y")) nil [137437 137650])
            ("artist-key-draw-poly" function (:arguments ("x" "y")) nil [137652 137995])
            ("artist-key-draw-1point" function (:arguments ("x" "y")) nil [137997 138202])
            ("artist-key-draw-2points" function (:arguments ("x" "y")) nil [138205 138533])
            ("artist-key-draw-common" function nil nil [138535 139342])
            ("artist-draw-region-reset" function nil nil [139489 139637])
            ("artist-draw-region-trim-line-endings" function (:arguments ("min-y" "max-y")) nil [139639 140141])
            ("artist-key-do-continously-continously" function (:arguments ("x" "y")) nil [140182 140383])
            ("artist-key-do-continously-poly" function (:arguments ("x" "y")) nil [140386 141113])
            ("artist-key-do-continously-1point" function (:arguments ("x" "y")) nil [141116 141296])
            ("artist-key-do-continously-2points" function (:arguments ("x" "y")) nil [141298 142025])
            ("artist-key-do-continously-common" function nil nil [142028 142886])
            ("artist-key-set-point-continously" function (:arguments ("x" "y")) nil [142889 143829])
            ("artist-key-set-point-poly" function (:arguments ("x" "y" "this-is-last-point")) nil [143833 147968])
            ("artist-key-set-point-1point" function (:arguments ("x" "y")) nil [147971 148859])
            ("artist-key-set-point-2points" function (:arguments ("x" "y")) nil [148862 151164])
            ("artist-key-set-point-common" function (:arguments ("arg")) nil [151167 152638])
            ("artist-previous-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [152665 152992])
            ("artist-next-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [152995 153314])
            ("artist-backward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [153316 153560])
            ("artist-forward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [153562 154022])
            ("artist-key-set-point" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [154025 154204])
            ("artist-select-fill-char" function
               (:user-visible-flag t
                :arguments ("c"))
                nil [154207 154537])
            ("artist-select-line-char" function
               (:user-visible-flag t
                :arguments ("c"))
                nil [154540 154943])
            ("artist-select-erase-char" function
               (:user-visible-flag t
                :arguments ("c"))
                nil [154946 155326])
            ("artist-charlist-to-string" function (:arguments ("char-list")) nil [155328 155452])
            ("artist-string-to-charlist" function (:arguments ("str")) nil [155454 155562])
            ("artist-select-spray-chars" function
               (:user-visible-flag t
                :arguments ("chars" "initial-char"))
                nil [155564 157038])
            ("artist-select-operation" function
               (:user-visible-flag t
                :arguments ("op-str"))
                nil [157041 158401])
            ("artist-toggle-rubber-banding" function
               (:user-visible-flag t
                :arguments ("state"))
                nil [158404 158867])
            ("artist-toggle-trim-line-endings" function
               (:user-visible-flag t
                :arguments ("state"))
                nil [158870 159246])
            ("artist-toggle-borderless-shapes" function
               (:user-visible-flag t
                :arguments ("state"))
                nil [159249 159617])
            ("artist-toggle-first-arrow" function (:user-visible-flag t) nil [159620 160424])
            ("artist-toggle-second-arrow" function (:user-visible-flag t) nil [160426 161232])
            ("artist-select-op-pen-line" function (:user-visible-flag t) nil [161234 161355])
            ("artist-select-op-line" function (:user-visible-flag t) nil [161357 161466])
            ("artist-select-op-straight-line" function (:user-visible-flag t) nil [161468 161604])
            ("artist-select-op-rectangle" function (:user-visible-flag t) nil [161606 161730])
            ("artist-select-op-square" function (:user-visible-flag t) nil [161732 161847])
            ("artist-select-op-poly-line" function (:user-visible-flag t) nil [161849 161973])
            ("artist-select-op-straight-poly-line" function (:user-visible-flag t) nil [161975 162126])
            ("artist-select-op-ellipse" function (:user-visible-flag t) nil [162128 162246])
            ("artist-select-op-circle" function (:user-visible-flag t) nil [162248 162363])
            ("artist-select-op-text-see-thru" function (:user-visible-flag t) nil [162365 162504])
            ("artist-select-op-text-overwrite" function (:user-visible-flag t) nil [162506 162648])
            ("artist-select-op-spray-can" function (:user-visible-flag t) nil [162650 162764])
            ("artist-select-op-spray-set-size" function (:user-visible-flag t) nil [162766 162907])
            ("artist-select-op-erase-char" function (:user-visible-flag t) nil [162909 163035])
            ("artist-select-op-erase-rectangle" function (:user-visible-flag t) nil [163037 163173])
            ("artist-select-op-vaporize-line" function (:user-visible-flag t) nil [163175 163312])
            ("artist-select-op-vaporize-lines" function (:user-visible-flag t) nil [163314 163456])
            ("artist-select-op-cut-rectangle" function (:user-visible-flag t) nil [163458 163590])
            ("artist-select-op-cut-square" function (:user-visible-flag t) nil [163592 163715])
            ("artist-select-op-copy-rectangle" function (:user-visible-flag t) nil [163717 163851])
            ("artist-select-op-copy-square" function (:user-visible-flag t) nil [163853 163977])
            ("artist-select-op-paste" function (:user-visible-flag t) nil [163979 164084])
            ("artist-select-op-flood-fill" function (:user-visible-flag t) nil [164086 164207])
            ("artist-update-pointer-shape" function nil nil [164270 164387])
            ("x-pointer-shape" variable nil nil [164389 164413])
            ("artist-set-pointer-shape" function (:arguments ("new-pointer-shape")) nil [164415 164607])
            ("artist-event-is-shifted" function (:arguments ("ev")) nil [164609 164741])
            ("artist-do-nothing" function (:user-visible-flag t) nil [164743 164819])
            ("artist-compute-up-event-key" function (:arguments ("ev")) nil [164821 165138])
            ("artist-down-mouse-1" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [165140 168105])
            ("artist-mouse-choose-operation" function
               (:user-visible-flag t
                :arguments ("ev" "op"))
                nil [168108 169629])
            ("artist-down-mouse-3" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [169632 169896])
            ("artist-shift-has-changed" function (:arguments ("shift-state" "ev")) nil [169924 170572])
            ("artist-coord-win-to-buf" function (:arguments ("coord")) nil [170574 170960])
            ("artist-mouse-draw-continously" function (:arguments ("ev")) nil [170963 174638])
            ("artist-mouse-draw-poly" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [174642 181368])
            ("artist-mouse-draw-1point" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [181371 182695])
            ("artist-mouse-draw-2points" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [182698 186357])
            ("artist-submit-bug-report" function (:user-visible-flag t) nil [186391 187344])
            ("artist" package nil nil [187385 187402]))          
      :file "artist.el"
      :pointmax 194967
      :fsize 194966
      :lastmodtime '(21781 3670 0 0)
      :unmatched-syntax '((close-paren 16068 . 16069) (symbol 15892 . 15909) (open-paren 15891 . 15892)))
    (semanticdb-table "picture.el"
      :file "picture.el"
      :fsize 32388
      :lastmodtime '(21710 25077 0 0)))
  :file "!usr!share!emacs!24.5!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
