;; Object whatever/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "whatever/"
  :tables
  (list
    (semanticdb-table "Makefile"
      :major-mode 'makefile-gmake-mode
      :tags 
        '( ("CC" variable (:default-value ("gcc")) nil [1 10])
            ("CCFLAGS" variable (:default-value ("-std=gnu99" "-Wall" "-Werror" "-Wextra")) nil [10 53])
            ("main" function (:arguments ("main.c")) nil [54 94]))          
      :file "Makefile"
      :pointmax 94
      :fsize 200
      :lastmodtime '(22643 23523 886997 884000)
      :unmatched-syntax '((shell-command 68 . 93) (bol 67 . 67)))

    (semanticdb-table "playing_with_linux_api.c"
      :major-mode 'c-mode
      :tags 
        '( ("sys/types.h" include (:system-flag t) nil [144 166])
            ("sys/stat.h" include (:system-flag t) nil [167 188])
            ("unistd.h" include (:system-flag t) nil [189 208])
            ("stdio.h" include (:system-flag t) nil [209 227])
            ("stdint.h" include (:system-flag t) nil [228 247])
            ("main" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [258 263]))                  
                :type "int")
                nil [249 433]))          
      :file "playing_with_linux_api.c"
      :pointmax 434
      :fsize 433
      :lastmodtime '(22643 23834 383997 811000)
      :unmatched-syntax nil)
    (semanticdb-table "trying_to_with_bits.c"
      :major-mode 'c-mode
      :tags 
        '( ("stdint.h" include (:system-flag t) nil [126 145])
            ("stdbool.h" include (:system-flag t) nil [146 166])
            ("stdio.h" include (:system-flag t) nil [167 185])
            ("assert.h" include (:system-flag t) nil [186 205])
            ("limits.h" include (:system-flag t) nil [206 225])
            ("CAST" variable (:constant-flag t) nil [249 253])
            ("UNUSED" variable (:constant-flag t) nil [287 293])
            ("SIZEOF_B" variable (:constant-flag t) nil [315 323])
            ("MAX_POSSIBLE" variable (:constant-flag t) nil [431 443])
            ("SET_BIT" variable (:constant-flag t) nil [559 566])
            ("GET_BIT" variable (:constant-flag t) nil [722 729])
            ("MASK0" variable (:constant-flag t) nil [868 873])
            ("MASK1" variable (:constant-flag t) nil [985 990])
            ("PRINT_BITS" variable (:constant-flag t) nil [1104 1114])
            ("RESET_BITS" variable (:constant-flag t) nil [1388 1398])
            ("INSTR_POS_OPCODE" variable (:constant-flag t) nil [1486 1502])
            ("INSTR_SIZE_OPCODE" variable (:constant-flag t) nil [1513 1530])
            ("INSTR_POS_ARG_A" variable (:constant-flag t) nil [1582 1597])
            ("INSTR_SIZE_ARG_A" variable (:constant-flag t) nil [1649 1665])
            ("INSTR_POS_ARG_B" variable (:constant-flag t) nil [1718 1733])
            ("INSTR_SIZE_ARG_B" variable (:constant-flag t) nil [1783 1799])
            ("INSTR_POS_ARG_C" variable (:constant-flag t) nil [1852 1867])
            ("INSTR_SIZE_ARG_C" variable (:constant-flag t) nil [1917 1933])
            ("Instruction" type
               (:typedef ("uint64_t" type (:type "class") nil nil)
                :type "typedef")
                nil [1938 1967])
            ("InstructionArgument" type
               (:typedef ("uint16_t" type (:type "class") nil nil)
                :type "typedef")
                nil [1968 2005])
            ("OpCode" type
               (:members 
                  ( ("OP_MOV" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2024 2031])
                    ("OP_ADD" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2049 2056])
                    ("OP_SUB" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2074 2081])
                    ("OP_MUL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2099 2106])
                    ("OP_DIV" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2124 2146]))                  
                :type "enum")
                nil [2006 2147])
            ("instr_set_opcode" function
               (:arguments 
                  ( ("instr" variable
                       (:pointer 1
                        :type ("Instruction" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2171 2190])
                    ("opcode" variable
                       (:constant-flag t
                        :type ("OpCode" type (:type "enum") nil nil))
                        (reparse-symbol arg-sub-list) [2191 2216]))                  
                :type "void")
                nil [2149 2335])
            ("instr_get_opcode" function
               (:arguments 
                  ( ("instr" variable (:type ("Instruction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2366 2384]))                  
                :type ("OpCode" type (:type "enum") nil nil))
                nil [2337 2464])
            ("instr_set_argA" function
               (:arguments 
                  ( ("instr" variable
                       (:pointer 1
                        :type ("Instruction" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2486 2505])
                    ("arg" variable
                       (:constant-flag t
                        :type ("InstructionArgument" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2506 2536]))                  
                :type "void")
                nil [2466 2650])
            ("instr_get_argA" function
               (:arguments 
                  ( ("instr" variable (:type ("Instruction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2687 2705]))                  
                :type ("InstructionArgument" type (:type "class") nil nil))
                nil [2652 2783])
            ("main" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3102 3107]))                  
                :type "int")
                nil [3093 4284]))          
      :file "trying_to_with_bits.c"
      :pointmax 4285
      :fsize 4284
      :lastmodtime '(22643 32481 332995 790000)
      :unmatched-syntax nil
      :lexical-table 
        '(("UNUSED" (spp-arg-list ("a") 293 . 296) . ((semantic-list "(void)" 297 . 303) (semantic-list "(a)" 303 . 306)))
          ("RESET_BITS" (spp-arg-list ("type" "num" "p" "n") 1398 . 1415) . 
              ((symbol "num" 1416 . 1419) (punctuation "&" 1420 . 1421) (punctuation "=" 1421 . 1422) (symbol "MASK0" 1423 . 1428) (semantic-list "(type, p, n)" 1428 . 1440)))
          ("INSTR_SIZE_OPCODE" . ((number "6" 1531 . 1532)))
          ("MAX_POSSIBLE" (spp-arg-list ("type") 443 . 449) . ((semantic-list "(~(CAST(0, type)))" 458 . 476)))
          ("MASK0" (spp-arg-list ("type" "p" "n") 873 . 885) . ((punctuation "~" 886 . 887) (semantic-list "((~(MAX_POSSIBLE(type) << n)) << p)" 887 . 922)))
          ("PRINT_BITS" (spp-arg-list ("type" "num") 1114 . 1125) . 
              ((FOR "for" 1137 . 1140) (semantic-list "(uint32_t i = 0; i < (SIZEOF_B(type)); ++i)" 1141 . 1184) (semantic-list "{			\\
	printf(								\\
	    \"%d\",							\\
	    CAST(GET_BIT(type, num, ((SIZEOF_B(type)) - i)), bool));	\\
    }" 1185 . 1297) (symbol "printf" 1312 . 1318) (semantic-list "(\"\\n\")" 1318 . 1324)))
          ("MASK1" (spp-arg-list ("type" "pos" "count") 990 . 1008) . ((semantic-list "(~(MASK0(type, (pos), (count))))" 1009 . 1041)))
          ("INSTR_POS_ARG_A" . ((semantic-list "(INSTR_POS_OPCODE + INSTR_SIZE_OPCODE + 1)" 1598 . 1640)))
          ("INSTR_SIZE_ARG_A" . ((number "16" 1666 . 1668)))
          ("SIZEOF_B" (spp-arg-list ("type") 323 . 329) . ((semantic-list "(sizeof(type) * 8)" 330 . 348)))
          ("INSTR_POS_ARG_B" . ((semantic-list "(INSTR_POS_ARG_A + INSTR_SIZE_ARG_A + 1)" 1734 . 1774)))
          ("INSTR_SIZE_ARG_B" . ((number "16" 1800 . 1802)))
          ("INSTR_POS_OPCODE" . ((number "0" 1503 . 1504)))
          ("INSTR_POS_ARG_C" . ((semantic-list "(INSTR_POS_ARG_B + INSTR_SIZE_ARG_B + 1)" 1868 . 1908)))
          ("INSTR_SIZE_ARG_C" . ((number "16" 1934 . 1936)))
          ("CAST" (spp-arg-list ("val" "type") 253 . 264) . ((semantic-list "((type)(val))" 265 . 278)))
          ("SET_BIT" (spp-arg-list ("type" "num" "pos") 566 . 582) . ((semantic-list "(num |= (CAST(2, type) << CAST((pos - 1), type)))" 592 . 641)))
          ("GET_BIT" (spp-arg-list ("type" "num" "pos") 729 . 745) . ((semantic-list "((num >> CAST((pos), type)) & CAST(1, type))" 754 . 798)))
          )
)
    (semanticdb-table "trying_to_with_bits.h"
      :major-mode 'c-mode
      :tags 
        '( ("TRYING_TO_WITH_BITS_H" variable (:constant-flag t) nil [179 200]))          
      :file "trying_to_with_bits.h"
      :pointmax 236
      :fsize 235
      :lastmodtime '(22643 30815 720996 179000)
      :unmatched-syntax nil
      :lexical-table 
        '(("TRYING_TO_WITH_BITS_H")
          )
))
  :file "!home!wrongway4you!Temp!whatever!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
