;; Object linux-4.8.12-gentoo/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "linux-4.8.12-gentoo/"
  :tables
  (list
    (semanticdb-table "Makefile"
      :major-mode 'makefile-gmake-mode
      :tags 
        '( ("VERSION" variable (:default-value ("4")) nil [1 13])
            ("PATCHLEVEL" variable (:default-value ("8")) nil [13 28])
            ("SUBLEVEL" variable (:default-value ("12")) nil [28 42])
            ("EXTRAVERSION" variable (:default-value ("-gentoo")) nil [42 65])
            ("NAME" variable (:default-value ("Psychotic" "Stoned" "Sheep")) nil [65 95])
            ("MAKEFLAGS" variable (:default-value ("-rR" "--include-dir=$(CURDIR)")) nil [520 561])
            ("LC_COLLATE" variable (:default-value ("C")) nil [619 632])
            ("LC_NUMERIC" variable (:default-value ("C")) nil [632 645])
            ("PHONY" variable (:default-value ("_all")) nil [3976 3990])
            ("_all" function nil nil [3990 3996])
            ("Makefile" function (:arguments (";")) nil [4037 4068])
            ("$(CURDIR)" function (:arguments (";")) nil [4037 4068])
            ("saved-output" variable (:default-value ("$(KBUILD_OUTPUT)")) nil [4329 4362])
            ("KBUILD_OUTPUT" variable (:default-value ("$(shell mkdir -p $(KBUILD_OUTPUT) && cd $(KBUILD_OUTPUT) \\
								&& /bin/pwd)")) nil [4362 4459])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)" "sub-make")) nil [4553 4587])
            ("_all" function (:arguments ("sub-make")) nil [4588 4671])
            ("$(filter-out _all sub-make $(CURDIR)/Makefile, $(MAKECMDGOALS))" function (:arguments ("sub-make")) nil [4588 4671])
            ("sub-make" function nil nil [4672 4805])
            ("skip-makefile" variable (:default-value ("1")) nil [4853 4872])
            ("MAKEFLAGS" variable (:default-value ("--no-print-directory")) nil [5214 5248])
            ("PHONY" variable (:default-value ("all")) nil [6149 6162])
            ("_all" function (:arguments ("all")) nil [6187 6197])
            ("_all" function (:arguments ("modules")) nil [6202 6216])
            ("objtree" variable (:default-value (".")) nil [6524 6538])
            ("src" variable (:default-value ("$(srctree)")) nil [6538 6557])
            ("obj" variable (:default-value ("$(objtree)")) nil [6557 6576])
            ("VPATH" variable (:default-value ("$(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))")) nil [6577 6638])
            ("SUBARCH" variable (:default-value ("$(shell uname -m | sed -e s/i.86/x86/ -e s/x86_64/x86/ \\
				  -e s/sun4u/sparc64/ \\
				  -e s/arm.*/arm/ -e s/sa110/arm/ \\
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \\
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \\
				  -e s/sh[234].*/sh/ -e s/aarch64.*/arm64/ )")) nil [7005 7283])
            ("UTS_MACHINE" variable (:default-value ("$(ARCH)")) nil [8432 8456])
            ("SRCARCH" variable (:default-value ("$(ARCH)")) nil [8456 8476])
            ("hdr-arch" variable (:default-value ("$(SRCARCH)")) nil [9019 9043])
            ("CONFIG_SHELL" variable (:default-value ("$(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\
	  else if [ -x /bin/bash ]; then echo /bin/bash; \\
	  else echo sh; fi ; fi)")) nil [9116 9258])
            ("HOSTCC" variable (:default-value ("gcc")) nil [9259 9278])
            ("HOSTCXX" variable (:default-value ("g++")) nil [9278 9297])
            ("HOSTCFLAGS" variable (:default-value ("-Wall" "-Wmissing-prototypes" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer" "-std=gnu89")) nil [9297 9395])
            ("HOSTCXXFLAGS" variable (:default-value ("-O2")) nil [9395 9414])
            ("HOSTCFLAGS" variable (:default-value ("-Wno-unused-value" "-Wno-unused-parameter" "-Wno-missing-field-initializers" "-fno-delete-null-pointer-checks")) nil [9478 9601])
            ("KBUILD_MODULES" variable nil nil [9693 9711])
            ("KBUILD_BUILTIN" variable (:default-value ("1")) nil [9711 9731])
            ("scripts/Kbuild.include" function (:arguments (";")) nil [10523 10549])
            ("scripts/Kbuild.include" include nil nil [10549 10580])
            ("AS" variable (:default-value ("$(CROSS_COMPILE)as")) nil [10611 10636])
            ("LD" variable (:default-value ("$(CROSS_COMPILE)ld")) nil [10636 10661])
            ("CC" variable (:default-value ("$(CROSS_COMPILE)gcc")) nil [10661 10687])
            ("CPP" variable (:default-value ("$(CC)" "-E")) nil [10687 10703])
            ("AR" variable (:default-value ("$(CROSS_COMPILE)ar")) nil [10703 10728])
            ("NM" variable (:default-value ("$(CROSS_COMPILE)nm")) nil [10728 10753])
            ("STRIP" variable (:default-value ("$(CROSS_COMPILE)strip")) nil [10753 10784])
            ("OBJCOPY" variable (:default-value ("$(CROSS_COMPILE)objcopy")) nil [10784 10819])
            ("OBJDUMP" variable (:default-value ("$(CROSS_COMPILE)objdump")) nil [10819 10854])
            ("AWK" variable (:default-value ("awk")) nil [10854 10865])
            ("GENKSYMS" variable (:default-value ("scripts/genksyms/genksyms")) nil [10865 10902])
            ("INSTALLKERNEL" variable (:default-value ("installkernel")) nil [10902 10934])
            ("DEPMOD" variable (:default-value ("/sbin/depmod")) nil [10934 10957])
            ("PERL" variable (:default-value ("perl")) nil [10957 10970])
            ("PYTHON" variable (:default-value ("python")) nil [10970 10987])
            ("CHECK" variable (:default-value ("sparse")) nil [10987 11003])
            ("CHECKFLAGS" variable (:default-value ("-D__linux__" "-Dlinux" "-D__STDC__" "-Dunix" "-D__unix__" "-Wbitwise" "-Wno-return-void" "$(CF)")) nil [11004 11110])
            ("NOSTDINC_FLAGS" variable nil nil [11110 11128])
            ("CFLAGS_MODULE" variable nil nil [11128 11146])
            ("AFLAGS_MODULE" variable nil nil [11146 11164])
            ("LDFLAGS_MODULE" variable nil nil [11164 11182])
            ("CFLAGS_KERNEL" variable nil nil [11182 11198])
            ("AFLAGS_KERNEL" variable nil nil [11198 11214])
            ("LDFLAGS_vmlinux" variable nil nil [11214 11232])
            ("CFLAGS_GCOV" variable (:default-value ("-fprofile-arcs" "-ftest-coverage" "-fno-tree-loop-im")) nil [11232 11295])
            ("CFLAGS_KCOV" variable (:default-value ("$(call cc-option,-fsanitize-coverage=trace-pc,)")) nil [11295 11358])
            ("USERINCLUDE" variable (:default-value ("-I$(srctree)/arch/$(hdr-arch)/include/uapi" "-I$(objtree)/arch/$(hdr-arch)/include/generated/uapi" "-I$(srctree)/include/uapi" "-I$(objtree)/include/generated/uapi" "-include" "$(srctree)/include/linux/kconfig.h")) nil [11429 11683])
            ("LINUXINCLUDE" variable (:default-value ("-I$(srctree)/arch/$(hdr-arch)/include" "-I$(objtree)/arch/$(hdr-arch)/include/generated/uapi" "-I$(objtree)/arch/$(hdr-arch)/include/generated" "$(if $(KBUILD_SRC), -I$(srctree)/include)" "-I$(objtree)/include")) nil [11796 12037])
            ("LINUXINCLUDE" variable (:default-value ("$(filter-out $(LINUXINCLUDE),$(USERINCLUDE))")) nil [12038 12099])
            ("KBUILD_CPPFLAGS" variable (:default-value ("-D__KERNEL__")) nil [12100 12132])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wall" "-Wundef" "-Wstrict-prototypes" "-Wno-trigraphs" "-fno-strict-aliasing" "-fno-common" "-Werror-implicit-function-declaration" "-Wno-format-security" "-std=gnu89" "$(call cc-option,-fno-PIE)")) nil [12133 12359])
            ("KBUILD_AFLAGS_KERNEL" variable nil nil [12361 12385])
            ("KBUILD_CFLAGS_KERNEL" variable nil nil [12385 12409])
            ("KBUILD_AFLAGS" variable (:default-value ("-D__ASSEMBLY__" "$(call cc-option,-fno-PIE)")) nil [12409 12470])
            ("KBUILD_AFLAGS_MODULE" variable (:default-value ("-DMODULE")) nil [12470 12504])
            ("KBUILD_CFLAGS_MODULE" variable (:default-value ("-DMODULE")) nil [12504 12538])
            ("KBUILD_LDFLAGS_MODULE" variable (:default-value ("-T" "$(srctree)/scripts/module-common.lds")) nil [12538 12603])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat include/config/kernel.release 2> /dev/null)")) nil [12675 12747])
            ("KERNELVERSION" variable (:default-value ("$(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)")) nil [12747 12853])
            ("MODVERDIR" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [13665 13752])
            ("export" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [13665 13752])
            ("RCS_FIND_IGNORE" function (:arguments ("=" "\\( -name SCCS -o -name BitKeeper -o -name .svn -o    \\
			  -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [13795 13951])
            ("export" function (:arguments ("=" "\\( -name SCCS -o -name BitKeeper -o -name .svn -o    \\
			  -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [13795 13951])
            ("RCS_TAR_IGNORE" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [13951 14089])
            ("export" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [13951 14089])
            ("PHONY" variable (:default-value ("scripts_basic")) nil [14260 14283])
            ("scripts_basic" function nil nil [14283 14369])
            ("scripts/basic/%" function (:arguments ("scripts_basic" ";")) nil [14436 14469])
            ("PHONY" variable (:default-value ("outputmakefile")) nil [14470 14494])
            ("outputmakefile" function nil nil [14659 14675])
            ("PHONY" variable (:default-value ("asm-generic")) nil [14892 14913])
            ("asm-generic" function nil nil [14913 15178])
            ("version_h" variable (:default-value ("include/generated/uapi/linux/version.h")) nil [15611 15663])
            ("old_version_h" variable (:default-value ("include/linux/version.h")) nil [15663 15704])
            ("no-dot-config-targets" variable (:default-value ("clean" "mrproper" "distclean" "cscope" "gtags" "TAGS" "tags" "help%" "%docs" "check%" "coccicheck" "$(version_h)" "headers_%" "archheaders" "archscripts" "kernelversion" "%src-pkg")) nil [15705 15896])
            ("config-targets" variable (:default-value ("0")) nil [15897 15917])
            ("mixed-targets" variable (:default-value ("0")) nil [15917 15937])
            ("dot-config" variable (:default-value ("1")) nil [15937 15957])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)" "__build_one_by_one")) nil [16779 16823])
            ("$(filter-out __build_one_by_one, $(MAKECMDGOALS))" function (:arguments ("__build_one_by_one")) nil [16824 16898])
            ("__build_one_by_one" function nil nil [16899 17012])
            ("arch/$(SRCARCH)/Makefile" include nil nil [17409 17442])
            ("config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [17482 17566])
            ("%config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [17567 17652])
            ("PHONY" variable (:default-value ("scripts")) nil [18029 18046])
            ("scripts" function (:arguments ("scripts_basic" "include/config/auto.conf" "include/config/tristate.conf" "asm-generic" "gcc-plugins")) nil [18046 18178])
            ("init-y" variable (:default-value ("init/")) nil [18242 18259])
            ("drivers-y" variable (:default-value ("drivers/" "sound/" "firmware/")) nil [18259 18298])
            ("net-y" variable (:default-value ("net/")) nil [18298 18313])
            ("libs-y" variable (:default-value ("lib/")) nil [18313 18329])
            ("core-y" variable (:default-value ("usr/")) nil [18329 18345])
            ("virt-y" variable (:default-value ("virt/")) nil [18345 18362])
            ("include/config/auto.conf.cmd" function (:arguments (";")) nil [18689 18739])
            ("$(KCONFIG_CONFIG)" function (:arguments (";")) nil [18689 18739])
            ("include/config/%.conf" function (:arguments ("$(KCONFIG_CONFIG)" "include/config/auto.conf.cmd")) nil [18997 19119])
            ("PHONY" variable (:default-value ("include/config/auto.conf")) nil [19283 19317])
            ("include/config/auto.conf" function nil nil [19318 19670])
            ("include/config/auto.conf" function (:arguments (";")) nil [19751 19779])
            ("all" function (:arguments ("vmlinux")) nil [20033 20046])
            ("ARCH_CPPFLAGS" variable nil nil [20165 20182])
            ("ARCH_AFLAGS" variable nil nil [20182 20197])
            ("ARCH_CFLAGS" variable nil nil [20197 20212])
            ("arch/$(SRCARCH)/Makefile" include nil nil [20212 20245])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fno-delete-null-pointer-checks,)")) nil [20246 20314])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning,maybe-uninitialized,)")) nil [20314 20379])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning,frame-address,)")) nil [20379 20438])
            ("KBUILD_CFLAGS" variable (:default-value ("-Os")) nil [20473 20494])
            ("KBUILD_CFLAGS" variable (:default-value ("-O2")) nil [20533 20554])
            ("KBUILD_CFLAGS" variable (:default-value ("-O2")) nil [20559 20582])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,--param=allow-store-data-races=0)")) nil [20667 20735])
            ("scripts/Makefile.gcc-plugins" include nil nil [20736 20773])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fno-reorder-blocks,)" "$(call cc-option,-fno-ipa-cp-clone,)" "$(call cc-option,-fno-partial-inlining)")) nil [21021 21192])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})")) nil [21230 21306])
            ("KBUILD_CFLAGS" variable (:default-value ("$(stackp-flag)")) nil [22060 22092])
            ("KBUILD_CPPFLAGS" variable (:default-value ("$(call cc-option,-Qunused-arguments,)")) nil [22117 22174])
            ("KBUILD_CPPFLAGS" variable (:default-value ("$(call cc-option,-Wno-unknown-warning-option,)")) nil [22174 22240])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, unused-variable)")) nil [22240 22301])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, format-invalid-specifier)")) nil [22301 22371])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, gnu)")) nil [22371 22420])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, tautological-compare)")) nil [22497 22563])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -mno-global-merge,)")) nil [22750 22805])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fcatch-undefined-behavior)")) nil [22805 22868])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, unused-but-set-variable)")) nil [22995 23064])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, unused-const-variable)")) nil [23064 23131])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")) nil [23165 23234])
            ("KBUILD_CFLAGS" variable (:default-value ("-fomit-frame-pointer")) nil [23602 23640])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fno-var-tracking-assignments)")) nil [23653 23721])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -gsplit-dwarf, -g)")) nil [23776 23832])
            ("KBUILD_CFLAGS" variable (:default-value ("-g")) nil [23837 23857])
            ("KBUILD_AFLAGS" variable (:default-value ("-Wa,-gdwarf-2")) nil [23863 23894])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -gdwarf-4,)")) nil [23931 23978])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -femit-struct-debug-baseonly)" "$(call cc-option,-fno-var-tracking)")) nil [24017 24126])
            ("CC_FLAGS_FTRACE" variable (:default-value ("-pg")) nil [24185 24208])
            ("CC_USING_FENTRY" variable (:default-value ("$(call cc-option, -mfentry -DCC_USING_FENTRY)")) nil [24262 24327])
            ("KBUILD_CFLAGS" variable (:default-value ("$(CC_FLAGS_FTRACE)" "$(CC_USING_FENTRY)")) nil [24333 24388])
            ("KBUILD_AFLAGS" variable (:default-value ("$(CC_USING_FENTRY)")) nil [24388 24424])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fno-inline-functions-called-once)")) nil [24654 24724])
            ("NOSTDINC_FLAGS" variable (:default-value ("-nostdinc" "-isystem" "$(shell $(CC) -print-file-name=include)")) nil [24808 24885])
            ("CHECKFLAGS" variable (:default-value ("$(NOSTDINC_FLAGS)")) nil [24885 24921])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wdeclaration-after-statement,)")) nil [24967 25033])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, pointer-sign)")) nil [25090 25148])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fno-strict-overflow)")) nil [25216 25272])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fconserve-stack)")) nil [25303 25357])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Werror=implicit-int)")) nil [25420 25478])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Werror=strict-prototypes)")) nil [25554 25617])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Werror=date-time)")) nil [25692 25747])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Werror=incompatible-pointer-types)")) nil [25780 25852])
            ("KBUILD_ARFLAGS" variable (:default-value ("$(call ar-option,D)")) nil [25901 25939])
            ("scripts/Makefile.kasan" include nil nil [26116 26147])
            ("scripts/Makefile.extrawarn" include nil nil [26147 26182])
            ("scripts/Makefile.ubsan" include nil nil [26182 26213])
            ("KBUILD_CPPFLAGS" variable (:default-value ("$(ARCH_CPPFLAGS)" "$(KCPPFLAGS)")) nil [26311 26360])
            ("KBUILD_AFLAGS" variable (:default-value ("$(ARCH_AFLAGS)" "$(KAFLAGS)")) nil [26360 26407])
            ("KBUILD_CFLAGS" variable (:default-value ("$(ARCH_CFLAGS)" "$(KCFLAGS)")) nil [26407 26454])
            ("LDFLAGS_BUILD_ID" variable (:default-value ("$(patsubst -Wl$(comma)%,%,\\
			      $(call cc-ldoption, -Wl$(comma)--build-id,))")) nil [26488 26589])
            ("KBUILD_LDFLAGS_MODULE" variable (:default-value ("$(LDFLAGS_BUILD_ID)")) nil [26589 26634])
            ("LDFLAGS_vmlinux" variable (:default-value ("$(LDFLAGS_BUILD_ID)")) nil [26634 26673])
            ("LDFLAGS_vmlinux" variable (:default-value ("$(call ld-option, -X,)")) nil [26708 26750])
            ("MODLIB" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)")) nil [27701 27759])
            ("mod_strip_cmd" variable (:default-value ("$(STRIP)" "--strip-debug")) nil [28098 28137])
            ("mod_strip_cmd" variable (:default-value ("$(STRIP)" "$(INSTALL_MOD_STRIP)")) nil [28142 28188])
            ("mod_strip_cmd" variable (:default-value ("true")) nil [28221 28242])
            ("mod_compress_cmd" variable (:default-value ("true")) nil [28469 28493])
            ("INITRD_COMPRESS-y" variable (:default-value ("gzip")) nil [28930 28973])
            ("INITRD_COMPRESS-" function (:arguments ("=" "bzip2")) nil [28973 29017])
            ("INITRD_COMPRESS-" function (:arguments ("=" "lzma")) nil [29017 29060])
            ("INITRD_COMPRESS-" function (:arguments ("=" "xz")) nil [29060 29101])
            ("INITRD_COMPRESS-" function (:arguments ("=" "lzo")) nil [29101 29143])
            ("INITRD_COMPRESS-" function (:arguments ("=" "lz4")) nil [29143 29185])
            ("mod_sign_cmd" variable (:default-value ("scripts/sign-file" "$(CONFIG_MODULE_SIG_HASH)" "$(MODULE_SIG_KEY_SRCPREFIX)$(CONFIG_MODULE_SIG_KEY)" "certs/signing_key.x509")) nil [29412 29546])
            ("mod_sign_cmd" variable (:default-value ("true")) nil [29551 29571])
            ("core-y" variable (:default-value ("kernel/" "certs/" "mm/" "fs/" "ipc/" "security/" "crypto/" "block/")) nil [29624 29688])
            ("vmlinux-dirs" variable (:default-value ("$(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \\
		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \\
		     $(net-y) $(net-m) $(libs-y) $(libs-m) $(virt-y)))")) nil [29689 29868])
            ("vmlinux-alldirs" variable (:default-value ("$(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \\
		     $(init-) $(core-) $(drivers-) $(net-) $(libs-) $(virt-))))")) nil [29869 30008])
            ("init-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(init-y))")) nil [30009 30060])
            ("core-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(core-y))")) nil [30060 30111])
            ("drivers-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(drivers-y))")) nil [30111 30167])
            ("net-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(net-y))")) nil [30167 30216])
            ("libs-y1" variable (:default-value ("$(patsubst %/, %/lib.a, $(libs-y))")) nil [30216 30263])
            ("libs-y2" variable (:default-value ("$(patsubst %/, %/built-in.o, $(libs-y))")) nil [30263 30315])
            ("libs-y" variable (:default-value ("$(libs-y1)" "$(libs-y2)")) nil [30315 30348])
            ("virt-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(virt-y))")) nil [30348 30399])
            ("KBUILD_VMLINUX_INIT" function (:arguments ("=" "$(head-y)" "$(init-y)")) nil [30455 30505])
            ("export" function (:arguments ("=" "$(head-y)" "$(init-y)")) nil [30455 30505])
            ("KBUILD_VMLINUX_MAIN" function (:arguments ("=" "$(core-y)" "$(libs-y)" "$(drivers-y)" "$(net-y)" "$(virt-y)")) nil [30505 30587])
            ("export" function (:arguments ("=" "$(core-y)" "$(libs-y)" "$(drivers-y)" "$(net-y)" "$(virt-y)")) nil [30505 30587])
            ("KBUILD_LDS" function (:arguments ("=" "arch/$(SRCARCH)/kernel/vmlinux.lds")) nil [30587 30652])
            ("export" function (:arguments ("=" "arch/$(SRCARCH)/kernel/vmlinux.lds")) nil [30587 30652])
            ("KBUILD_ALLDIRS" function (:arguments ("=" "$(sort $(filter-out arch/%,$(vmlinux-alldirs)) arch Documentation include samples scripts tools)")) nil [30710 30832])
            ("export" function (:arguments ("=" "$(sort $(filter-out arch/%,$(vmlinux-alldirs)) arch Documentation include samples scripts tools)")) nil [30710 30832])
            ("vmlinux-deps" variable (:default-value ("$(KBUILD_LDS)" "$(KBUILD_VMLINUX_INIT)" "$(KBUILD_VMLINUX_MAIN)")) nil [30833 30909])
            ("PHONY" variable (:default-value ("vmlinux_prereq")) nil [31089 31113])
            ("vmlinux_prereq" function (:arguments ("$(vmlinux-deps)" "FORCE")) nil [31113 31151])
            ("include/generated/autoksyms.h" function (:arguments ("FORCE")) nil [31608 31710])
            ("quiet_cmd_link-vmlinux" variable (:default-value ("LINK" "$@")) nil [31815 31851])
            ("vmlinux" function (:arguments ("scripts/link-vmlinux.sh" "vmlinux_prereq" "$(vmlinux-deps)" "FORCE")) nil [31852 31956])
            ("vmlinux-dirs" variable (:default-value ("samples")) nil [32023 32047])
            ("$(sort $(vmlinux-deps))" function (:arguments ("$(vmlinux-dirs)" ";")) nil [32144 32187])
            ("PHONY" variable (:default-value ("$(vmlinux-dirs)")) nil [32472 32497])
            ("$(vmlinux-dirs)" function (:arguments ("prepare" "scripts")) nil [32497 32555])
            ("include/config/kernel.release" function (:arguments ("include/config/auto.conf" "FORCE")) nil [32751 32845])
            ("PHONY" variable (:default-value ("prepare" "archprepare" "prepare0" "prepare1" "prepare2" "prepare3")) nil [33191 33256])
            ("prepare3" function (:arguments ("include/config/kernel.release")) nil [33424 33464])
            ("prepare2" function (:arguments ("prepare3" "prepare-compiler-check" "outputmakefile" "asm-generic")) nil [33968 34037])
            ("prepare1" function (:arguments ("prepare2" "$(version_h)" "include/generated/utsrelease.h" "include/config/auto.conf")) nil [34038 34258])
            ("archprepare" function (:arguments ("archheaders" "archscripts" "prepare1" "scripts_basic")) nil [34259 34319])
            ("prepare0" function (:arguments ("archprepare" "gcc-plugins")) nil [34320 34378])
            ("prepare" function (:arguments ("prepare0" "prepare-objtool")) nil [34401 34435])
            ("PHONY" variable (:default-value ("prepare-objtool")) nil [34835 34860])
            ("prepare-objtool" function (:arguments ("$(objtool_target)")) nil [34860 34895])
            ("PHONY" variable (:default-value ("prepare-compiler-check")) nil [35384 35416])
            ("prepare-compiler-check" function (:arguments ("FORCE")) nil [35416 35446])
            ("uts_len" variable (:default-value ("64")) nil [36274 36288])
            ("$(version_h)" function (:arguments ("$(srctree)/Makefile" "FORCE")) nil [36893 36988])
            ("include/generated/utsrelease.h" function (:arguments ("include/config/kernel.release" "FORCE")) nil [36989 37087])
            ("PHONY" variable (:default-value ("headerdep")) nil [37088 37107])
            ("headerdep" function nil nil [37107 37237])
            ("INSTALL_FW_PATH" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/firmware")) nil [37335 37384])
            ("PHONY" variable (:default-value ("firmware_install")) nil [37408 37434])
            ("firmware_install" function nil nil [37434 37560])
            ("hdr-dst" variable (:default-value ("$(if $(KBUILD_HEADERS), dst=include/asm-$(hdr-arch), dst=include/asm)")) nil [37797 37877])
            ("PHONY" variable (:default-value ("archheaders")) nil [37878 37899])
            ("archheaders" function nil nil [37899 37912])
            ("PHONY" variable (:default-value ("archscripts")) nil [37913 37934])
            ("archscripts" function nil nil [37934 37947])
            ("PHONY" variable (:default-value ("__headers")) nil [37948 37967])
            ("__headers" function (:arguments ("$(version_h)" "scripts_basic" "asm-generic" "archheaders" "archscripts")) nil [37967 38085])
            ("PHONY" variable (:default-value ("headers_install_all")) nil [38086 38115])
            ("headers_install_all" function nil nil [38115 38195])
            ("PHONY" variable (:default-value ("headers_install")) nil [38196 38221])
            ("headers_install" function (:arguments ("__headers")) nil [38221 38498])
            ("PHONY" variable (:default-value ("headers_check_all")) nil [38499 38526])
            ("headers_check_all" function (:arguments ("headers_install_all")) nil [38526 38622])
            ("PHONY" variable (:default-value ("headers_check")) nil [38623 38646])
            ("headers_check" function (:arguments ("headers_install")) nil [38646 38807])
            ("PHONY" variable (:default-value ("kselftest")) nil [38905 38924])
            ("kselftest" function nil nil [38924 38985])
            ("kselftest-clean" function nil nil [38986 39049])
            ("PHONY" variable (:default-value ("kselftest-merge")) nil [39050 39075])
            ("kselftest-merge" function nil nil [39075 39374])
            ("all" function (:arguments ("modules")) nil [39523 39536])
            ("PHONY" variable (:default-value ("modules")) nil [39730 39747])
            ("modules" function (:arguments ("$(vmlinux-dirs)" "$(if $(KBUILD_BUILTIN),vmlinux)" "modules.builtin")) nil [39747 40089])
            ("modules.builtin" function (:arguments ("$(vmlinux-dirs:%=%/modules.builtin)")) nil [40090 40199])
            ("%/modules.builtin" function (:arguments ("include/config/auto.conf")) nil [40200 40274])
            ("PHONY" variable (:default-value ("modules_prepare")) nil [40322 40347])
            ("modules_prepare" function (:arguments ("prepare" "scripts")) nil [40347 40380])
            ("PHONY" variable (:default-value ("modules_install")) nil [40409 40434])
            ("modules_install" function (:arguments ("_modinst_" "_modinst_post")) nil [40434 40475])
            ("PHONY" variable (:default-value ("_modinst_")) nil [40476 40495])
            ("_modinst_" function nil nil [40495 40901])
            ("PHONY" variable (:default-value ("_modinst_post")) nil [41075 41098])
            ("_modinst_post" function (:arguments ("_modinst_")) nil [41098 41220])
            ("PHONY" variable (:default-value ("modules_sign")) nil [41252 41274])
            ("modules_sign" function nil nil [41274 41340])
            ("PHONY" variable (:default-value ("modules" "modules_install")) nil [41474 41507])
            ("modules_install" function nil nil [41507 41761])
            ("modules" function nil nil [41507 41761])
            ("CLEAN_DIRS" variable (:default-value ("$(MODVERDIR)")) nil [42130 42158])
            ("MRPROPER_DIRS" variable (:default-value ("include/config" "usr/include" "include/generated" "arch/*/include/generated" ".tmp_objdiff")) nil [42210 42326])
            ("MRPROPER_FILES" variable (:default-value (".config" ".config.old" ".version" ".old_version" "Module.symvers" "tags" "TAGS" "cscope*" "GPATH" "GTAGS" "GRTAGS" "GSYMS" "signing_key.pem" "signing_key.priv" "signing_key.x509" "x509.genkey" "extra_certificates" "signing_key.x509.keyid" "signing_key.x509.signer" "vmlinux-gdb.py")) nil [42326 42611])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(CLEAN_DIRS)")) nil [42680 42713])
            ("clean" function (:arguments ("rm-files" ":=" "$(CLEAN_FILES)")) nil [42713 42747])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_, . $(vmlinux-alldirs) Documentation samples)")) nil [42747 42831])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean" "archclean" "vmlinuxclean")) nil [42832 42884])
            ("$(clean-dirs)" function nil nil [42884 42947])
            ("vmlinuxclean" function nil nil [42948 43024])
            ("clean" function (:arguments ("archclean" "vmlinuxclean")) nil [43025 43055])
            ("mrproper" function (:arguments ("rm-dirs" ":=" "$(wildcard $(MRPROPER_DIRS))")) nil [43117 43168])
            ("mrproper" function (:arguments ("rm-files" ":=" "$(wildcard $(MRPROPER_FILES))")) nil [43168 43220])
            ("mrproper-dirs" variable (:default-value ("$(addprefix _mrproper_,Documentation/DocBook scripts)")) nil [43220 43296])
            ("PHONY" variable (:default-value ("$(mrproper-dirs)" "mrproper" "archmrproper")) nil [43297 43345])
            ("$(mrproper-dirs)" function nil nil [43345 43414])
            ("mrproper" function (:arguments ("clean" "archmrproper" "$(mrproper-dirs)")) nil [43415 43502])
            ("PHONY" variable (:default-value ("distclean")) nil [43517 43536])
            ("distclean" function (:arguments ("mrproper")) nil [43537 43791])
            ("package-dir" variable (:default-value ("scripts/package")) nil [43961 43992])
            ("%src-pkg" function (:arguments ("FORCE")) nil [43993 44049])
            ("%pkg" function (:arguments ("include/config/kernel.release" "FORCE")) nil [44049 44131])
            ("rpm" function (:arguments ("include/config/kernel.release" "FORCE")) nil [44131 44212])
            ("boards" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)")) nil [44343 44412])
            ("boards" variable (:default-value ("$(sort $(notdir $(boards)))")) nil [44412 44450])
            ("board-dirs" variable (:default-value ("$(dir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*/*_defconfig))")) nil [44450 44532])
            ("board-dirs" variable (:default-value ("$(sort $(notdir $(board-dirs:/=)))")) nil [44532 44581])
            ("PHONY" variable (:default-value ("help")) nil [44582 44596])
            ("help" function nil nil [44596 48165])
            ("help-board-dirs" variable (:default-value ("$(addprefix help-,$(board-dirs))")) nil [49130 49182])
            ("help-boards" function (:arguments ("$(help-board-dirs)")) nil [49183 49215])
            ("boards-per-dir" variable (:default-value ("$(sort $(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig)))")) nil [49216 49313])
            ("$(help-board-dirs)" function (:arguments ("help-%:")) nil [49314 49549])
            ("DOC_TARGETS" variable (:default-value ("xmldocs" "sgmldocs" "psdocs" "pdfdocs" "htmldocs" "mandocs" "installmandocs" "epubdocs" "cleandocs")) nil [49653 49751])
            ("PHONY" variable (:default-value ("$(DOC_TARGETS)")) nil [49751 49775])
            ("$(DOC_TARGETS)" function (:arguments ("scripts_basic" "FORCE")) nil [49775 50006])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [50789 50809])
            ("PHONY" variable (:default-value ("crmodverdir")) nil [50809 50830])
            ("crmodverdir" function nil nil [50830 50863])
            ("PHONY" variable (:default-value ("$(objtree)/Module.symvers")) nil [50864 50899])
            ("$(objtree)" function nil nil [50899 51139])
            ("module-dirs" variable (:default-value ("$(addprefix _module_,$(KBUILD_EXTMOD))")) nil [51140 51194])
            ("PHONY" variable (:default-value ("$(module-dirs)" "modules")) nil [51194 51226])
            ("$(module-dirs)" function (:arguments ("crmodverdir" "$(objtree)/Module.symvers")) nil [51226 51329])
            ("modules" function (:arguments ("$(module-dirs)")) nil [51330 51449])
            ("PHONY" variable (:default-value ("modules_install")) nil [51450 51475])
            ("modules_install" function (:arguments ("_emodinst_" "_emodinst_post")) nil [51475 51518])
            ("install-dir" variable (:default-value ("$(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)")) nil [51519 51584])
            ("PHONY" variable (:default-value ("_emodinst_")) nil [51584 51604])
            ("_emodinst_" function nil nil [51604 51707])
            ("PHONY" variable (:default-value ("_emodinst_post")) nil [51708 51732])
            ("_emodinst_post" function (:arguments ("_emodinst_")) nil [51732 51779])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(KBUILD_EXTMOD))")) nil [51780 51832])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean")) nil [51833 51862])
            ("$(clean-dirs)" function nil nil [51862 51925])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(MODVERDIR)")) nil [51926 51957])
            ("clean" function (:arguments ("rm-files" ":=" "$(KBUILD_EXTMOD)/Module.symvers")) nil [51957 52008])
            ("PHONY" variable (:default-value ("help")) nil [52009 52023])
            ("help" function nil nil [52023 52345])
            ("PHONY" variable (:default-value ("prepare" "scripts")) nil [52359 52384])
            ("prepare" function (:arguments (";")) nil [52384 52395])
            ("scripts" function (:arguments (";")) nil [52395 52406])
            ("clean" function (:arguments ("$(clean-dirs)")) nil [52429 52924])
            ("quiet_cmd_tags" variable (:default-value ("GEN" "$@")) nil [53031 53059])
            ("TAGS" function (:arguments ("FORCE")) nil [53123 53171])
            ("tags" function (:arguments ("FORCE")) nil [53123 53171])
            ("PHONY" variable (:default-value ("includecheck" "versioncheck" "coccicheck" "namespacecheck" "export_report")) nil [53301 53376])
            ("includecheck" function nil nil [53377 53530])
            ("versioncheck" function nil nil [53531 53683])
            ("coccicheck" function nil nil [53684 53739])
            ("namespacecheck" function nil nil [53740 53797])
            ("export_report" function nil nil [53798 53858])
            ("PHONY" variable (:default-value ("checkstack" "kernelrelease" "kernelversion" "image_name")) nil [53927 53986])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(SUBARCH)")) nil [54253 54283])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(ARCH)")) nil [54288 54315])
            ("checkstack" function nil nil [54321 54441])
            ("kernelrelease" function nil nil [54442 54548])
            ("kernelversion" function nil nil [54549 54588])
            ("image_name" function nil nil [54589 54624])
            ("tools/" function (:arguments ("FORCE")) nil [54683 54860])
            ("tools/%" function (:arguments ("FORCE")) nil [54861 55042])
            ("%.s" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [55697 55789])
            ("%.i" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [55789 55881])
            ("%.o" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [55881 55973])
            ("%.lst" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [55973 56067])
            ("%.s" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [56067 56159])
            ("%.o" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [56159 56251])
            ("%.symtypes" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [56251 56350])
            ("/" function (:arguments ("prepare" "scripts" "FORCE")) nil [56361 56485])
            ("samples/" function (:arguments ("headers_install")) nil [56544 56585])
            ("Documentation/" function (:arguments ("headers_install")) nil [56544 56585])
            ("%/" function (:arguments ("prepare" "scripts" "FORCE")) nil [56585 56710])
            ("%.ko" function (:arguments ("prepare" "scripts" "FORCE")) nil [56710 56903])
            ("quiet_cmd_rmdirs" variable (:default-value ("$(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))")) nil [57030 57109])
            ("quiet_cmd_rmfiles" variable (:default-value ("$(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))")) nil [57147 57229])
            ("quiet_cmd_depmod" variable (:default-value ("DEPMOD" "$(KERNELRELEASE)")) nil [57333 57377])
            ("cmd_crmodverdir" variable (:default-value ("$(Q)mkdir" "-p" "$(MODVERDIR)" "$(if $(KBUILD_MODULES),; rm -f $(MODVERDIR)/*)")) nil [57641 57752])
            ("targets" variable (:default-value ("$(wildcard $(sort $(targets)))")) nil [57785 57827])
            ("cmd_files" variable (:default-value ("$(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))")) nil [57827 57914])
            ("PHONY" variable (:default-value ("FORCE")) nil [58057 58072])
            ("FORCE" function nil nil [58072 58079]))          
      :file "Makefile"
      :pointmax 58239
      :fsize 58238
      :lastmodtime '(22596 25965 949981 786000)
      :unmatched-syntax '((semantic-list 58231 . 58238) (punctuation 58230 . 58231) (punctuation 58228 . 58229) (symbol 58222 . 58228) (bol 58222 . 58222) (ENDIF 58034 . 58039) (bol 58034 . 58034) (semantic-list 58015 . 58026) (punctuation 58014 . 58015) (INCLUDE 58006 . 58013) (bol 58004 . 58004) (punctuation 57953 . 57954) (punctuation 57951 . 57952) (semantic-list 57940 . 57951) (punctuation 57939 . 57940) (bol 57937 . 57937) (string 57489 . 57546) (semantic-list 57473 . 57488) (punctuation 57472 . 57473) (semantic-list 57442 . 57450) (punctuation 57441 . 57442) (symbol 57422 . 57440) (semantic-list 57413 . 57422) (punctuation 57412 . 57413) (semantic-list 57397 . 57411) (punctuation 57396 . 57397) (punctuation 57394 . 57395) (symbol 57383 . 57393) (bol 57377 . 57377) (semantic-list 57256 . 57266) (punctuation 57255 . 57256) (symbol 57252 . 57254) (symbol 57249 . 57251) (punctuation 57247 . 57248) (symbol 57235 . 57246) (bol 57229 . 57229) (semantic-list 57136 . 57145) (punctuation 57135 . 57136) (symbol 57131 . 57134) (symbol 57128 . 57130) (punctuation 57126 . 57127) (symbol 57115 . 57125) (bol 57109 . 57109) (semantic-list 55648 . 55689) (punctuation 55647 . 55648) (punctuation 55645 . 55646) (symbol 55634 . 55644) (bol 55626 . 55626) (semantic-list 55594 . 55625) (punctuation 55593 . 55594) (semantic-list 55578 . 55593) (punctuation 55577 . 55578) (punctuation 55575 . 55576) (symbol 55564 . 55573) (bol 55556 . 55556) (semantic-list 55514 . 55555) (punctuation 55513 . 55514) (punctuation 55512 . 55513) (symbol 55503 . 55512) (bol 55495 . 55495) (semantic-list 55481 . 55489) (punctuation 55480 . 55481) (punctuation 55478 . 55479) (symbol 55467 . 55477) (bol 55459 . 55459) (semantic-list 55433 . 55458) (punctuation 55432 . 55433) (punctuation 55430 . 55431) (symbol 55419 . 55428) (bol 55411 . 55411) (ENDIF 53893 . 53898) (bol 53893 . 53893) (ENDIF 53859 . 53864) (bol 53859 . 53859) (punctuation 53120 . 53121) (punctuation 53119 . 53120) (symbol 53102 . 53118) (semantic-list 53093 . 53102) (punctuation 53092 . 53093) (semantic-list 53077 . 53091) (punctuation 53076 . 53077) (punctuation 53074 . 53075) (symbol 53065 . 53073) (bol 53059 . 53059) (ENDIF 52406 . 52411) (bol 52406 . 52406) (ELSE 50007 . 50011) (bol 50007 . 50007) (shell-command 49080 . 49127) (bol 49079 . 49079) (shell-command 49003 . 49078) (bol 49002 . 49002) (shell-command 48992 . 49001) (bol 48991 . 48991) (shell-command 48929 . 48990) (bol 48928 . 48928) (shell-command 48864 . 48927) (bol 48863 . 48863) (shell-command 48790 . 48862) (bol 48789 . 48789) (shell-command 48717 . 48788) (bol 48716 . 48716) (shell-command 48645 . 48715) (bol 48644 . 48644) (shell-command 48563 . 48643) (bol 48562 . 48562) (shell-command 48489 . 48561) (bol 48488 . 48488) (shell-command 48404 . 48487) (bol 48403 . 48403) (shell-command 48319 . 48402) (bol 48318 . 48318) (shell-command 48247 . 48317) (bol 48246 . 48246) (shell-command 48167 . 48245) (bol 48166 . 48166) (ENDIF 41762 . 41767) (bol 41762 . 41762) (ELSE 41347 . 41351) (bol 41347 . 41347) (symbol 37733 . 37737) (semantic-list 37724 . 37733) (punctuation 37723 . 37724) (punctuation 37721 . 37722) (symbol 37704 . 37720) (symbol 37697 . 37703) (bol 37697 . 37697) (symbol 37391 . 37406) (symbol 37384 . 37390) (bol 37384 . 37384) (symbol 36886 . 36891) (bol 36886 . 36886) (shell-command 36676 . 36885) (bol 36675 . 36675) (symbol 36657 . 36674) (symbol 36650 . 36656) (bol 36650 . 36650) (symbol 36643 . 36648) (bol 36643 . 36643) (shell-command 36317 . 36642) (bol 36316 . 36316) (symbol 36295 . 36315) (symbol 36288 . 36294) (bol 36288 . 36288) (shell-command 36033 . 36035) (bol 36032 . 36032) (ENDIF 36020 . 36025) (bol 36018 . 36018) (shell-command 35878 . 36017) (bol 35877 . 35877) (semantic-list 35797 . 35876) (IFNEQ 35791 . 35796) (bol 35789 . 35789) (ENDIF 35692 . 35697) (bol 35690 . 35690) (shell-command 35571 . 35689) (bol 35570 . 35570) (semantic-list 35533 . 35569) (IFEQ 35528 . 35532) (bol 35526 . 35526) (ENDIF 34822 . 34827) (bol 34820 . 34820) (symbol 34798 . 34819) (symbol 34791 . 34797) (bol 34787 . 34787) (symbol 34785 . 34786) (punctuation 34783 . 34784) (punctuation 34782 . 34783) (symbol 34760 . 34781) (bol 34756 . 34756) (semantic-list 34643 . 34755) (punctuation 34642 . 34643) (bol 34638 . 34638) (ELSE 34633 . 34637) (bol 34631 . 34631) (symbol 34625 . 34630) (symbol 34611 . 34624) (punctuation 34609 . 34610) (punctuation 34608 . 34609) (symbol 34593 . 34607) (bol 34589 . 34589) (semantic-list 34571 . 34588) (IFEQ 34566 . 34570) (bol 34564 . 34564) (semantic-list 34483 . 34563) (punctuation 34482 . 34483) (punctuation 34480 . 34481) (punctuation 34479 . 34480) (symbol 34468 . 34478) (bol 34466 . 34466) (shell-command 33541 . 33752) (bol 33540 . 33540) (shell-command 33488 . 33539) (bol 33487 . 33487) (symbol 32676 . 32681) (bol 32676 . 32676) (shell-command 32587 . 32675) (bol 32586 . 32586) (symbol 32563 . 32585) (symbol 32556 . 32562) (bol 32556 . 32556) (semantic-list 31797 . 31814) (punctuation 31796 . 31797) (semantic-list 31786 . 31795) (punctuation 31785 . 31786) (semantic-list 31780 . 31784) (punctuation 31779 . 31780) (symbol 31777 . 31778) (punctuation 31776 . 31777) (semantic-list 31761 . 31775) (punctuation 31760 . 31761) (punctuation 31758 . 31759) (symbol 31741 . 31757) (bol 31735 . 31735) (shell-command 31433 . 31561) (bol 31432 . 31432) (shell-command 31328 . 31394) (bol 31327 . 31327) (shell-command 31261 . 31295) (bol 31260 . 31260) (shell-command 31179 . 31227) (bol 31178 . 31178) (symbol 30659 . 30674) (symbol 30652 . 30658) (bol 30652 . 30652) (symbol 29584 . 29596) (symbol 29577 . 29583) (bol 29577 . 29577) (semantic-list 29365 . 29410) (punctuation 29364 . 29365) (bol 29364 . 29364) (symbol 28767 . 28783) (symbol 28760 . 28766) (bol 28760 . 28760) (ENDIF 28729 . 28734) (bol 28729 . 28729) (ENDIF 28695 . 28700) (bol 28693 . 28693) (symbol 28690 . 28692) (symbol 28687 . 28689) (punctuation 28685 . 28686) (symbol 28668 . 28684) (bol 28664 . 28664) (symbol 28638 . 28663) (IFDEF 28632 . 28637) (bol 28630 . 28630) (ENDIF 28594 . 28599) (bol 28592 . 28592) (symbol 28589 . 28591) (symbol 28586 . 28588) (symbol 28581 . 28585) (punctuation 28579 . 28580) (symbol 28562 . 28578) (bol 28558 . 28558) (symbol 28530 . 28557) (IFDEF 28524 . 28529) (bol 28522 . 28522) (symbol 28275 . 28288) (symbol 28268 . 28274) (bol 28268 . 28268) (ENDIF 28242 . 28247) (bol 28242 . 28242) (ENDIF 28188 . 28193) (bol 28188 . 28188) (symbol 27766 . 27772) (symbol 27759 . 27765) (bol 27759 . 27759) (semantic-list 27482 . 27497) (punctuation 27481 . 27482) (symbol 27475 . 27481) (semantic-list 27461 . 27475) (punctuation 27460 . 27461) (punctuation 27458 . 27459) (punctuation 27457 . 27458) (symbol 27439 . 27456) (symbol 27432 . 27438) (bol 27432 . 27432) (symbol 27187 . 27192) (punctuation 27185 . 27186) (punctuation 27184 . 27185) (symbol 27171 . 27183) (symbol 27164 . 27170) (bol 27164 . 27164) (symbol 27016 . 27023) (punctuation 27014 . 27015) (punctuation 27013 . 27014) (symbol 27000 . 27012) (symbol 26993 . 26999) (bol 26993 . 26993) (shell-command 26073 . 26108) (bol 26072 . 26072) (shell-command 26036 . 26071) (bol 26035 . 26035) (shell-command 24545 . 24550) (bol 24544 . 24544) (shell-command 24515 . 24543) (bol 24514 . 24514) (shell-command 24487 . 24513) (bol 24486 . 24486) (shell-command 24453 . 24485) (bol 24452 . 24452) (symbol 24221 . 24236) (symbol 24214 . 24220) (bol 24214 . 24214) (semantic-list 22028 . 22053) (punctuation 22027 . 22028) (punctuation 22025 . 22026) (punctuation 22024 . 22025) (symbol 22011 . 22023) (bol 22009 . 22009) (symbol 21985 . 22008) (semantic-list 21979 . 21985) (punctuation 21978 . 21979) (symbol 21977 . 21978) (semantic-list 21968 . 21977) (punctuation 21967 . 21968) (symbol 21954 . 21967) (semantic-list 21945 . 21954) (punctuation 21944 . 21945) (punctuation 21942 . 21943) (punctuation 21941 . 21942) (symbol 21929 . 21940) (bol 21927 . 21927) (semantic-list 21775 . 21813) (punctuation 21774 . 21775) (punctuation 21772 . 21773) (punctuation 21771 . 21772) (symbol 21759 . 21770) (bol 21757 . 21757) (bol 21682 . 21682) (symbol 21670 . 21676) (punctuation 21668 . 21669) (punctuation 21667 . 21668) (symbol 21655 . 21666) (bol 21653 . 21653) (symbol 21628 . 21652) (punctuation 21626 . 21627) (punctuation 21625 . 21626) (symbol 21613 . 21624) (bol 21611 . 21611) (symbol 21560 . 21567) (punctuation 21558 . 21559) (punctuation 21557 . 21558) (symbol 21545 . 21556) (bol 21543 . 21543) (symbol 21525 . 21542) (punctuation 21523 . 21524) (punctuation 21522 . 21523) (symbol 21510 . 21521) (bol 21508 . 21508) (ENDIF 19779 . 19784) (bol 19779 . 19779) (ENDIF 19671 . 19676) (bol 19671 . 19671) (symbol 18594 . 18622) (symbol 18585 . 18593) (bol 18585 . 18585) (symbol 18434 . 18458) (symbol 18425 . 18433) (bol 18425 . 18425) (ENDIF 18362 . 18367) (bol 18362 . 18362) (symbol 17466 . 17480) (symbol 17449 . 17465) (symbol 17442 . 17448) (bol 17442 . 17442) (ENDIF 16572 . 16577) (bol 16564 . 16564) (shell-command 16537 . 16563) (bol 16536 . 16536) (semantic-list 16491 . 16535) (IFNEQ 16485 . 16490) (bol 16477 . 16477) (ENDIF 16359 . 16364) (bol 16351 . 16351) (ENDIF 16345 . 16350) (bol 16329 . 16329) (symbol 16327 . 16328) (punctuation 16325 . 16326) (punctuation 16324 . 16325) (symbol 16310 . 16323) (bol 16286 . 16286) (semantic-list 16257 . 16285) (IFNEQ 16251 . 16256) (bol 16235 . 16235) (symbol 16233 . 16234) (punctuation 16231 . 16232) (punctuation 16230 . 16231) (symbol 16215 . 16229) (bol 16199 . 16199) (semantic-list 16155 . 16198) (IFNEQ 16149 . 16154) (bol 16141 . 16141) (shell-command 16103 . 16108) (bol 16102 . 16102) (shell-command 16085 . 16101) (bol 16084 . 16084) (shell-command 16020 . 16083) (bol 16019 . 16019) (shell-command 14730 . 14833) (bol 14729 . 14729) (shell-command 14699 . 14728) (bol 14698 . 14698) (symbol 13501 . 13515) (symbol 13494 . 13500) (bol 13494 . 13494) (symbol 13473 . 13493) (symbol 13452 . 13472) (symbol 13445 . 13451) (bol 13445 . 13445) (symbol 13423 . 13444) (symbol 13402 . 13422) (symbol 13381 . 13401) (symbol 13374 . 13380) (bol 13374 . 13374) (symbol 13360 . 13373) (symbol 13346 . 13359) (symbol 13332 . 13345) (symbol 13325 . 13331) (bol 13325 . 13325) (symbol 13312 . 13324) (symbol 13299 . 13311) (symbol 13287 . 13298) (symbol 13275 . 13286) (symbol 13261 . 13274) (symbol 13247 . 13260) (symbol 13233 . 13246) (symbol 13226 . 13232) (bol 13226 . 13226) (symbol 13218 . 13225) (symbol 13205 . 13217) (symbol 13192 . 13204) (symbol 13177 . 13191) (symbol 13161 . 13176) (symbol 13154 . 13160) (bol 13154 . 13154) (symbol 13142 . 13152) (symbol 13136 . 13141) (symbol 13121 . 13135) (symbol 13108 . 13120) (symbol 13100 . 13107) (symbol 13093 . 13099) (bol 13093 . 13093) (symbol 13081 . 13092) (symbol 13074 . 13080) (symbol 13069 . 13073) (symbol 13055 . 13068) (symbol 13046 . 13054) (symbol 13042 . 13045) (symbol 13037 . 13041) (symbol 13030 . 13036) (bol 13030 . 13030) (symbol 13022 . 13029) (symbol 13014 . 13021) (symbol 13008 . 13013) (symbol 13005 . 13007) (symbol 13002 . 13004) (symbol 12998 . 13001) (symbol 12991 . 12997) (bol 12991 . 12991) (symbol 12988 . 12990) (symbol 12985 . 12987) (symbol 12982 . 12984) (symbol 12968 . 12981) (symbol 12957 . 12967) (symbol 12950 . 12956) (symbol 12937 . 12949) (symbol 12929 . 12936) (symbol 12924 . 12928) (symbol 12917 . 12923) (bol 12917 . 12917) (symbol 12903 . 12916) (symbol 12889 . 12902) (symbol 12880 . 12888) (symbol 12869 . 12879) (symbol 12861 . 12868) (symbol 12854 . 12860) (bol 12854 . 12854) (symbol 10440 . 10453) (symbol 10429 . 10439) (symbol 10413 . 10428) (symbol 10406 . 10412) (bol 10406 . 10406) (symbol 10391 . 10405) (symbol 10376 . 10390) (symbol 10369 . 10375) (bol 10369 . 10369) (symbol 10360 . 10361) (punctuation 10358 . 10359) (punctuation 10357 . 10358) (symbol 10342 . 10356) (bol 10340 . 10340) (symbol 10307 . 10308) (punctuation 10305 . 10306) (punctuation 10304 . 10305) (symbol 10289 . 10303) (bol 10287 . 10287) (semantic-list 10046 . 10074) (punctuation 10045 . 10046) (punctuation 10043 . 10044) (punctuation 10042 . 10043) (symbol 10027 . 10041) (bol 10025 . 10025) (symbol 9077 . 9091) (symbol 9070 . 9076) (bol 9070 . 9070) (symbol 9062 . 9069) (punctuation 9060 . 9061) (punctuation 9059 . 9060) (symbol 9044 . 9058) (bol 9044 . 9044) (symbol 8967 . 8971) (punctuation 8965 . 8966) (punctuation 8964 . 8965) (symbol 8956 . 8963) (bol 8949 . 8949) (symbol 8916 . 8920) (punctuation 8914 . 8915) (punctuation 8913 . 8914) (symbol 8905 . 8912) (bol 8898 . 8898) (symbol 8829 . 8831) (punctuation 8827 . 8828) (punctuation 8826 . 8827) (symbol 8818 . 8825) (bol 8811 . 8811) (symbol 8744 . 8749) (punctuation 8742 . 8743) (punctuation 8741 . 8742) (symbol 8733 . 8740) (bol 8726 . 8726) (symbol 8691 . 8696) (punctuation 8689 . 8690) (punctuation 8688 . 8689) (symbol 8680 . 8687) (bol 8673 . 8673) (symbol 8602 . 8605) (punctuation 8600 . 8601) (punctuation 8599 . 8600) (symbol 8591 . 8598) (bol 8583 . 8583) (symbol 8551 . 8554) (punctuation 8549 . 8550) (punctuation 8548 . 8549) (symbol 8540 . 8547) (bol 8532 . 8532) (semantic-list 8363 . 8391) (punctuation 8362 . 8363) (punctuation 8360 . 8361) (punctuation 8359 . 8360) (symbol 8345 . 8358) (bol 8345 . 8345) (semantic-list 8335 . 8344) (punctuation 8334 . 8335) (punctuation 8332 . 8333) (punctuation 8331 . 8332) (symbol 8325 . 8329) (bol 8325 . 8325) (symbol 6662 . 6667) (symbol 6654 . 6661) (symbol 6646 . 6653) (symbol 6639 . 6645) (bol 6639 . 6639) (ENDIF 6512 . 6517) (bol 6504 . 6504) (semantic-list 6491 . 6503) (punctuation 6490 . 6491) (punctuation 6488 . 6489) (punctuation 6487 . 6488) (symbol 6479 . 6486) (bol 6463 . 6463) (ELSE 6458 . 6462) (bol 6450 . 6450) (symbol 6447 . 6449) (punctuation 6445 . 6446) (punctuation 6444 . 6445) (symbol 6436 . 6443) (bol 6420 . 6420) (bol 6356 . 6356) (semantic-list 6322 . 6355) (IFEQ 6317 . 6321) (bol 6309 . 6309) (symbol 6302 . 6303) (punctuation 6300 . 6301) (punctuation 6299 . 6300) (symbol 6291 . 6298) (bol 6283 . 6283) (bol 6245 . 6245) (semantic-list 6033 . 6036) (punctuation 6032 . 6033) (punctuation 6030 . 6031) (punctuation 6029 . 6030) (symbol 6015 . 6028) (bol 6013 . 6013) (semantic-list 5959 . 5968) (punctuation 5958 . 5959) (punctuation 5956 . 5957) (punctuation 5955 . 5956) (symbol 5941 . 5954) (bol 5939 . 5939) (symbol 5731 . 5732) (punctuation 5729 . 5730) (symbol 5713 . 5728) (bol 5711 . 5711) (semantic-list 5678 . 5681) (punctuation 5677 . 5678) (punctuation 5675 . 5676) (symbol 5659 . 5674) (bol 5657 . 5657) (ENDIF 4906 . 4911) (bol 4906 . 4906) (ENDIF 4872 . 4877) (bol 4872 . 4872) (semantic-list 4460 . 4551) (punctuation 4459 . 4460) (bol 4459 . 4459) (semantic-list 4115 . 4170) (punctuation 4114 . 4115) (bol 4112 . 4112) (semantic-list 3898 . 3901) (punctuation 3897 . 3898) (punctuation 3895 . 3896) (punctuation 3894 . 3895) (symbol 3880 . 3893) (bol 3878 . 3878) (symbol 3010 . 3024) (symbol 3008 . 3009) (symbol 3002 . 3007) (symbol 2995 . 3001) (bol 2995 . 2995) (symbol 2974 . 2981) (punctuation 2973 . 2974) (symbol 2968 . 2973) (bol 2966 . 2966) (ELSE 2906 . 2910) (bol 2906 . 2906) (symbol 2892 . 2899) (punctuation 2891 . 2892) (symbol 2886 . 2891) (bol 2884 . 2884) (semantic-list 2792 . 2824) (IFNEQ 2786 . 2791) (bol 2786 . 2786) (punctuation 2697 . 2698) (punctuation 2695 . 2696) (symbol 2693 . 2694) (bol 2691 . 2691) (symbol 2684 . 2690) (punctuation 2683 . 2684) (symbol 2678 . 2683) (bol 2676 . 2676) (punctuation 2669 . 2670) (symbol 2667 . 2668) (bol 2665 . 2665) (punctuation 2663 . 2664) (symbol 2657 . 2662) (bol 2655 . 2655) (symbol 2619 . 2620) (punctuation 2617 . 2618) (symbol 2602 . 2616) (bol 2600 . 2600) (semantic-list 2568 . 2571) (punctuation 2567 . 2568) (punctuation 2565 . 2566) (symbol 2550 . 2564) (bol 2548 . 2548) (symbol 729 . 741) (symbol 720 . 728) (bol 720 . 720) (symbol 663 . 673) (symbol 652 . 662) (symbol 645 . 651) (bol 645 . 645) (symbol 612 . 618) (symbol 603 . 611) (bol 603 . 603))))
  :file "!usr!src!linux-4.8.12-gentoo!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
