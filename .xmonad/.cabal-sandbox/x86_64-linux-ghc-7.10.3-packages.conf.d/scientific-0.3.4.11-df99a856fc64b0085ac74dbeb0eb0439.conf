name: scientific
version: 0.3.4.11
id: scientific-0.3.4.11-df99a856fc64b0085ac74dbeb0eb0439
key: scien_1Szjopdb0AY47QWbaUqVAo
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/wrongway4you/Git/dotfiles/.xmonad/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11-1Szjopdb0AY47QWbaUqVAo
library-dirs: /home/wrongway4you/Git/dotfiles/.xmonad/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11-1Szjopdb0AY47QWbaUqVAo
data-dir: /home/wrongway4you/Git/dotfiles/.xmonad/.cabal-sandbox/share/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11
hs-libraries: HSscientific-0.3.4.11-1Szjopdb0AY47QWbaUqVAo
depends:
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    binary-0.7.6.1-c846908debaf8a5e6941c91723b2897e
    bytestring-0.10.6.0-c60f4c543b22c7f7293a06ae48820437
    containers-0.5.6.2-e59c9b78d840fa743d4169d4bea15592
    deepseq-1.4.1.1-614b63b36dd6e29d2b35afff57c25311
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.6.0-6c94e477b45e4c2dbc501b867d875ebf
    integer-gmp-1.0.0.0-3c8c40657a9870f5c33be17496806d8d
    integer-logarithms-1.0.1-e07429175c3e6d89dd23330cf5751a68
    text-1.2.2.1-bd90209501b908bc79e4032fc38e47f7
    vector-0.10.12.3-b49b377778c9b3cae070814242391a13
haddock-interfaces: /home/wrongway4you/Git/dotfiles/.xmonad/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11/html/scientific.haddock
haddock-html: /home/wrongway4you/Git/dotfiles/.xmonad/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/scientific-0.3.4.11/html
